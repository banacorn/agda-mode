// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Chai = require("chai");
var Path = require("path");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var N$AgdaMode = require("../src/Node/N.bs.js");
var GitBranch = require("git-branch");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Expect$BsChai = require("bs-chai/lib/js/src/Expect.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var AgdaMode$AgdaMode = require("../src/AgdaMode.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var CannotReadPackageJson = Caml_exceptions.create("Test__Main-AgdaMode.CannotReadPackageJson");

function asset(path) {
  return Path.join(Test__Util$AgdaMode.base, "test/asset/", path);
}

function parse(param) {
  if (param === "master") {
    return /* Prod */0;
  } else {
    return /* Dev */1;
  }
}

function on(br, test) {
  return GitBranch().then((function (name) {
                if (parse(name) === br) {
                  return Promise.resolve(Curry._1(test, /* () */0));
                } else {
                  return Promise.resolve(/* () */0);
                }
              }));
}

function onDev(param) {
  return on(/* Dev */1, param);
}

function onProd(param) {
  return on(/* Prod */0, param);
}

var Branch = /* module */Caml_chrome_debugger.localModule([
    "parse",
    "on",
    "onDev",
    "onProd"
  ], [
    parse,
    on,
    onDev,
    onProd
  ]);

var readFile = Util.promisify((function (prim, prim$1) {
        Fs.readFile(prim, prim$1);
        return /* () */0;
      }));

function readPackageJSONMain(param) {
  return readFile("./package.json").then((function (buffer) {
                return Rebase.$$Option[/* mapOr */18]((function (prim) {
                              return Promise.resolve(prim);
                            }), Promise.reject(CannotReadPackageJson), Rebase.$$Option[/* flatMap */5](Js_json.decodeString, Rebase.$$Option[/* flatMap */5]((function (obj) {
                                      return Js_dict.get(obj, "main");
                                    }), Js_json.decodeObject(JSON.parse(buffer.toString())))));
              }));
}

on(/* Dev */1, (function (param) {
        return Mocha$BsMocha.describe("Development version")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("points to AgdaMode.bs")(undefined, undefined, undefined, (function (param) {
                                    return readPackageJSONMain(/* () */0).then((function (path) {
                                                  Assert$BsMocha.equal(undefined, path, "./lib/js/src/AgdaMode.bs");
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

on(/* Prod */0, (function (param) {
        return Mocha$BsMocha.describe("Release version")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("has the production bundle ready")(undefined, undefined, undefined, (function (param) {
                              return new Promise((function (resolve, reject) {
                                            Fs.access(Test__Util$AgdaMode.file("lib/js/bundled.js"), (function (err) {
                                                    if (err !== undefined) {
                                                      return reject([
                                                                  N$AgdaMode.Exception,
                                                                  Caml_option.valFromOption(err)
                                                                ]);
                                                    } else {
                                                      return resolve(0);
                                                    }
                                                  }));
                                            return /* () */0;
                                          }));
                            }));
                      return Promise$BsMocha.it("points to the production bundle")(undefined, undefined, undefined, (function (param) {
                                    return readPackageJSONMain(/* () */0).then((function (path) {
                                                  Assert$BsMocha.equal(undefined, path, "./lib/js/bundled.js");
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

function openFile(path) {
  return atom.workspace.open(asset(path));
}

Mocha$BsMocha.describe("Instances")(undefined, undefined, undefined, (function (param) {
        var instances = /* record */Caml_chrome_debugger.record(["contents"], [{ }]);
        var size = function (dict) {
          return Rebase.$$Array[/* length */16](Object.keys(dict[0]));
        };
        Promise$BsMocha.it("should be activated without any problem")(undefined, undefined, undefined, (function (param) {
                instances[0] = AgdaMode$AgdaMode.activate(/* () */0);
                Assert$BsMocha.ok(true);
                return Promise.resolve(/* () */0);
              }));
        Promise$BsMocha.it("should have no instances before opening any files")(undefined, undefined, undefined, (function (param) {
                return Promise.resolve(Assert$BsMocha.equal(undefined, size(instances), 0));
              }));
        Promise$BsMocha.it("should respect the number of opened .agda file")(undefined, undefined, undefined, (function (param) {
                var path = asset("Blank1.agda");
                return atom.workspace.open(asset(path)).then((function (editor) {
                                Assert$BsMocha.equal(undefined, size(instances), 1);
                                var pane = atom.workspace.getActivePane();
                                return pane.destroyItem(editor, true);
                              })).then((function (destroyed) {
                              Assert$BsMocha.equal(undefined, size(instances), destroyed ? 0 : 1);
                              return Promise.resolve(/* () */0);
                            }));
              }));
        Promise$BsMocha.it("should respect the number of opened .lagda file")(undefined, undefined, undefined, (function (param) {
                var path = asset("Blank2.lagda");
                return atom.workspace.open(asset(path)).then((function (editor) {
                                Assert$BsMocha.equal(undefined, size(instances), 1);
                                var pane = atom.workspace.getActivePane();
                                return pane.destroyItem(editor, true);
                              })).then((function (destroyed) {
                              Assert$BsMocha.equal(undefined, size(instances), destroyed ? 0 : 1);
                              return Promise.resolve(/* () */0);
                            }));
              }));
        return Promise$BsMocha.it("should include '.agda' in the classlist")(undefined, undefined, undefined, (function (param) {
                      var path = asset("Blank1.agda");
                      return atom.workspace.open(asset(path)).then((function (editor) {
                                    Assert$BsMocha.ok(atom.views.getView(editor).classList.contains("agda"));
                                    return Promise.resolve(/* () */0);
                                  }));
                    }));
      }));

Mocha$BsMocha.describe("agda-mode")(undefined, undefined, undefined, (function (param) {
        var activationPromise = /* record */Caml_chrome_debugger.record(["contents"], [undefined]);
        Promise$BsMocha.before_each(undefined)(undefined, undefined, undefined, (function (param) {
                activationPromise[0] = Caml_option.some(atom.packages.activatePackage("agda-mode"));
                return Promise.resolve(/* () */0);
              }));
        Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, (function (param) {
                activationPromise[0] = undefined;
                return atom.packages.deactivatePackage("agda-mode", false);
              }));
        Promise$BsMocha.it("should be activated after triggering 'agda-mode:load' on .agda files")(undefined, undefined, undefined, (function (param) {
                Expect$BsChai.Combos[/* to_be_one_of */22](undefined, Test__Util$AgdaMode.getActivePackageNames(/* () */0), Chai.expect("agda-mode").not);
                return atom.workspace.open(asset("Blank1.agda")).then((function (editor) {
                                  return Test__Util$AgdaMode.dispatch(editor, "agda-mode:load");
                                })).then((function (param) {
                                return Rebase.$$Option[/* getOr */16](Promise.resolve(/* () */0), activationPromise[0]);
                              })).then((function (param) {
                              return Promise.resolve(Expect$BsChai.Combos[/* to_be_one_of */22](undefined, Test__Util$AgdaMode.getActivePackageNames(/* () */0), Chai.expect("agda-mode")));
                            }));
              }));
        return Promise$BsMocha.it("should be activated after triggering 'agda-mode:load' on .lagda files")(undefined, undefined, undefined, (function (param) {
                      Expect$BsChai.Combos[/* to_be_one_of */22](undefined, Test__Util$AgdaMode.getActivePackageNames(/* () */0), Chai.expect("agda-mode").not);
                      return atom.workspace.open(asset("Blank2.lagda")).then((function (editor) {
                                        return Test__Util$AgdaMode.dispatch(editor, "agda-mode:load");
                                      })).then((function (param) {
                                      return Rebase.$$Option[/* getOr */16](Promise.resolve(/* () */0), activationPromise[0]);
                                    })).then((function (param) {
                                    return Promise.resolve(Expect$BsChai.Combos[/* to_be_one_of */22](undefined, Test__Util$AgdaMode.getActivePackageNames(/* () */0), Chai.expect("agda-mode")));
                                  }));
                    }));
      }));

exports.CannotReadPackageJson = CannotReadPackageJson;
exports.asset = asset;
exports.Branch = Branch;
exports.readFile = readFile;
exports.readPackageJSONMain = readPackageJSONMain;
exports.openFile = openFile;
/* readFile Not a pure module */
