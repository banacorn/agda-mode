// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var AgdaMode$AgdaMode = require("../src/AgdaMode.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

Mocha$BsMocha.describe("Input Method")(undefined, undefined, undefined, (function (param) {
        var instances = /* record */Caml_chrome_debugger.record(["contents"], [{ }]);
        Promise$BsMocha.before(undefined)(undefined, undefined, undefined, (function (param) {
                instances[0] = AgdaMode$AgdaMode.activate(/* () */0);
                return Promise.resolve(/* () */0);
              }));
        Promise$BsMocha.after(undefined)(undefined, undefined, undefined, (function (param) {
                atom.workspace.getActivePane().destroyItems();
                return Promise.resolve(/* () */0);
              }));
        Promise$BsMocha.it("should respect the number of opened .agda file")(undefined, undefined, undefined, (function (param) {
                return Test__Util$AgdaMode.openFile(Test__Util$AgdaMode.asset("Blank1.agda")).then((function (editor) {
                              return Test__Util$AgdaMode.dispatch(editor, "agda-mode:load").then((function (param) {
                                            Rebase.$$Option[/* forEach */8]((function (instance) {
                                                    AgdaMode$AgdaMode.activate(instance);
                                                    console.log(instance[/* isLoaded */0]);
                                                    console.log(instance[/* isLoaded */0]);
                                                    return /* () */0;
                                                  }), AgdaMode$AgdaMode.Instances[/* get */0](editor));
                                            return Promise.resolve(/* () */0);
                                          }));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
