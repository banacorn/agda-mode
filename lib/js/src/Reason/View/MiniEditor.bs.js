// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ElementRe = require("bs-webapi/lib/js/src/dom/nodes/ElementRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../Util.bs.js");

function make(param) {
  return /* record */Block.record([
            "value",
            "placeholder",
            "ref",
            "telePromise"
          ], [
            "",
            "",
            undefined,
            Util$AgdaMode.TelePromise[/* make */0](/* () */0)
          ]);
}

function inquire(self) {
  return Curry._1(self[/* telePromise */3][/* wire */0], /* () */0);
}

function answer(x, self) {
  return Curry._1(self[/* telePromise */3][/* resolve */2], x);
}

function reject(x, self) {
  return Curry._1(self[/* telePromise */3][/* reject */3], x);
}

var Model = /* module */Block.localModule([
    "make",
    "inquire",
    "answer",
    "reject"
  ], [
    make,
    inquire,
    answer,
    reject
  ]);

function focus(editor) {
  atom.views.getView(editor).focus();
  return /* () */0;
}

function setRef(r, param) {
  param[/* state */1][/* ref */1][0] = Rebase.Option[/* map */0]((function (r) {
          return r.getModel();
        }), (r == null) ? undefined : Caml_option.some(r));
  return /* () */0;
}

var component = ReasonReact.reducerComponent("MiniEditor");

function make$1($staropt$star, $staropt$star$1, hidden, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, $staropt$star$7, _children) {
  var value = $staropt$star !== undefined ? $staropt$star : "";
  var placeholder = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var grammar = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  var onConfirm = $staropt$star$3 !== undefined ? $staropt$star$3 : (function (param) {
        return /* () */0;
      });
  var onCancel = $staropt$star$4 !== undefined ? Caml_option.valFromOption($staropt$star$4) : (function () {
        return /* () */0;
      });
  var onFocus = $staropt$star$5 !== undefined ? Caml_option.valFromOption($staropt$star$5) : (function () {
        return /* () */0;
      });
  var onBlur = $staropt$star$6 !== undefined ? Caml_option.valFromOption($staropt$star$6) : (function () {
        return /* () */0;
      });
  var editorRef = $staropt$star$7 !== undefined ? $staropt$star$7 : (function (param) {
        return /* () */0;
      });
  var observeFocus = function (self, editor) {
    var observer = new MutationObserver((function (mutations, param) {
            var focusedNow = Rebase.$$Array[/* exists */9]((function (m) {
                    return Rebase.Option[/* mapOr */18](Rebase.Fn[/* id */0], false, Rebase.Option[/* map */0]((function (elem) {
                                      return elem.classList.contains("is-focused");
                                    }), ElementRe.ofNode(m.target)));
                  }), mutations);
            if (focusedNow) {
              Curry._1(self[/* send */3], /* Focus */0);
              return onFocus();
            } else {
              Curry._1(self[/* send */3], /* Blur */1);
              return onBlur();
            }
          }));
    var config = {
      attributes: true,
      childList: false,
      subtree: false
    };
    var element = atom.views.getView(editor);
    observer.observe(element, config);
    return Curry._1(self[/* onUnmount */4], (function (param) {
                  observer.disconnect();
                  return /* () */0;
                }));
  };
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                var match = self[/* state */1][/* ref */1][0];
                if (match !== undefined) {
                  var editor = Caml_option.valFromOption(match);
                  if (grammar === "agda") {
                    var agdaGrammar = atom.grammars.grammarForScopeName("source.agda");
                    try {
                      editor.setGrammar(agdaGrammar);
                    }
                    catch (exn){
                      
                    }
                  }
                  Curry._1(editorRef, editor);
                  var disposables = new Atom.CompositeDisposable();
                  disposables.add(atom.commands.add(atom.views.getView(editor), "core:confirm", (function (_event) {
                              return Curry._1(onConfirm, editor.getText());
                            })));
                  disposables.add(atom.commands.add(atom.views.getView(editor), "core:cancel", (function (_event) {
                              return onCancel();
                            })));
                  Curry._1(self[/* onUnmount */4], (function (param) {
                          disposables.dispose();
                          return /* () */0;
                        }));
                  observeFocus(self, editor);
                  editor.setText(value);
                  editor.setPlaceholderText(placeholder);
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* :: */Block.simpleVariant("::", [
                            "mini-editor",
                            /* [] */0
                          ])));
                return React.createElement("atom-text-editor", {
                            class: className,
                            mini: "true",
                            ref: Curry._1(self[/* handle */0], setRef)
                          });
              }),
            (function (param) {
                return /* record */Block.record([
                          "focused",
                          "ref"
                        ], [
                          false,
                          Block.record(["contents"], [undefined])
                        ]);
              }),
            component[/* retainedProps */11],
            (function (action, state) {
                if (action) {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "focused",
                                "ref"
                              ], [
                                false,
                                state[/* ref */1]
                              ])]);
                } else {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "focused",
                                "ref"
                              ], [
                                true,
                                state[/* ref */1]
                              ])]);
                }
              }),
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make$1(jsProps.value, jsProps.placeholder, jsProps.hidden, jsProps.grammar, jsProps.onConfirm, Caml_option.some(jsProps.onCancel), Caml_option.some(jsProps.onFocus), Caml_option.some(jsProps.onBlur), jsProps.editorRef, /* array */[]);
      }));

exports.Model = Model;
exports.focus = focus;
exports.setRef = setRef;
exports.component = component;
exports.make = make$1;
exports.jsComponent = jsComponent;
/* component Not a pure module */
