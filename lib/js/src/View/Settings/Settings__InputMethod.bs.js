// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Extension$AgdaMode = require("../Panel/InputMethod/Extension.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var Translator$AgdaMode = require("../Panel/InputMethod/Translator.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Settings__InputMethod$SymbolLookup(Props) {
  var match = Hook$AgdaMode.useState("");
  var setInput = match[1];
  var translation = Translator$AgdaMode.translate(match[0]);
  var editorRef = React.useRef(undefined);
  var onChange = function (param) {
    var match = editorRef.current;
    if (match !== undefined) {
      return Curry._1(setInput, Caml_option.valFromOption(match).getText());
    } else {
      return /* () */0;
    }
  };
  var partial_arg = Util$AgdaMode.React[/* manyIn */0];
  var arg = function (param) {
    return partial_arg("div", param);
  };
  var candidateSymbols = (function (eta) {
        return Curry._2(arg, undefined, eta);
      })(Rebase.$$Array[/* map */0]((function (symbol) {
              return React.createElement("kbd", {
                          className: "inline-block highlight"
                        }, symbol);
            }), translation[/* candidateSymbols */3]));
  return React.createElement("section", undefined, React.createElement("h2", undefined, "Symbol lookup"), React.createElement("p", undefined, "Enter a key sequence and get corresponding symbols"), React.createElement(MiniEditor$AgdaMode.make, {
                  value: "",
                  placeholder: "enter some key sequence here, e.g 'lambda'",
                  hidden: false,
                  onChange: onChange,
                  onEditorRef: (function (ref) {
                      editorRef.current = Caml_option.some(ref);
                      return /* () */0;
                    })
                }), React.createElement("div", {
                  className: "native-key-bindings",
                  id: "candidate-symbols",
                  tabIndex: -1
                }, candidateSymbols));
}

var SymbolLookup = /* module */Caml_chrome_debugger.localModule(["make"], [Settings__InputMethod$SymbolLookup]);

function Settings__InputMethod$KeySequenceLookup(Props) {
  var match = Hook$AgdaMode.useState(/* array */[]);
  var setInput = match[1];
  var editorRef = React.useRef(undefined);
  var onChange = function (param) {
    return Rebase.$$Option[/* forEach */8](setInput, Rebase.$$Option[/* flatMap */5](Translator$AgdaMode.lookup, Rebase.$$Option[/* map */0]((function (prim) {
                          return prim.getText();
                        }), editorRef.current)));
  };
  var partial_arg = Util$AgdaMode.React[/* manyIn */0];
  var arg = function (param) {
    return partial_arg("span", param);
  };
  var results = (function (eta) {
        return Curry._2(arg, undefined, eta);
      })(Rebase.$$Array[/* map */0]((function (sequence) {
              return React.createElement("span", {
                          className: "inline-block highlight"
                        }, sequence);
            }), match[0]));
  return React.createElement("section", undefined, React.createElement("h2", undefined, "Key sequences lookup"), React.createElement("p", undefined, "Enter a symbol and get corresponding key sequences"), React.createElement(MiniEditor$AgdaMode.make, {
                  value: "",
                  placeholder: "enter some symbol here, e.g \'λ\'",
                  hidden: false,
                  onChange: onChange,
                  onEditorRef: (function (ref) {
                      editorRef.current = Caml_option.some(ref);
                      return /* () */0;
                    })
                }), React.createElement("p", {
                  className: "native-key-bindings",
                  id: "key-sequences",
                  tabIndex: -1
                }, results));
}

var KeySequenceLookup = /* module */Caml_chrome_debugger.localModule(["make"], [Settings__InputMethod$KeySequenceLookup]);

function Settings__InputMethod$ExtendKeymap$ExtensionItem(Props) {
  var sequence = Props.sequence;
  var symbols = Props.symbols;
  var onChange = Props.onChange;
  var editorRef = React.useRef(undefined);
  var match = Hook$AgdaMode.useState(false);
  var setHovered = match[1];
  var onMouseOver = function (param) {
    return Curry._1(setHovered, true);
  };
  var onMouseLeave = function (param) {
    return Curry._1(setHovered, false);
  };
  var match$1 = Hook$AgdaMode.useState(false);
  var setModifying = match$1[1];
  var modifying = match$1[0];
  var symbolsString = Rebase.$$String[/* joinWith */11](" ", Rebase.List[/* fromArray */12](symbols));
  React.useEffect((function () {
          if (modifying) {
            var match = editorRef.current;
            if (match !== undefined) {
              atom.views.getView(Caml_option.valFromOption(match)).focus();
            }
            
          }
          return undefined;
        }), /* array */[modifying]);
  var eta = Rebase.$$Array[/* map */0]((function (symbol) {
          return React.createElement("kbd", {
                      className: "inline-block highlight"
                    }, symbol);
        }), symbols);
  return React.createElement("li", {
              onMouseLeave: onMouseLeave,
              onMouseOver: onMouseOver
            }, React.createElement("div", {
                  className: "sequence"
                }, sequence), React.createElement("div", {
                  className: "symbols"
                }, React.createElement("div", {
                      className: Util$AgdaMode.React[/* showWhen */5](!modifying)
                    }, Curry._2(Util$AgdaMode.React[/* manyInFragment */1], undefined, eta)), React.createElement(MiniEditor$AgdaMode.make, {
                      value: symbolsString,
                      placeholder: "enter some symbol here, e.g \'λ\'",
                      hidden: !modifying,
                      onConfirm: (function (value) {
                          var symbols = Rebase.$$Array[/* filter */10](Curry._2(Rebase.Fn[/* >> */6], Rebase.$$String[/* isEmpty */5], (function (prim) {
                                      return !prim;
                                    })), value.split(""));
                          Extension$AgdaMode.modify(sequence, symbols);
                          Curry._1(onChange, /* () */0);
                          return Curry._1(setModifying, false);
                        }),
                      onCancel: (function (param) {
                          return Curry._1(setModifying, false);
                        }),
                      onEditorRef: (function (ref) {
                          editorRef.current = Caml_option.some(ref);
                          return /* () */0;
                        })
                    })), React.createElement("div", {
                  className: "buttons" + Util$AgdaMode.React[/* showWhen */5](match[0] && !modifying)
                }, React.createElement("button", {
                      className: "btn icon icon-pencil inline-block-tight",
                      onClick: (function (param) {
                          return Curry._1(setModifying, true);
                        })
                    }, "modify"), React.createElement("button", {
                      className: "btn btn-error icon icon-trashcan inline-block-tight"
                    }, "delete")));
}

var ExtensionItem = /* module */Caml_chrome_debugger.localModule(["make"], [Settings__InputMethod$ExtendKeymap$ExtensionItem]);

function Settings__InputMethod$ExtendKeymap(Props) {
  var match = Hook$AgdaMode.useState(Curry._1(Extension$AgdaMode.readKeymap, /* () */0));
  var setKeymap = match[1];
  var onChange = React.useCallback((function (param) {
          return Curry._1(setKeymap, Curry._1(Extension$AgdaMode.readKeymap, /* () */0));
        }), /* array */[]);
  var items = Util$AgdaMode.React[/* manyIn */0]("ul", {
          id: "extensions"
        })(Rebase.$$Array[/* map */0]((function (param) {
              return React.createElement(Settings__InputMethod$ExtendKeymap$ExtensionItem, {
                          sequence: param[0],
                          symbols: param[1],
                          onChange: onChange
                        });
            }), Js_dict.entries(match[0])));
  return React.createElement("section", undefined, React.createElement("h2", undefined, "Keymap extensions"), React.createElement("p", undefined, "Add mappings to the keymap.\nIf the mapping already exists, it will be prioritized in case that the key sequence corresponds to multiple symbols (e.g. 'r')."), items);
}

var ExtendKeymap = /* module */Caml_chrome_debugger.localModule([
    "ExtensionItem",
    "make"
  ], [
    ExtensionItem,
    Settings__InputMethod$ExtendKeymap
  ]);

function Settings__InputMethod(Props) {
  var hidden = Props.hidden;
  return React.createElement("section", {
              className: "agda-settings-input-method" + Util$AgdaMode.React[/* showWhen */5](!hidden)
            }, React.createElement("h1", undefined, React.createElement("span", {
                      className: "icon icon-keyboard"
                    }), React.createElement("span", undefined, "Input Method")), React.createElement("hr", undefined), React.createElement(Settings__InputMethod$SymbolLookup, { }), React.createElement("hr", undefined), React.createElement(Settings__InputMethod$KeySequenceLookup, { }), React.createElement("hr", undefined), React.createElement(Settings__InputMethod$ExtendKeymap, { }));
}

var make = Settings__InputMethod;

exports.SymbolLookup = SymbolLookup;
exports.KeySequenceLookup = KeySequenceLookup;
exports.ExtendKeymap = ExtendKeymap;
exports.make = make;
/* react Not a pure module */
