// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Extension$AgdaMode = require("./Extension.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var QueryJs = require("./../../../../../../asset/query.js");
var KeymapJs = require("./../../../../../../asset/keymap.js");

var rawTable = QueryJs.default;

var rawKeymapObject = KeymapJs.default;

function fromObject(obj) {
  var symbol = (
    obj[">>"] || []
  );
  var subTrie = Js_dict.fromArray(Rebase.$$Array.map((function (key) {
              return /* tuple */[
                      key,
                      fromObject((
      obj[key]
    ))
                    ];
            }), Rebase.$$Array.filter((function (key) {
                  return key !== ">>";
                }), Object.keys(obj))));
  return /* record */Caml_chrome_debugger.record([
            "symbol",
            "subTrie"
          ], [
            symbol,
            subTrie
          ]);
}

var keymap = fromObject(rawKeymapObject);

function toKeySuggestions(trie) {
  return Object.keys(trie[/* subTrie */1]);
}

function toCandidateSymbols(trie) {
  return trie[/* symbol */0];
}

function isInKeymap(input) {
  var _input = input;
  var _trie = keymap;
  while(true) {
    var trie = _trie;
    var input$1 = _input;
    var n = Rebase.$$String.length(input$1);
    if (n !== 0) {
      var key = Rebase.$$String.sub(0, 1, input$1);
      var rest = Rebase.$$String.sub(1, n - 1 | 0, input$1);
      var match = Js_dict.get(trie[/* subTrie */1], key);
      if (match !== undefined) {
        _trie = match;
        _input = rest;
        continue ;
      } else {
        return ;
      }
    } else {
      return trie;
    }
  };
}

function translate(input) {
  var trie = isInKeymap(input);
  var keySuggestions = Extension$AgdaMode.extendKeySuggestions(input, Rebase.$$Option.mapOr(toKeySuggestions, /* array */[], trie));
  var candidateSymbols = Extension$AgdaMode.extendCandidateSymbols(input, Rebase.$$Option.mapOr(toCandidateSymbols, /* array */[], trie));
  return /* record */Caml_chrome_debugger.record([
            "symbol",
            "further",
            "keySuggestions",
            "candidateSymbols"
          ], [
            Rebase.$$Array.get(candidateSymbols, 0),
            Rebase.$$Array.length(keySuggestions) !== 0,
            keySuggestions,
            candidateSymbols
          ]);
}

var initialTranslation = translate("");

function lookup(symbol) {
  return Rebase.$$Option.flatMap((function (param) {
                return Js_dict.get(rawTable, param);
              }), Rebase.$$Option.map((function (prim) {
                    return String(prim);
                  }), Caml_option.undefined_to_opt(symbol.codePointAt(0))));
}

exports.rawTable = rawTable;
exports.rawKeymapObject = rawKeymapObject;
exports.fromObject = fromObject;
exports.keymap = keymap;
exports.toKeySuggestions = toKeySuggestions;
exports.toCandidateSymbols = toCandidateSymbols;
exports.isInKeymap = isInKeymap;
exports.translate = translate;
exports.initialTranslation = initialTranslation;
exports.lookup = lookup;
/* rawTable Not a pure module */
