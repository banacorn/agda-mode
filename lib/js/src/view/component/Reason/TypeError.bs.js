// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var C$AgdaMode = require("./C.bs.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("./Util.bs.js");
var Concrete$AgdaMode = require("./Concrete.bs.js");

var component = ReasonReact.statelessComponent("TypeError");

function make(typeError, emacsMessage, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                console.log(emacsMessage);
                switch (typeError.tag | 0) {
                  case 0 : 
                      return React.createElement("div", undefined, "expected : ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[2][/* concrete */1], /* array */[])), React.createElement("br", undefined), "  actual : ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[1][/* concrete */1], /* array */[])), React.createElement("br", undefined), " of type : ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[3][/* concrete */1], /* array */[])), React.createElement("br", undefined));
                  case 1 : 
                      var forgetSpaceColon = function (name) {
                        var __x = C$AgdaMode.QName[/* toString */0](name);
                        return $$String.contains(__x, /* ":" */58);
                      };
                      var forgetSpaceArrow = function (name) {
                        var __x = C$AgdaMode.QName[/* toString */0](name);
                        return Util$AgdaMode.contains(__x, "->");
                      };
                      var pair = function (param) {
                        var suggestions = param[1];
                        var name = param[0];
                        var match = forgetSpaceColon(name);
                        var match$1 = forgetSpaceArrow(name);
                        var match$2 = List.length(suggestions) !== 0;
                        return React.createElement("li", undefined, ReasonReact.element(undefined, undefined, C$AgdaMode.QName[/* make */2](name, /* array */[])), " is not in scope", match ? React.createElement(React.Fragment, undefined, React.createElement("br", undefined), "did you forget space around the ':'?") : null, match$1 ? React.createElement(React.Fragment, undefined, React.createElement("br", undefined), "did you forget space around the '->'?") : null, match$2 ? React.createElement(React.Fragment, undefined, React.createElement("br", undefined), "did you mean ", Util$AgdaMode.sepBy(" or ", List.map((function (value) {
                                                    return ReasonReact.element(undefined, undefined, C$AgdaMode.QName[/* make */2](value, /* array */[]));
                                                  }), suggestions)), " ?") : null);
                      };
                      return ReactDOMRe.createElementVariadic("ul", undefined, $$Array.of_list(List.map(pair, typeError[0])));
                  case 2 : 
                      return React.createElement("div", undefined, JSON.stringify(typeError[0]));
                  
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
