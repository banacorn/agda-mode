// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Atom = require("atom");
var Util = require("util");
var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Goal$AgdaMode = require("./Goal.bs.js");
var Hole$AgdaMode = require("./Hole.bs.js");
var View$AgdaMode = require("./View.bs.js");
var Async$AgdaMode = require("./Util/Async.bs.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Command$AgdaMode = require("./Command.bs.js");
var Editors$AgdaMode = require("./Editors.bs.js");
var Connection$AgdaMode = require("./Connection.bs.js");
var Highlighting$AgdaMode = require("./Highlighting.bs.js");
var Emacs__Parser$AgdaMode = require("./View/Emacs/Emacs__Parser.bs.js");

function make(textEditor) {
  atom.views.getView(textEditor).classList.add("agda");
  var editors = Editors$AgdaMode.make(textEditor);
  return /* record */Block.record([
            "editors",
            "view",
            "highlightings",
            "goals",
            "connection"
          ], [
            editors,
            View$AgdaMode.initialize(editors),
            [],
            [],
            undefined
          ]);
}

function updateView(header, body, instance) {
  Event$AgdaMode.resolve(header, instance[/* view */1][/* updateHeader */0]);
  return Event$AgdaMode.resolve(body, instance[/* view */1][/* updateBody */1]);
}

function activate(instance) {
  return Event$AgdaMode.resolve(true, instance[/* view */1][/* activatePanel */4]);
}

function destroyAll(instance) {
  Rebase.$$Array[/* forEach */8](Goal$AgdaMode.destroy, instance[/* goals */3]);
  instance[/* goals */3] = /* array */[];
  return /* () */0;
}

function find(index, instance) {
  return Rebase.$$Array[/* get */17](instance[/* goals */3], index);
}

function instantiateAll(indices, instance) {
  destroyAll(instance);
  var textEditor = instance[/* editors */0][/* source */1];
  var filePath = textEditor.getPath();
  var textBuffer = textEditor.getBuffer();
  var source = textEditor.getText();
  var fileType = Goal$AgdaMode.FileType[/* parse */0](filePath);
  var result = Hole$AgdaMode.parse(source, indices, fileType);
  instance[/* goals */3] = Rebase.$$Array[/* map */0]((function (result) {
          var start = textBuffer.positionForCharacterIndex(result[/* originalRange */2][0]);
          var end_ = textBuffer.positionForCharacterIndex(result[/* originalRange */2][1]);
          var range = new Atom.Range(start, end_);
          textEditor.setTextInBufferRange(range, result[/* content */3]);
          return Goal$AgdaMode.make(instance[/* editors */0][/* source */1], result[/* index */0], result[/* modifiedRange */1]);
        }), result);
  return /* () */0;
}

var Goals = /* module */Block.localModule([
    "destroyAll",
    "find",
    "instantiateAll"
  ], [
    destroyAll,
    find,
    instantiateAll
  ]);

function add(annotation, instance) {
  var textEditor = instance[/* editors */0][/* source */1];
  var textBuffer = textEditor.getBuffer();
  var startPoint = textBuffer.positionForCharacterIndex(annotation[/* start */0] - 1 | 0);
  var endPoint = textBuffer.positionForCharacterIndex(annotation[/* end_ */1] - 1 | 0);
  var range = new Atom.Range(startPoint, endPoint);
  var marker = textEditor.markBufferRange(range);
  instance[/* highlightings */2].push(marker);
  var types = annotation[/* types */2].join(" ");
  textEditor.decorateMarker(marker, {
        type: "highlight",
        class: "highlight-decoration " + types
      });
  return /* () */0;
}

function addFromFile(filepath, instance) {
  var readFile = Util.promisify((function (prim, prim$1) {
          Fs.readFile(prim, prim$1);
          return /* () */0;
        }));
  return Async$AgdaMode.mapError((function (err) {
                  console.log(err);
                  console.log("cannot read the indirect highlighting file: " + filepath);
                  return /* () */0;
                }))(Async$AgdaMode.thenOk((function (content) {
                      Rebase.Result[/* forEach */9]((function (annotations) {
                              return Rebase.$$Array[/* forEach */8]((function (annotation) {
                                            return add(annotation, instance);
                                          }), Rebase.$$Array[/* filter */10](Highlighting$AgdaMode.Annotation[/* shouldHighlight */3], annotations));
                            }), Rebase.Result[/* map */0]((function (tokens) {
                                  if (tokens.tag) {
                                    return Highlighting$AgdaMode.Annotation[/* parseIndirectHighlighting */2](tokens[0]);
                                  } else {
                                    return /* array */[];
                                  }
                                }), Emacs__Parser$AgdaMode.SExpression[/* parse */4](content.toString())));
                      return Async$AgdaMode.resolve(/* () */0);
                    }))(Async$AgdaMode.fromPromise(readFile(filepath))));
}

function destroyAll$1(instance) {
  Rebase.$$Array[/* forEach */8]((function (prim) {
          prim.destroy();
          return /* () */0;
        }), instance[/* highlightings */2]);
  instance[/* highlightings */2] = /* array */[];
  return /* () */0;
}

var Highlightings = /* module */Block.localModule([
    "add",
    "addFromFile",
    "destroyAll"
  ], [
    add,
    addFromFile,
    destroyAll$1
  ]);

function connect(instance) {
  var inquireConnection = function (error, instance) {
    activate(instance);
    var promise = Async$AgdaMode.thenOk((function (param) {
              Event$AgdaMode.resolve(/* Connection */1, instance[/* view */1][/* navigateSettingsView */12]);
              var promise = Event$AgdaMode.once(instance[/* view */1][/* onInquireConnection */7]);
              Event$AgdaMode.resolve(/* tuple */[
                    error,
                    ""
                  ], instance[/* view */1][/* inquireConnection */6]);
              return promise;
            }))(Async$AgdaMode.mapError((function (param) {
                  return /* Cancelled */0;
                }))(Event$AgdaMode.once(instance[/* view */1][/* onSettingsView */11])));
    Event$AgdaMode.resolve(true, instance[/* view */1][/* activateSettingsView */10]);
    return promise;
  };
  var getAgdaPath = function (param) {
    var storedPath = Parser$AgdaMode.filepath(atom.config.get("agda-mode.agdaPath"));
    if (Rebase.$$String[/* isEmpty */5](storedPath)) {
      return Connection$AgdaMode.autoSearch("agda");
    } else {
      return Async$AgdaMode.resolve(storedPath);
    }
  };
  var getMetadata = function (instance, path) {
    return Async$AgdaMode.thenError((function (err) {
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getMetadata(instance, param);
                                  }))(inquireConnection(/* Validation */Block.variant("Validation", 1, [
                                      path,
                                      err
                                    ]), instance));
                  }))(Connection$AgdaMode.validateAndMake(path));
  };
  var getConnection = function (instance, metadata) {
    return Async$AgdaMode.thenError((function (err) {
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getConnection(instance, param);
                                  }))(Async$AgdaMode.thenOk((function (param) {
                                        return getMetadata(instance, param);
                                      }))(inquireConnection(/* Connection */Block.variant("Connection", 2, [err]), instance)));
                  }))(Connection$AgdaMode.connect(metadata));
  };
  var match = instance[/* connection */4];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.mapOk((function (param) {
                        var instance$1 = instance;
                        var connection = param;
                        instance$1[/* connection */4] = connection;
                        atom.config.set("agda-mode.agdaPath", connection[/* metadata */0][/* path */0]);
                        Event$AgdaMode.resolve(connection, instance$1[/* view */1][/* updateConnection */5]);
                        return connection;
                      }))(Async$AgdaMode.thenOk((function (param) {
                            return getConnection(instance, param);
                          }))(Async$AgdaMode.thenOk((function (param) {
                                return getMetadata(instance, param);
                              }))(Async$AgdaMode.thenError((function (err) {
                                    return inquireConnection(/* AutoSearch */Block.variant("AutoSearch", 0, [err]), instance);
                                  }))(getAgdaPath(/* () */0))))));
  }
}

function disconnect(instance) {
  var match = instance[/* connection */4];
  if (match !== undefined) {
    Connection$AgdaMode.disconnect(match);
    instance[/* connection */4] = undefined;
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function get(instance) {
  var match = instance[/* connection */4];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return connect(instance);
  }
}

var Connections = /* module */Block.localModule([
    "connect",
    "disconnect",
    "get"
  ], [
    connect,
    disconnect,
    get
  ]);

function deactivate(instance) {
  return Event$AgdaMode.resolve(false, instance[/* view */1][/* activatePanel */4]);
}

function destroy(instance) {
  deactivate(instance);
  return Event$AgdaMode.resolve(/* () */0, instance[/* view */1][/* destroy */13]);
}

function inquire(placeholder, value, instance) {
  activate(instance);
  var promise = Event$AgdaMode.once(instance[/* view */1][/* onInquireQuery */8]);
  Event$AgdaMode.resolve(/* tuple */[
        placeholder,
        value
      ], instance[/* view */1][/* inquireQuery */9]);
  return promise;
}

function cultivateCommand(command, instance) {
  var cultivate = function (command, instance) {
    return Async$AgdaMode.mapError((function (param) {
                    return /* Cancelled */0;
                  }))(Async$AgdaMode.mapOk((function (connection) {
                        return /* record */Block.record([
                                  "connection",
                                  "filepath",
                                  "command"
                                ], [
                                  connection,
                                  instance[/* editors */0][/* source */1].getPath(),
                                  command
                                ]);
                      }))(get(instance)));
  };
  if (typeof command === "number") {
    switch (command) {
      case 0 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return cultivate(/* Load */0, instance);
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(Async$AgdaMode.fromPromise(instance[/* editors */0][/* source */1].save())));
      case 1 : 
          disconnect(instance);
          destroyAll(instance);
          destroyAll$1(instance);
          return Async$AgdaMode.resolve(undefined);
      case 2 : 
          disconnect(instance);
          return cultivate(/* Load */0, instance);
      case 13 : 
          var pointed = Editors$AgdaMode.pointingAt(instance[/* goals */3], instance[/* editors */0]);
          if (pointed !== undefined) {
            var goal = pointed;
            var match = goal[/* index */1];
            if (match !== undefined) {
              var index = match;
              if (Goal$AgdaMode.isEmpty(goal)) {
                return Async$AgdaMode.thenOk((function (result) {
                                Goal$AgdaMode.setContent(result, goal);
                                return cultivate(/* Give */Block.variant("Give", 0, [
                                              goal,
                                              index
                                            ]), instance);
                              }))(Async$AgdaMode.mapError((function (param) {
                                    return /* Cancelled */0;
                                  }))(inquire("expression to give:", "", instance)));
              } else {
                return cultivate(/* Give */Block.variant("Give", 0, [
                              goal,
                              index
                            ]), instance);
              }
            } else {
              updateView(/* record */Block.record([
                      "text",
                      "style"
                    ], [
                      "Goal not indexed",
                      1
                    ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]), instance);
              return Async$AgdaMode.reject(/* GoalNotIndexed */1);
            }
          } else {
            updateView(/* record */Block.record([
                    "text",
                    "style"
                  ], [
                    "Out of goal",
                    1
                  ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["`Give` is a goal-specific command, please place the cursor in a goal"])]), instance);
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      case 14 : 
          var pointed$1 = Editors$AgdaMode.pointingAt(instance[/* goals */3], instance[/* editors */0]);
          if (pointed$1 !== undefined) {
            var goal$1 = pointed$1;
            var match$1 = goal$1[/* index */1];
            if (match$1 !== undefined) {
              return cultivate(/* Refine */Block.variant("Refine", 1, [
                            goal$1,
                            match$1
                          ]), instance);
            } else {
              updateView(/* record */Block.record([
                      "text",
                      "style"
                    ], [
                      "Goal not indexed",
                      1
                    ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]), instance);
              return Async$AgdaMode.reject(/* GoalNotIndexed */1);
            }
          } else {
            updateView(/* record */Block.record([
                    "text",
                    "style"
                  ], [
                    "Out of goal",
                    1
                  ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["`Refine` is a goal-specific command, please place the cursor in a goal"])]), instance);
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      case 15 : 
          var pointed$2 = Editors$AgdaMode.pointingAt(instance[/* goals */3], instance[/* editors */0]);
          if (pointed$2 !== undefined) {
            var goal$2 = pointed$2;
            var match$2 = goal$2[/* index */1];
            if (match$2 !== undefined) {
              return cultivate(/* Auto */Block.variant("Auto", 2, [
                            goal$2,
                            match$2
                          ]), instance);
            } else {
              updateView(/* record */Block.record([
                      "text",
                      "style"
                    ], [
                      "Goal not indexed",
                      1
                    ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]), instance);
              return Async$AgdaMode.reject(/* GoalNotIndexed */1);
            }
          } else {
            updateView(/* record */Block.record([
                    "text",
                    "style"
                  ], [
                    "Out of goal",
                    1
                  ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["`Auto` is a goal-specific command, please place the cursor in a goal"])]), instance);
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      case 16 : 
          var pointed$3 = Editors$AgdaMode.pointingAt(instance[/* goals */3], instance[/* editors */0]);
          if (pointed$3 !== undefined) {
            var goal$3 = pointed$3;
            var match$3 = goal$3[/* index */1];
            if (match$3 !== undefined) {
              var index$1 = match$3;
              if (Goal$AgdaMode.isEmpty(goal$3)) {
                return Async$AgdaMode.thenOk((function (result) {
                                Goal$AgdaMode.setContent(result, goal$3);
                                return cultivate(/* Case */Block.variant("Case", 3, [
                                              goal$3,
                                              index$1
                                            ]), instance);
                              }))(Async$AgdaMode.mapError((function (param) {
                                    return /* Cancelled */0;
                                  }))(inquire("expression to case:", "", instance)));
              } else {
                return cultivate(/* Case */Block.variant("Case", 3, [
                              goal$3,
                              index$1
                            ]), instance);
              }
            } else {
              updateView(/* record */Block.record([
                      "text",
                      "style"
                    ], [
                      "Goal not indexed",
                      1
                    ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]), instance);
              return Async$AgdaMode.reject(/* GoalNotIndexed */1);
            }
          } else {
            updateView(/* record */Block.record([
                    "text",
                    "style"
                  ], [
                    "Out of goal",
                    1
                  ]), /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["`Case` is a goal-specific command, please place the cursor in a goal"])]), instance);
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      default:
        return cultivate(/* Load */0, instance);
    }
  } else if (command.tag === 8) {
    var enabled = atom.config.get("agda-mode.inputMethod");
    if (enabled) {
      switch (command[0]) {
        case 0 : 
            Event$AgdaMode.resolve(true, instance[/* view */1][/* activatePanel */4]);
            Event$AgdaMode.resolve(true, instance[/* view */1][/* activateInputMethod */14]);
            break;
        case 1 : 
            Event$AgdaMode.resolve("{", instance[/* view */1][/* interceptAndInsertKey */15]);
            break;
        case 2 : 
            Event$AgdaMode.resolve("[", instance[/* view */1][/* interceptAndInsertKey */15]);
            break;
        case 3 : 
            Event$AgdaMode.resolve("(", instance[/* view */1][/* interceptAndInsertKey */15]);
            break;
        case 4 : 
            Event$AgdaMode.resolve("\"", instance[/* view */1][/* interceptAndInsertKey */15]);
            break;
        case 5 : 
            Event$AgdaMode.resolve("'", instance[/* view */1][/* interceptAndInsertKey */15]);
            break;
        case 6 : 
            Event$AgdaMode.resolve("`", instance[/* view */1][/* interceptAndInsertKey */15]);
            break;
        
      }
    } else {
      Editors$AgdaMode.Focus[/* get */0](instance[/* editors */0]).insertText("\\");
    }
    return Async$AgdaMode.resolve(undefined);
  } else {
    return cultivate(/* Load */0, instance);
  }
}

function dispatch(command, instance) {
  return Async$AgdaMode.thenOk((function (cultivated) {
                  if (cultivated !== undefined) {
                    var cmd = cultivated;
                    var s = Command$AgdaMode.Cultivated[/* serialize */0](cmd);
                    return Async$AgdaMode.map(Rebase.Option[/* some */11], (function (e) {
                                    return /* Connection */Block.simpleVariant("Connection", [/* Connection */Block.variant("Connection", 2, [e])]);
                                  }))(Connection$AgdaMode.send(s, cmd[/* connection */0]));
                  } else {
                    return Async$AgdaMode.resolve(undefined);
                  }
                }))(cultivateCommand(command, instance));
}

function dispatchUndo(_instance) {
  console.log("Undo");
  return /* () */0;
}

var Event = 0;

exports.Event = Event;
exports.make = make;
exports.updateView = updateView;
exports.activate = activate;
exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.deactivate = deactivate;
exports.destroy = destroy;
exports.inquire = inquire;
exports.cultivateCommand = cultivateCommand;
exports.dispatch = dispatch;
exports.dispatchUndo = dispatchUndo;
/* fs Not a pure module */
