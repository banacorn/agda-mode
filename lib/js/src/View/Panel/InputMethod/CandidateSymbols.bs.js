// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Hook$AgdaMode = require("../../Hook.bs.js");
var Util$AgdaMode = require("../../../Util.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function reducer(totalSize, index, action) {
  switch (action) {
    case 0 : 
        return Caml_primitive.caml_int_max(0, index - 10 | 0);
    case 1 : 
        return Caml_primitive.caml_int_min(totalSize - 1 | 0, index + 10 | 0);
    case 2 : 
        return Caml_primitive.caml_int_min(totalSize - 1 | 0, index + 1 | 0);
    case 3 : 
        return Caml_primitive.caml_int_max(0, index - 1 | 0);
    
  }
}

function CandidateSymbols(Props) {
  var isActive = Props.isActive;
  var candidateSymbols = Props.candidateSymbols;
  var updateTranslation = Props.updateTranslation;
  var chooseSymbol = Props.chooseSymbol;
  var partial_arg = Rebase.$$Array[/* length */16](candidateSymbols);
  var match = React.useReducer((function (param, param$1) {
          return reducer(partial_arg, param, param$1);
        }), 0);
  var move = match[1];
  var index = match[0];
  Hook$AgdaMode.useAtomListenerWhen((function (param) {
          return atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-up", (function ($$event) {
                        Curry._1(move, /* Up */0);
                        $$event.stopImmediatePropagation();
                        return /* () */0;
                      }));
        }), isActive);
  Hook$AgdaMode.useAtomListenerWhen((function (param) {
          return atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-right", (function ($$event) {
                        Curry._1(move, /* Right */2);
                        $$event.stopImmediatePropagation();
                        return /* () */0;
                      }));
        }), isActive);
  Hook$AgdaMode.useAtomListenerWhen((function (param) {
          return atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-down", (function ($$event) {
                        Curry._1(move, /* Down */1);
                        $$event.stopImmediatePropagation();
                        return /* () */0;
                      }));
        }), isActive);
  Hook$AgdaMode.useAtomListenerWhen((function (param) {
          return atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-left", (function ($$event) {
                        Curry._1(move, /* Left */3);
                        $$event.stopImmediatePropagation();
                        return /* () */0;
                      }));
        }), isActive);
  React.useEffect((function () {
          Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, index));
          return undefined;
        }), /* array */[index]);
  var rowStart = Caml_int32.imul(index / 10 | 0, 10);
  var row = Rebase.$$Array[/* slice */25](rowStart, rowStart + 10 | 0, candidateSymbols);
  var match$1 = Rebase.$$Array[/* get */17](candidateSymbols, index);
  if (match$1 !== undefined) {
    return Caml_splice_call.spliceApply(React.createElement, [
                "div",
                {
                  className: "candidates btn-group btn-group-sm"
                },
                Rebase.$$Array[/* mapi */27]((function (key, i) {
                        var isSelected = (rowStart + i | 0) === index;
                        var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("selected", isSelected, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    "btn",
                                    /* [] */0
                                  ])));
                        return React.createElement("button", {
                                    key: key,
                                    className: className,
                                    onClick: (function (param) {
                                        return Curry._1(chooseSymbol, key);
                                      })
                                  }, key);
                      }), row)
              ]);
  } else {
    return null;
  }
}

var make = CandidateSymbols;

exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
