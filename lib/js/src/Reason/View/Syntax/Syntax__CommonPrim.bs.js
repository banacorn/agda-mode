// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");

function id(children) {
  return children;
}

function braces(children) {
  return React.createElement("span", undefined, "{", children, "}");
}

function dbraces(children) {
  return React.createElement("span", undefined, "{{", children, "}}");
}

function parens(children) {
  return React.createElement("span", undefined, "(", children, ")");
}

var component = ReasonReact.statelessComponent("Relevance");

function make(relevance, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                switch (relevance) {
                  case 0 : 
                      return React.createElement(React.Fragment, undefined);
                  case 1 : 
                      return React.createElement("span", undefined, "..");
                  case 2 : 
                      return React.createElement("span", undefined, ".");
                  
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var Relevance = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component,
    make
  ]);

var component$1 = ReasonReact.statelessComponent("Hiding");

function make$1($staropt$star, _, $staropt$star$1, children) {
  var hiding = $staropt$star !== undefined ? $staropt$star : /* NotHidden */1;
  var parens = $staropt$star$1 !== undefined ? $staropt$star$1 : id;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$1[/* debugName */0],
            component$1[/* reactClassInternal */1],
            component$1[/* handedOffState */2],
            component$1[/* willReceiveProps */3],
            component$1[/* didMount */4],
            component$1[/* didUpdate */5],
            component$1[/* willUnmount */6],
            component$1[/* willUpdate */7],
            component$1[/* shouldUpdate */8],
            (function () {
                var match = children.length;
                if (match !== 0) {
                  if (typeof hiding === "number") {
                    if (hiding !== 0) {
                      return Curry._1(parens, ReactDOMRe.createElementVariadic("span", undefined, children));
                    } else {
                      return braces(ReactDOMRe.createElementVariadic("span", undefined, children));
                    }
                  } else {
                    return dbraces(ReactDOMRe.createElementVariadic("span", undefined, children));
                  }
                } else {
                  return null;
                }
              }),
            component$1[/* initialState */10],
            component$1[/* retainedProps */11],
            component$1[/* reducer */12],
            component$1[/* jsElementWrapped */13]
          ]);
}

var Hiding = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$1,
    make$1
  ]);

function map(f, named) {
  return /* record */Block.record([
            "origin",
            "value"
          ], [
            named[/* origin */0],
            Curry._1(f, named[/* value */1])
          ]);
}

function unnamed(value) {
  return /* Named */Block.simpleVariant("Named", [
            undefined,
            value
          ]);
}

function named(name, value) {
  return /* Named */Block.simpleVariant("Named", [
            name,
            value
          ]);
}

var component$2 = ReasonReact.statelessComponent("Named");

function make$2($staropt$star, value, children) {
  var prec = $staropt$star !== undefined ? $staropt$star : 0;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$2[/* debugName */0],
            component$2[/* reactClassInternal */1],
            component$2[/* handedOffState */2],
            component$2[/* willReceiveProps */3],
            component$2[/* didMount */4],
            component$2[/* didUpdate */5],
            component$2[/* willUnmount */6],
            component$2[/* willUpdate */7],
            component$2[/* shouldUpdate */8],
            (function () {
                var value$1 = value[1];
                var name = value[0];
                if (name !== undefined) {
                  var elem = Util$AgdaMode.sepBy(" ", /* :: */Block.simpleVariant("::", [
                          name[1],
                          /* :: */Block.simpleVariant("::", [
                              "=",
                              /* :: */Block.simpleVariant("::", [
                                  Curry._2(children, 0, value$1),
                                  /* [] */0
                                ])
                            ])
                        ]));
                  if (prec > 0) {
                    return parens(elem);
                  } else {
                    return elem;
                  }
                } else {
                  return Curry._2(children, prec, value$1);
                }
              }),
            component$2[/* initialState */10],
            component$2[/* retainedProps */11],
            component$2[/* reducer */12],
            component$2[/* jsElementWrapped */13]
          ]);
}

var Named = /* module */Block.localModule([
    "map",
    "unnamed",
    "named",
    "component",
    "make"
  ], [
    map,
    unnamed,
    named,
    component$2,
    make$2
  ]);

var $$default = /* record */Block.record([
    "hiding",
    "modality",
    "origin",
    "freeVariables"
  ], [
    1,
    Block.record([
        "relevance",
        "quantity"
      ], [
        0,
        1
      ]),
    0,
    0
  ]);

function isVisible(argInfo) {
  return argInfo[/* hiding */0] === /* NotHidden */1;
}

function isHidden(argInfo) {
  return argInfo[/* hiding */0] === /* Hidden */0;
}

var ArgInfo = /* module */Block.localModule([
    "default",
    "isVisible",
    "isHidden"
  ], [
    $$default,
    isVisible,
    isHidden
  ]);

function $$default$1(value) {
  return /* Arg */Block.simpleVariant("Arg", [
            $$default,
            value
          ]);
}

function map$1(f, arged) {
  return /* record */Block.record([
            "origin",
            "value"
          ], [
            arged[/* origin */0],
            Curry._1(f, arged[/* value */1])
          ]);
}

function setArgInfoHiding(hiding, param) {
  var argInfo = param[0];
  return /* Arg */Block.simpleVariant("Arg", [
            /* record */Block.record([
                "hiding",
                "modality",
                "origin",
                "freeVariables"
              ], [
                hiding,
                argInfo[/* modality */1],
                argInfo[/* origin */2],
                argInfo[/* freeVariables */3]
              ]),
            param[1]
          ]);
}

var component$3 = ReasonReact.statelessComponent("Arg");

function make$3($staropt$star, value, children) {
  var prec = $staropt$star !== undefined ? $staropt$star : 0;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$3[/* debugName */0],
            component$3[/* reactClassInternal */1],
            component$3[/* handedOffState */2],
            component$3[/* willReceiveProps */3],
            component$3[/* didMount */4],
            component$3[/* didUpdate */5],
            component$3[/* willUnmount */6],
            component$3[/* willUpdate */7],
            component$3[/* shouldUpdate */8],
            (function () {
                var argInfo = value[0];
                var match = argInfo[/* hiding */0] === /* NotHidden */1;
                var p = match ? prec : 0;
                var match$1 = argInfo[/* origin */2] === /* Substitution */4;
                var localParens = match$1 ? parens : id;
                return ReasonReact.element(undefined, undefined, make$1(argInfo[/* hiding */0], undefined, localParens, /* array */[Curry._2(children, p, value[1])]));
              }),
            component$3[/* initialState */10],
            component$3[/* retainedProps */11],
            component$3[/* reducer */12],
            component$3[/* jsElementWrapped */13]
          ]);
}

var Arg = /* module */Block.localModule([
    "default",
    "map",
    "setArgInfoHiding",
    "component",
    "make"
  ], [
    $$default$1,
    map$1,
    setArgInfoHiding,
    component$3,
    make$3
  ]);

function namedArg(param) {
  return param[1][1];
}

var component$4 = ReasonReact.statelessComponent("NamedArg");

function make$4(value, children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$4[/* debugName */0],
            component$4[/* reactClassInternal */1],
            component$4[/* handedOffState */2],
            component$4[/* willReceiveProps */3],
            component$4[/* didMount */4],
            component$4[/* didUpdate */5],
            component$4[/* willUnmount */6],
            component$4[/* willUpdate */7],
            component$4[/* shouldUpdate */8],
            (function () {
                return ReasonReact.element(undefined, undefined, make$3(undefined, value, (function (prec, value) {
                                  return ReasonReact.element(undefined, undefined, make$2(prec, value, children));
                                })));
              }),
            component$4[/* initialState */10],
            component$4[/* retainedProps */11],
            component$4[/* reducer */12],
            component$4[/* jsElementWrapped */13]
          ]);
}

var NamedArg = /* module */Block.localModule([
    "namedArg",
    "component",
    "make"
  ], [
    namedArg,
    component$4,
    make$4
  ]);

exports.id = id;
exports.braces = braces;
exports.dbraces = dbraces;
exports.parens = parens;
exports.Relevance = Relevance;
exports.Hiding = Hiding;
exports.Named = Named;
exports.ArgInfo = ArgInfo;
exports.Arg = Arg;
exports.NamedArg = NamedArg;
/* component Not a pure module */
