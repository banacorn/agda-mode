// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Hole$AgdaMode = require("../Hole.bs.js");

function destroyAll(instance) {
  Rebase.$$Array[/* forEach */8](Goal$AgdaMode.destroy, instance[/* goals */5]);
  instance[/* goals */5] = /* array */[];
  return /* () */0;
}

function find(index, instance) {
  var found = Rebase.$$Array[/* filter */10]((function (goal) {
          var match = goal[/* index */1];
          if (match !== undefined) {
            return match === index;
          } else {
            return false;
          }
        }), instance[/* goals */5]);
  return Rebase.$$Array[/* get */17](found, 0);
}

function getRanges(instance) {
  return Rebase.$$Array[/* map */0]((function (goal) {
                return goal[/* range */2];
              }), instance[/* goals */5]);
}

function setCursor(goal, instance) {
  var position = goal[/* range */2].start.translate(new Atom.Point(0, 3));
  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
  return /* () */0;
}

function getPositions(instance) {
  return Rebase.$$Array[/* map */0]((function (range) {
                return range.start.translate(new Atom.Point(0, 3));
              }), getRanges(instance));
}

function getPreviousGoalPosition(instance) {
  var previousGoal = /* record */Block.record(["contents"], [undefined]);
  var cursor = instance[/* editors */1][/* source */1].getCursorBufferPosition();
  var positions = getPositions(instance);
  Rebase.$$Array[/* forEach */8]((function (position) {
          if (position.isLessThan(cursor)) {
            previousGoal[0] = Caml_option.some(position);
            return /* () */0;
          } else {
            return 0;
          }
        }), positions);
  if (previousGoal[0] === undefined) {
    previousGoal[0] = Rebase.$$Array[/* get */17](positions, Rebase.$$Array[/* length */16](positions) - 1 | 0);
  }
  return previousGoal[0];
}

function getNextGoalPosition(instance) {
  var nextGoal = /* record */Block.record(["contents"], [undefined]);
  var cursor = instance[/* editors */1][/* source */1].getCursorBufferPosition();
  var positions = getPositions(instance);
  Rebase.$$Array[/* forEach */8]((function (position) {
          if (position.isGreaterThan(cursor) && nextGoal[0] === undefined) {
            nextGoal[0] = Caml_option.some(position);
            return /* () */0;
          } else {
            return 0;
          }
        }), positions);
  if (nextGoal[0] === undefined) {
    nextGoal[0] = Rebase.$$Array[/* get */17](positions, 0);
  }
  return nextGoal[0];
}

function instantiateAll(indices, instance) {
  destroyAll(instance);
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = textEditor.getPath();
  var textBuffer = textEditor.getBuffer();
  var source = textEditor.getText();
  var fileType = Goal$AgdaMode.FileType[/* parse */0](filePath);
  var result = Hole$AgdaMode.parse(source, indices, fileType);
  instance[/* goals */5] = Rebase.$$Array[/* map */0]((function (result) {
          var start = textBuffer.positionForCharacterIndex(result[/* originalRange */2][0]);
          var end_ = textBuffer.positionForCharacterIndex(result[/* originalRange */2][1]);
          var range = new Atom.Range(start, end_);
          textEditor.setTextInBufferRange(range, result[/* content */3]);
          return Goal$AgdaMode.make(instance[/* editors */1][/* source */1], result[/* index */0], result[/* modifiedRange */1]);
        }), result);
  return /* () */0;
}

exports.destroyAll = destroyAll;
exports.find = find;
exports.getRanges = getRanges;
exports.setCursor = setCursor;
exports.getPositions = getPositions;
exports.getPreviousGoalPosition = getPreviousGoalPosition;
exports.getNextGoalPosition = getNextGoalPosition;
exports.instantiateAll = instantiateAll;
/* atom Not a pure module */
