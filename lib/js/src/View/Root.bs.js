// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactUpdate = require("reason-react-update/lib/js/src/ReactUpdate.bs.js");
var Tab$AgdaMode = require("./Tab.bs.js");
var Hook$AgdaMode = require("./Hook.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Panel$AgdaMode = require("./Panel/Panel.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Settings$AgdaMode = require("./Settings/Settings.bs.js");
var Type__View$AgdaMode = require("../Type/Type__View.bs.js");

function createBottomPanel(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

var initialState_000 = /* mountAt : Bottom */Block.variant("Bottom", 0, [createBottomPanel(/* () */0)]);

var initialState = /* record */Block.record([
    "mountAt",
    "isActive",
    "settingsView"
  ], [
    initialState_000,
    false,
    undefined
  ]);

function mountPanel(editors, mountTo, self) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                  return "[Agda Mode] " + editors[/* source */1].getTitle();
                }), (function (param, param$1, previousItem) {
                  return Rebase.$$Option[/* forEach */8]((function (pane) {
                                pane.activate();
                                pane.activateItem(previousItem);
                                return /* () */0;
                              }), atom.workspace.paneForItem(previousItem));
                }), undefined, (function (param) {
                  return Curry._1(self[/* send */0], /* MountTo */Block.variant("MountTo", 3, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */0];
  if (match.tag) {
    if (!mountTo) {
      Curry._1(match[0][/* kill */1], /* () */0);
      Curry._1(self[/* send */0], /* UpdateMountAt */Block.variant("UpdateMountAt", 2, [/* Bottom */Block.variant("Bottom", 0, [createBottomPanel(/* () */0)])]));
    }
    
  } else if (mountTo) {
    Curry._1(self[/* send */0], /* UpdateMountAt */Block.variant("UpdateMountAt", 2, [/* Pane */Block.variant("Pane", 1, [createTab(/* () */0)])]));
  }
  return undefined;
}

function mountSettings(editors, handles, open_, self) {
  var match = self[/* state */1][/* settingsView */2];
  if (match !== undefined) {
    if (open_) {
      Event$AgdaMode.emitOk(true, handles[/* onSettingsView */12]);
    } else {
      Curry._1(match[/* kill */1], /* () */0);
      Curry._1(self[/* send */0], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 1, [undefined]));
      Event$AgdaMode.emitOk(false, handles[/* onSettingsView */12]);
    }
    return undefined;
  } else {
    if (open_) {
      var tab = Tab$AgdaMode.make(editors[/* source */1], (function (param) {
              return "[Settings] " + editors[/* source */1].getTitle();
            }), (function (param, param$1, param$2) {
              return Event$AgdaMode.emitOk(true, handles[/* onSettingsView */12]);
            }), undefined, (function (param) {
              Curry._1(self[/* send */0], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 0, [false]));
              return Event$AgdaMode.emitOk(false, handles[/* onSettingsView */12]);
            }), undefined, /* () */0);
      Curry._1(self[/* send */0], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 1, [tab]));
    }
    return undefined;
  }
}

function reducer(editors, handles, action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          var match = state[/* mountAt */0];
          if (match.tag) {
            return /* SideEffects */Block.variant("SideEffects", 2, [(function (param) {
                          Curry._1(param[/* send */0], /* MountTo */Block.variant("MountTo", 3, [/* ToBottom */0]));
                          return undefined;
                        })]);
          } else {
            return /* SideEffects */Block.variant("SideEffects", 2, [(function (param) {
                          Curry._1(param[/* send */0], /* MountTo */Block.variant("MountTo", 3, [/* ToPane */1]));
                          return undefined;
                        })]);
          }
      case 1 : 
          var match$1 = state[/* mountAt */0];
          if (match$1.tag) {
            var tab = match$1[0];
            return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 1, [
                      /* record */Block.record([
                          "mountAt",
                          "isActive",
                          "settingsView"
                        ], [
                          state[/* mountAt */0],
                          true,
                          state[/* settingsView */2]
                        ]),
                      (function (param) {
                          Curry._1(tab[/* activate */2], /* () */0);
                          return undefined;
                        })
                    ]);
          } else {
            return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                          "mountAt",
                          "isActive",
                          "settingsView"
                        ], [
                          state[/* mountAt */0],
                          true,
                          state[/* settingsView */2]
                        ])]);
          }
      case 2 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "mountAt",
                        "isActive",
                        "settingsView"
                      ], [
                        state[/* mountAt */0],
                        false,
                        state[/* settingsView */2]
                      ])]);
      
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var open_ = action[0];
          return /* SideEffects */Block.variant("SideEffects", 2, [(function (param) {
                        return mountSettings(editors, handles, open_, param);
                      })]);
      case 1 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "mountAt",
                        "isActive",
                        "settingsView"
                      ], [
                        state[/* mountAt */0],
                        state[/* isActive */1],
                        action[0]
                      ])]);
      case 2 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "mountAt",
                        "isActive",
                        "settingsView"
                      ], [
                        action[0],
                        state[/* isActive */1],
                        state[/* settingsView */2]
                      ])]);
      case 3 : 
          var mountTo = action[0];
          return /* SideEffects */Block.variant("SideEffects", 2, [(function (param) {
                        return mountPanel(editors, mountTo, param);
                      })]);
      
    }
  }
}

var make = Type__View$AgdaMode.mouseEmitter.Provider;

var MouseEventProvider = /* module */Block.localModule(["make"], [make]);

function Root(Props) {
  var editors = Props.editors;
  var handles = Props.handles;
  var match = ReactUpdate.useReducer(initialState, (function (param, param$1) {
          return reducer(editors, handles, param, param$1);
        }));
  var send = match[1];
  var state = match[0];
  var queryRef = React.useRef(undefined);
  var match$1 = Hook$AgdaMode.useState(/* record */Block.record([
          "text",
          "style"
        ], [
          "",
          0
        ]));
  var setHeader = match$1[1];
  var match$2 = Hook$AgdaMode.useState(/* Nothing */0);
  var setBody = match$2[1];
  var match$3 = Hook$AgdaMode.useState(/* Display */0);
  var setMode = match$3[1];
  var match$4 = Hook$AgdaMode.useState(false);
  var match$5 = Hook$AgdaMode.useState(false);
  var match$6 = Hook$AgdaMode.useState(/* tuple */[
        undefined,
        undefined
      ]);
  var match$7 = match$6[0];
  React.useEffect((function () {
          editors[/* query */2] = queryRef.current;
          return undefined;
        }), /* array */[]);
  Hook$AgdaMode.useEventListener((function (activate) {
          return Curry._1(send, activate ? /* Activate */1 : /* Deactivate */2);
        }), handles[/* activatePanel */3]);
  Hook$AgdaMode.useEventListener((function (param) {
          Curry._1(send, /* Activate */1);
          Curry._1(setMode, /* Display */0);
          Curry._1(setHeader, param[0]);
          return Curry._1(setBody, param[1]);
        }), handles[/* display */0]);
  Hook$AgdaMode.useEventListener((function (param) {
          Curry._1(send, /* Activate */1);
          Curry._1(setMode, /* Inquire */1);
          Editors$AgdaMode.Focus[/* on */1](/* Query */1, editors);
          Curry._1(setHeader, param[0]);
          return Event$AgdaMode.emitOk(/* tuple */[
                      param[1],
                      param[2]
                    ], handles[/* inquireQuery */9]);
        }), handles[/* inquire */1]);
  Hook$AgdaMode.useEventListener((function (param) {
          return Curry._1(send, /* ToggleDocking */0);
        }), handles[/* toggleDocking */2]);
  Hook$AgdaMode.useEventListener(match$5[1], handles[/* updateIsPending */4]);
  Hook$AgdaMode.useEventListener(match$4[1], handles[/* updateShouldDisplay */5]);
  Hook$AgdaMode.useEventListener((function (param) {
          Curry._1(setMode, /* Display */0);
          return Editors$AgdaMode.Focus[/* on */1](/* Source */0, editors);
        }), handles[/* onInquireQuery */10]);
  Hook$AgdaMode.useEventListener((function (param) {
          console.log("destroy!");
          return /* () */0;
        }), handles[/* destroy */14]);
  Hook$AgdaMode.useEventListener((function (activate) {
          return Curry._1(send, /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 0, [activate]));
        }), handles[/* activateSettingsView */11]);
  Hook$AgdaMode.useEventListener(match$6[1], handles[/* updateConnection */6]);
  var settingsView = state[/* settingsView */2];
  var isActive = state[/* isActive */1];
  var mountAt = state[/* mountAt */0];
  var panelElement;
  panelElement = mountAt.tag ? mountAt[0][/* element */0] : mountAt[0];
  var settingsElement = settingsView !== undefined ? Caml_option.some(settingsView[/* element */0]) : undefined;
  var hidden;
  hidden = mountAt.tag ? false : !(isActive && match$4[0]);
  return React.createElement(React.Fragment, undefined, React.createElement(make, {
                  value: (function ($$event) {
                      return Event$AgdaMode.emitOk($$event, handles[/* onMouseEvent */17]);
                    }),
                  children: null
                }, React.createElement(Panel$AgdaMode.make, {
                      editors: editors,
                      element: panelElement,
                      onMountAtChange: (function (mountTo) {
                          return Curry._1(send, /* MountTo */Block.variant("MountTo", 3, [mountTo]));
                        }),
                      body: match$2[0],
                      header: match$1[0],
                      mountAt: mountAt,
                      mode: match$3[0],
                      hidden: hidden,
                      settingsView: settingsView,
                      isPending: match$5[0],
                      isActive: isActive,
                      onInquireQuery: handles[/* onInquireQuery */10],
                      onEditorRef: (function (ref) {
                          queryRef.current = Caml_option.some(ref);
                          return /* () */0;
                        }),
                      editorPlaceholder: "",
                      editorValue: "",
                      interceptAndInsertKey: handles[/* interceptAndInsertKey */16],
                      activateInputMethod: handles[/* activateInputMethod */15],
                      onSettingsViewToggle: (function (status) {
                          return Curry._1(send, /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 0, [status]));
                        })
                    }), React.createElement(Settings$AgdaMode.make, {
                      inquireConnection: handles[/* inquireConnection */7],
                      onInquireConnection: handles[/* onInquireConnection */8],
                      connection: match$7[0],
                      connectionError: match$7[1],
                      navigate: handles[/* navigateSettingsView */13],
                      element: settingsElement
                    })));
}

function initialize(editors) {
  var element = document.createElement("article");
  var handles = View$AgdaMode.makeHandles(/* () */0);
  var view = View$AgdaMode.make(handles);
  var component = React.createElement(Root, {
        editors: editors,
        handles: handles
      });
  ReactDom.render(component, element);
  return view;
}

var $$Event = 0;

var make$1 = Root;

exports.$$Event = $$Event;
exports.createBottomPanel = createBottomPanel;
exports.initialState = initialState;
exports.mountPanel = mountPanel;
exports.mountSettings = mountSettings;
exports.reducer = reducer;
exports.MouseEventProvider = MouseEventProvider;
exports.make = make$1;
exports.initialize = initialize;
/* initialState Not a pure module */
