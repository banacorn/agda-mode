// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Log$AgdaMode = require("../Log.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function handleCommandError(promise, instance) {
  return $$Promise.mapError(promise, (function (error) {
                if (typeof error === "number") {
                  switch (error) {
                    case /* Cancelled */0 :
                        Curry._3(instance[/* view */2][/* display */3], "Query Cancelled", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                        break;
                    case /* GoalNotIndexed */1 :
                        Curry._3(instance[/* view */2][/* display */3], "Goal not indexed", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, ["Please reload to re-index the goal"])]));
                        break;
                    case /* OutOfGoal */2 :
                        Curry._3(instance[/* view */2][/* display */3], "Out of goal", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, ["Please place the cursor in a goal"])]));
                        break;
                    
                  }
                } else if (error.tag) {
                  var match = Connection$AgdaMode.$$Error.toString(error[0]);
                  Curry._3(instance[/* view */2][/* display */3], "Connection-related Error: " + match[0], /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [match[1]])]));
                } else {
                  var errors = error[0];
                  Rebase.$$Option.forEach((function (conn) {
                          Rebase.$$Array.forEach((function (e) {
                                  return Log$AgdaMode.logError(e)(conn[/* log */5]);
                                }), errors);
                          Curry._3(instance[/* view */2][/* display */3], "Parse Error", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* ParseError */Caml_chrome_debugger.variant("ParseError", 7, [conn])]));
                          return /* () */0;
                        }), instance[/* connection */6]);
                }
                return Editors$AgdaMode.Focus.on(/* Source */0, instance[/* editors */1]);
              }));
}

var Goals = 0;

var Highlightings = 0;

var Connections = 0;

var TextEditors = 0;

exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handleCommandError = handleCommandError;
/* Promise Not a pure module */
