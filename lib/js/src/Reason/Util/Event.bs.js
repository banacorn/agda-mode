// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Async$AgdaMode = require("./Async.bs.js");

function make(resolve, reject, id) {
  return /* record */Block.record([
            "resolve",
            "reject",
            "id"
          ], [
            resolve,
            reject,
            id
          ]);
}

var Listener = /* module */Block.localModule(["make"], [make]);

function make$1(param) {
  return /* record */Block.record([
            "counter",
            "listeners"
          ], [
            Block.record(["contents"], [0]),
            { }
          ]);
}

function removeListener(_id, _self) {
  return (delete _self[1][String(_id)]);
}

function removeListener$prime(_id, _self) {
  return (delete _self[1][_id]);
}

function removeAllListeners(self) {
  return Rebase.$$Array[/* forEach */8]((function (id) {
                return removeListener$prime(id, self);
              }), Object.keys(self[/* listeners */1]));
}

function listen(resolve, reject, self) {
  var id = self[/* counter */0][0] + 1 | 0;
  self[/* counter */0][0] = id;
  var listener = /* record */Block.record([
      "resolve",
      "reject",
      "id"
    ], [
      resolve,
      reject,
      id
    ]);
  self[/* listeners */1][String(id)] = listener;
  return (function (param) {
      return removeListener(id, self);
    });
}

function destroyWhen(trigger, destructor) {
  return Curry._1(trigger, destructor);
}

function onOk(resolve) {
  return (function (param) {
      return listen(resolve, (function (param) {
                    return /* () */0;
                  }), param);
    });
}

function once(self) {
  var id = self[/* counter */0][0] + 1 | 0;
  self[/* counter */0][0] = id;
  return Async$AgdaMode.make((function (resolve, reject) {
                var resolve$prime = function (x) {
                  Curry._1(resolve, x);
                  return removeListener(id, self);
                };
                var reject$prime = function (x) {
                  Curry._1(reject, x);
                  return removeListener(id, self);
                };
                var listener = /* record */Block.record([
                    "resolve",
                    "reject",
                    "id"
                  ], [
                    resolve$prime,
                    reject$prime,
                    id
                  ]);
                self[/* listeners */1][String(id)] = listener;
                return /* () */0;
              }));
}

function resolve(x, self) {
  return Rebase.$$Array[/* forEach */8]((function (listener) {
                return Curry._1(listener[/* resolve */0], x);
              }), Js_dict.values(self[/* listeners */1]));
}

function reject(x, self) {
  return Rebase.$$Array[/* forEach */8]((function (listener) {
                return Curry._1(listener[/* reject */1], x);
              }), Js_dict.values(self[/* listeners */1]));
}

var on = listen;

exports.Listener = Listener;
exports.make = make$1;
exports.removeListener = removeListener;
exports.removeListener$prime = removeListener$prime;
exports.removeAllListeners = removeAllListeners;
exports.listen = listen;
exports.destroyWhen = destroyWhen;
exports.on = on;
exports.onOk = onOk;
exports.once = once;
exports.resolve = resolve;
exports.reject = reject;
/* No side effect */
