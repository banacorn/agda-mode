// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Async$AgdaMode = require("../Util/Async.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Command$AgdaMode = require("../Command.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Response$AgdaMode = require("../Response.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Translator$AgdaMode = require("../View/Panel/Translator.bs.js");
var RunningInfo$AgdaMode = require("../RunningInfo.bs.js");
var Highlighting$AgdaMode = require("../Highlighting.bs.js");
var Type__Location$AgdaMode = require("../Type/Type__Location.bs.js");
var Instance__Goals$AgdaMode = require("./Instance__Goals.bs.js");
var Instance__Connections$AgdaMode = require("./Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("./Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("./Instance__Highlightings.bs.js");

function handleCommandError(instance) {
  return Async$AgdaMode.thenError((function (error) {
                if (typeof error === "number") {
                  switch (error) {
                    case 0 : 
                        Curry._3(instance[/* view */2][/* display */5], "Query Cancelled", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]));
                        break;
                    case 1 : 
                        Curry._3(instance[/* view */2][/* display */5], "Goal not indexed", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]));
                        break;
                    case 2 : 
                        Curry._3(instance[/* view */2][/* display */5], "Out of goal", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please place the cursor in a goal"])]));
                        break;
                    
                  }
                } else if (error.tag) {
                  var match = Connection$AgdaMode.$$Error[/* toString */0](error[0]);
                  Curry._3(instance[/* view */2][/* display */5], "Connection-related Error: " + match[0], /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [match[1]])]));
                } else {
                  var errors = error[0];
                  var intro = String(Rebase.$$Array[/* length */16](errors)) + " error raised when trying to parse the following text responses from agda:\n\n";
                  var message = Rebase.$$String[/* joinWith */11]("\n\n", Rebase.List[/* fromArray */12](Rebase.$$Array[/* map */0](Parser$AgdaMode.$$Error[/* toString */0], errors)));
                  Curry._3(instance[/* view */2][/* display */5], "Parse Error", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [intro + message])]));
                }
                Editors$AgdaMode.Focus[/* on */1](/* Source */0, instance[/* editors */1]);
                return Async$AgdaMode.resolve(/* () */0);
              }));
}

function handleResponse(instance, response) {
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = Parser$AgdaMode.filepath(textEditor.getPath());
  var textBuffer = textEditor.getBuffer();
  if (typeof response === "number") {
    switch (response) {
      case 0 : 
      case 1 : 
          return Async$AgdaMode.resolve(/* () */0);
      case 2 : 
          Instance__Highlightings$AgdaMode.destroyAll(instance);
          return Async$AgdaMode.resolve(/* () */0);
      case 3 : 
          Curry._3(instance[/* view */2][/* display */5], "Status", /* Warning */4, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Done aborting"])]));
          return Async$AgdaMode.resolve(/* () */0);
      
    }
  } else {
    switch (response.tag | 0) {
      case 0 : 
          Rebase.$$Array[/* forEach */8]((function (annotation) {
                  return Instance__Highlightings$AgdaMode.add(annotation, instance);
                }), Rebase.$$Array[/* filter */10](Highlighting$AgdaMode.Annotation[/* shouldHighlight */4], response[1]));
          return Async$AgdaMode.resolve(/* () */0);
      case 1 : 
          var filepath = response[0];
          return Async$AgdaMode.mapError((function (param) {
                          return /* Cancelled */0;
                        }))(Async$AgdaMode.mapOk((function (param) {
                              Fs.unlink(filepath, (function (param) {
                                      return /* () */0;
                                    }));
                              return /* () */0;
                            }))(Instance__Highlightings$AgdaMode.addFromFile(filepath, instance)));
      case 2 : 
          var checked = response[1];
          var displayImplicit = response[0];
          if (displayImplicit || checked) {
            Curry._3(instance[/* view */2][/* display */5], "Status", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Typechecked: " + (Pervasives.string_of_bool(checked) + ("\nDisplay implicit arguments: " + Pervasives.string_of_bool(displayImplicit)))])]));
          }
          return Async$AgdaMode.resolve(/* () */0);
      case 3 : 
          if (response[0] === filePath) {
            var point = textBuffer.positionForCharacterIndex(response[1] - 1 | 0);
            setTimeout((function (param) {
                    textEditor.setCursorBufferPosition(point);
                    return /* () */0;
                  }), 0);
          }
          return Async$AgdaMode.resolve(/* () */0);
      case 4 : 
          Instance__Goals$AgdaMode.instantiateAll(response[0], instance);
          return Async$AgdaMode.resolve(/* () */0);
      case 5 : 
          var give = response[1];
          var index = response[0];
          var match = Instance__Goals$AgdaMode.find(index, instance);
          if (match !== undefined) {
            var goal = match;
            if (typeof give === "number") {
              if (give === 0) {
                var content = Goal$AgdaMode.getContent(goal);
                Goal$AgdaMode.setContent("(" + (content + ")"), goal);
              }
              
            } else {
              Goal$AgdaMode.setContent(give[0].replace((/\\n/g), "\n"), goal);
            }
            Goal$AgdaMode.removeBoundary(goal);
            Goal$AgdaMode.destroy(goal);
            return Async$AgdaMode.resolve(/* () */0);
          } else {
            console.log("error: cannot find goal #" + String(index));
            return Async$AgdaMode.resolve(/* () */0);
          }
      case 6 : 
          var lines = response[1];
          var pointed = Instance__TextEditors$AgdaMode.pointingAt(undefined, instance);
          if (pointed !== undefined) {
            var goal$1 = pointed;
            if (response[0]) {
              Goal$AgdaMode.writeLambda(lines, goal$1);
            } else {
              Goal$AgdaMode.writeLines(lines, goal$1);
            }
            return Curry._2(instance[/* dispatch */8], /* Load */0, instance);
          } else {
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      case 7 : 
          var solutions = response[0];
          var solve = function (param) {
            var match = Instance__Goals$AgdaMode.find(param[0], instance);
            if (match !== undefined) {
              var goal = match;
              Goal$AgdaMode.setContent(param[1], goal);
              Instance__Goals$AgdaMode.setCursor(goal, instance);
              return Curry._2(instance[/* dispatch */8], /* Give */13, instance);
            } else {
              return Async$AgdaMode.resolve(/* () */0);
            }
          };
          return Async$AgdaMode.thenOk((function (param) {
                          var size = Rebase.$$Array[/* length */16](solutions);
                          if (size === 0) {
                            Curry._3(instance[/* view */2][/* display */5], "No solutions found", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]));
                          } else {
                            Curry._3(instance[/* view */2][/* display */5], String(size) + " goals solved", /* Success */3, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]));
                          }
                          return Async$AgdaMode.resolve(/* () */0);
                        }))(Rebase.$$Array[/* reduce */3]((function (promise, solution) {
                            return Async$AgdaMode.thenOk((function (param) {
                                            return Async$AgdaMode.thenOk((function (param) {
                                                            return Async$AgdaMode.resolve(/* () */0);
                                                          }))(solve(solution));
                                          }))(promise);
                          }), Async$AgdaMode.resolve(/* () */0), solutions));
      case 8 : 
          var match$1 = Response$AgdaMode.Info[/* handle */2](response[0]);
          Curry._3(instance[/* view */2][/* display */5], match$1[0], match$1[1], match$1[2]);
          return Async$AgdaMode.resolve(/* () */0);
      case 9 : 
          var message = response[1];
          if (response[0] >= 2) {
            RunningInfo$AgdaMode.add(Parser$AgdaMode.agdaOutput(message), instance[/* runningInfo */7]);
          } else {
            Curry._3(instance[/* view */2][/* display */5], "Type-checking", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [message])]));
          }
          return Async$AgdaMode.resolve(/* () */0);
      
    }
  }
}

function handleResponseAndRecoverCursor(instance, response) {
  return Async$AgdaMode.mapOk((function (param) {
                  return /* () */0;
                }))(Instance__TextEditors$AgdaMode.recoverCursor((function (param) {
                    return handleResponse(instance, response);
                  }), instance));
}

function handleLocalCommand(command, instance) {
  var buff = function (command, instance) {
    return Async$AgdaMode.mapError((function (param) {
                    return /* Cancelled */0;
                  }))(Async$AgdaMode.mapOk((function (connection) {
                        Curry._3(instance[/* view */2][/* display */5], "Loading ...", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]));
                        return /* record */Block.record([
                                  "version",
                                  "filepath",
                                  "command"
                                ], [
                                  connection[/* metadata */0][/* version */2],
                                  Parser$AgdaMode.filepath(instance[/* editors */1][/* source */1].getPath()),
                                  command
                                ]);
                      }))(Instance__Connections$AgdaMode.get(instance)));
  };
  if (typeof command === "number") {
    switch (command) {
      case 0 : 
          return Async$AgdaMode.thenOk((function (param) {
                          Connection$AgdaMode.resetLog(instance[/* connection */6]);
                          instance[/* isLoaded */0] = true;
                          Curry._1(instance[/* view */2][/* activate */0], /* () */0);
                          Curry._1(instance[/* view */2][/* updateShouldDisplay */4], true);
                          Curry._3(instance[/* view */2][/* display */5], "Connecting ...", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]));
                          return buff(/* Load */0, instance);
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(Async$AgdaMode.fromPromise(instance[/* editors */1][/* source */1].save())));
      case 1 : 
          Instance__Connections$AgdaMode.disconnect(instance);
          Instance__Goals$AgdaMode.destroyAll(instance);
          Instance__Highlightings$AgdaMode.destroyAll(instance);
          Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
          instance[/* isLoaded */0] = false;
          Curry._1(instance[/* view */2][/* updateShouldDisplay */4], false);
          return Async$AgdaMode.resolve(undefined);
      case 2 : 
          Instance__Connections$AgdaMode.disconnect(instance);
          return buff(/* Load */0, instance);
      case 3 : 
          return buff(/* Abort */1, instance);
      case 4 : 
          return buff(/* Compile */2, instance);
      case 5 : 
          return buff(/* ToggleDisplayOfImplicitArguments */3, instance);
      case 6 : 
          return buff(/* SolveConstraints */4, instance);
      case 7 : 
          return buff(/* ShowConstraints */5, instance);
      case 8 : 
          return buff(/* ShowGoals */6, instance);
      case 9 : 
          var nextGoal = Instance__Goals$AgdaMode.getNextGoalPosition(instance);
          Rebase.$$Option[/* forEach */8]((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), nextGoal);
          return Async$AgdaMode.resolve(undefined);
      case 10 : 
          var previousGoal = Instance__Goals$AgdaMode.getPreviousGoalPosition(instance);
          Rebase.$$Option[/* forEach */8]((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), previousGoal);
          return Async$AgdaMode.resolve(undefined);
      case 11 : 
          Curry._1(instance[/* view */2][/* toggleDocking */17], /* () */0);
          return Async$AgdaMode.resolve(undefined);
      case 12 : 
          var selectedText = instance[/* editors */1][/* source */1].getSelectedText();
          if (Rebase.$$String[/* isEmpty */5](selectedText)) {
            return Async$AgdaMode.thenOk((function (expr) {
                            return Async$AgdaMode.thenOk((function (param) {
                                            return buff(/* WhyInScope */Block.variant("WhyInScope", 0, [
                                                          expr,
                                                          param[1]
                                                        ]), instance);
                                          }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
                          }))(Async$AgdaMode.mapError((function (param) {
                                return /* Cancelled */0;
                              }))(Curry._3(instance[/* view */2][/* inquire */6], "Scope info", "name:", "")));
          } else {
            return buff(/* WhyInScopeGlobal */Block.variant("WhyInScopeGlobal", 1, [selectedText]), instance);
          }
      case 13 : 
          return Async$AgdaMode.thenOk((function (param) {
                          var index = param[1];
                          var goal = param[0];
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return Async$AgdaMode.thenOk((function (result) {
                                            Goal$AgdaMode.setContent(result, goal);
                                            return buff(/* Give */Block.variant("Give", 9, [
                                                          goal,
                                                          index
                                                        ]), instance);
                                          }))(Async$AgdaMode.mapError((function (param) {
                                                return /* Cancelled */0;
                                              }))(Curry._3(instance[/* view */2][/* inquire */6], "Give", "expression to give:", "")));
                          } else {
                            return buff(/* Give */Block.variant("Give", 9, [
                                          goal,
                                          index
                                        ]), instance);
                          }
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 14 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Refine */Block.variant("Refine", 10, [
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 15 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Refine */Block.variant("Refine", 10, [
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 16 : 
          return Async$AgdaMode.thenOk((function (param) {
                          var index = param[1];
                          var goal = param[0];
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return Async$AgdaMode.thenOk((function (result) {
                                            Goal$AgdaMode.setContent(result, goal);
                                            return buff(/* Case */Block.variant("Case", 12, [
                                                          goal,
                                                          index
                                                        ]), instance);
                                          }))(Async$AgdaMode.mapError((function (param) {
                                                return /* Cancelled */0;
                                              }))(Curry._3(instance[/* view */2][/* inquire */6], "Case", "expression to case:", "")));
                          } else {
                            return buff(/* Case */Block.variant("Case", 12, [
                                          goal,
                                          index
                                        ]), instance);
                          }
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 17 : 
          var selected = Editors$AgdaMode.getSelectedSymbol(instance[/* editors */1]);
          var getSymbol = Rebase.$$String[/* isEmpty */5](Rebase.$$String[/* trim */8](selected)) ? (Curry._1(instance[/* view */2][/* updateShouldDisplay */4], true), Curry._1(instance[/* view */2][/* activate */0], /* () */0), Curry._3(instance[/* view */2][/* inquire */6], "Lookup Unicode Symbol Input Sequence", "symbol to lookup:", "")) : Async$AgdaMode.resolve(selected);
          Async$AgdaMode.finalOk((function (symbol) {
                  return Rebase.$$Option[/* forEach */8]((function (sequences) {
                                return Curry._3(instance[/* view */2][/* display */5], "Input sequence for " + symbol, /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](sequences))])]));
                              }), Translator$AgdaMode.lookup(symbol));
                }), getSymbol);
          return Async$AgdaMode.resolve(undefined);
      case 18 : 
          if (instance[/* isLoaded */0]) {
            var name = Instance__TextEditors$AgdaMode.recoverCursor((function (param) {
                    return Editors$AgdaMode.getSelectedTextNode(instance[/* editors */1]);
                  }), instance);
            return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                            return buff(/* GotoDefinitionGlobal */Block.variant("GotoDefinitionGlobal", 18, [name]), instance);
                          }))(Async$AgdaMode.thenOk((function (param) {
                                return buff(/* GotoDefinition */Block.variant("GotoDefinition", 17, [
                                              name,
                                              param[1]
                                            ]), instance);
                              }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
          } else {
            return Async$AgdaMode.thenOk((function (param) {
                            return handleLocalCommand(/* GotoDefinition */18, instance);
                          }))(handleCommandError(instance)(Curry._2(instance[/* dispatch */8], /* Load */0, instance)));
          }
      
    }
  } else {
    switch (command.tag | 0) {
      case 0 : 
          var normalization = command[0];
          return Async$AgdaMode.thenOk((function (expr) {
                          return buff(/* SearchAbout */Block.variant("SearchAbout", 2, [
                                        normalization,
                                        expr
                                      ]), instance);
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(Curry._3(instance[/* view */2][/* inquire */6], "Searching through definitions [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization) + "]"), "expression to infer:", "")));
      case 1 : 
          var normalization$1 = command[0];
          return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                          return Async$AgdaMode.thenOk((function (expr) {
                                          return buff(/* InferTypeGlobal */Block.variant("InferTypeGlobal", 4, [
                                                        normalization$1,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.mapError((function (param) {
                                              return /* Cancelled */0;
                                            }))(Curry._3(instance[/* view */2][/* inquire */6], "Infer type [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$1) + "]"), "expression to infer:", "")));
                        }))(Async$AgdaMode.thenOk((function (param) {
                              var index = param[1];
                              var goal = param[0];
                              if (Goal$AgdaMode.isEmpty(goal)) {
                                return Async$AgdaMode.thenOk((function (expr) {
                                                return buff(/* InferType */Block.variant("InferType", 3, [
                                                              normalization$1,
                                                              expr,
                                                              index
                                                            ]), instance);
                                              }))(Async$AgdaMode.mapError((function (param) {
                                                    return /* Cancelled */0;
                                                  }))(Curry._3(instance[/* view */2][/* inquire */6], "Infer type [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$1) + "]"), "expression to infer:", "")));
                              } else {
                                return buff(/* Give */Block.variant("Give", 9, [
                                              goal,
                                              index
                                            ]), instance);
                              }
                            }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
      case 2 : 
          var normalization$2 = command[0];
          return Async$AgdaMode.thenOk((function (expr) {
                          return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                                          return buff(/* ModuleContentsGlobal */Block.variant("ModuleContentsGlobal", 6, [
                                                        normalization$2,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.thenOk((function (param) {
                                              return buff(/* ModuleContents */Block.variant("ModuleContents", 5, [
                                                            normalization$2,
                                                            expr,
                                                            param[1]
                                                          ]), instance);
                                            }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(Curry._3(instance[/* view */2][/* inquire */6], "Module contents [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$2) + "]"), "module name:", "")));
      case 3 : 
          var computeMode = command[0];
          return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                          return Async$AgdaMode.thenOk((function (expr) {
                                          return buff(/* ComputeNormalFormGlobal */Block.variant("ComputeNormalFormGlobal", 8, [
                                                        computeMode,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.mapError((function (param) {
                                              return /* Cancelled */0;
                                            }))(Curry._3(instance[/* view */2][/* inquire */6], "Compute normal form", "expression to normalize:", "")));
                        }))(Async$AgdaMode.thenOk((function (param) {
                              var index = param[1];
                              var goal = param[0];
                              if (Goal$AgdaMode.isEmpty(goal)) {
                                return Async$AgdaMode.thenOk((function (expr) {
                                                return buff(/* ComputeNormalForm */Block.variant("ComputeNormalForm", 7, [
                                                              computeMode,
                                                              expr,
                                                              index
                                                            ]), instance);
                                              }))(Async$AgdaMode.mapError((function (param) {
                                                    return /* Cancelled */0;
                                                  }))(Curry._3(instance[/* view */2][/* inquire */6], "Compute normal form", "expression to normalize:", "")));
                              } else {
                                var expr = Goal$AgdaMode.getContent(goal);
                                return buff(/* ComputeNormalForm */Block.variant("ComputeNormalForm", 7, [
                                              computeMode,
                                              expr,
                                              index
                                            ]), instance);
                              }
                            }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
      case 4 : 
          var normalization$3 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalType */Block.variant("GoalType", 13, [
                                        normalization$3,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 5 : 
          var normalization$4 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Context */Block.variant("Context", 14, [
                                        normalization$4,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 6 : 
          var normalization$5 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalTypeAndContext */Block.variant("GoalTypeAndContext", 15, [
                                        normalization$5,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 7 : 
          var normalization$6 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalTypeAndInferredType */Block.variant("GoalTypeAndInferredType", 16, [
                                        normalization$6,
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 8 : 
          var enabled = atom.config.get("agda-mode.inputMethod");
          if (enabled) {
            Curry._1(instance[/* view */2][/* updateShouldDisplay */4], true);
            switch (command[0]) {
              case 0 : 
                  Curry._1(instance[/* view */2][/* activate */0], /* () */0);
                  Curry._1(instance[/* view */2][/* activateInputMethod */9], true);
                  break;
              case 1 : 
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "{");
                  break;
              case 2 : 
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "[");
                  break;
              case 3 : 
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "(");
                  break;
              case 4 : 
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "\"");
                  break;
              case 5 : 
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "'");
                  break;
              case 6 : 
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "`");
                  break;
              case 7 : 
                  Curry._1(instance[/* view */2][/* activateInputMethod */9], false);
                  break;
              
            }
          } else {
            Editors$AgdaMode.Focus[/* get */0](instance[/* editors */1]).insertText("\\");
          }
          return Async$AgdaMode.resolve(undefined);
      case 9 : 
          var match = command[0];
          if (match.tag) {
            var positions = Instance__Goals$AgdaMode.getPositions(instance);
            Editors$AgdaMode.Focus[/* on */1](/* Source */0, instance[/* editors */1]);
            Rebase.$$Option[/* forEach */8]((function (position) {
                    instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                    return /* () */0;
                  }), Rebase.$$Array[/* get */17](positions, match[0]));
            return Async$AgdaMode.resolve(undefined);
          } else {
            var range = match[0];
            var filePath = instance[/* editors */1][/* source */1].getPath();
            var match$1;
            if (range) {
              var match$2 = range[0];
              if (match$2 !== undefined) {
                var path = match$2;
                var match$3 = path === filePath;
                match$1 = /* tuple */[
                  true,
                  match$3 ? undefined : path
                ];
              } else {
                match$1 = /* tuple */[
                  true,
                  undefined
                ];
              }
            } else {
              match$1 = /* tuple */[
                false,
                undefined
              ];
            }
            var otherFilePath = match$1[1];
            if (match$1[0]) {
              if (otherFilePath !== undefined) {
                var match$4;
                if (range) {
                  var match$5 = Rebase.$$Array[/* get */17](range[1], 0);
                  if (match$5 !== undefined) {
                    var i = match$5;
                    match$4 = /* tuple */[
                      i[/* start */0][/* line */1] - 1 | 0,
                      i[/* start */0][/* col */2] - 1 | 0
                    ];
                  } else {
                    match$4 = /* tuple */[
                      0,
                      0
                    ];
                  }
                } else {
                  match$4 = /* tuple */[
                    0,
                    0
                  ];
                }
                var option = {
                  initialLine: match$4[0],
                  initialColumn: match$4[1],
                  split: "right",
                  activatePane: true,
                  activateItem: true,
                  pending: false,
                  searchAllPanes: true,
                  location: undefined
                };
                return Async$AgdaMode.then_((function (param) {
                                return Async$AgdaMode.resolve(undefined);
                              }), (function (param) {
                                return Async$AgdaMode.reject(/* Cancelled */0);
                              }))(Async$AgdaMode.fromPromise(atom.workspace.open(otherFilePath, option)));
              } else {
                var ranges = Type__Location$AgdaMode.$$Range[/* toAtomRanges */3](range);
                if (Rebase.$$Option[/* isSome */13](Rebase.$$Array[/* get */17](ranges, 0))) {
                  setTimeout((function (param) {
                          instance[/* editors */1][/* source */1].setSelectedBufferRanges(ranges);
                          return /* () */0;
                        }), 0);
                }
                return Async$AgdaMode.resolve(undefined);
              }
            } else {
              return Async$AgdaMode.resolve(undefined);
            }
          }
      
    }
  }
}

function handleRemoteCommand(instance, remote) {
  if (remote !== undefined) {
    var handleResults = /* record */Block.record(["contents"], [[]]);
    var parseErrors = /* record */Block.record(["contents"], [[]]);
    var serialized = Command$AgdaMode.Remote[/* serialize */0](remote);
    return Async$AgdaMode.make((function (resolve$prime, reject$prime) {
                  Async$AgdaMode.mapOk((function (connection) {
                            Event$AgdaMode.on((function (param) {
                                    var resolve$prime$1 = resolve$prime;
                                    var reject$prime$1 = reject$prime;
                                    var param$1 = param;
                                    if (param$1.tag) {
                                      Curry._1(reject$prime$1, /* ConnectionError */Block.variant("ConnectionError", 1, [/* ConnectionError */Block.variant("ConnectionError", 2, [param$1[0]])]));
                                      return /* () */0;
                                    } else {
                                      var match = param$1[0];
                                      if (typeof match === "number") {
                                        if (Rebase.$$Array[/* length */16](parseErrors[0]) > 0) {
                                          Curry._1(reject$prime$1, /* ParseError */Block.variant("ParseError", 0, [parseErrors[0]]));
                                          return /* () */0;
                                        } else {
                                          Async$AgdaMode.mapOk((function (param) {
                                                    return Curry._1(resolve$prime$1, /* () */0);
                                                  }))(Async$AgdaMode.all(handleResults[0]));
                                          return /* () */0;
                                        }
                                      } else if (match.tag) {
                                        var response = match[0];
                                        var result = Instance__TextEditors$AgdaMode.recoverCursor((function (param) {
                                                return handleResponse(instance, response);
                                              }), instance);
                                        handleResults[0] = Rebase.$$Array[/* concat */11](/* array */[result], handleResults[0]);
                                        return /* () */0;
                                      } else {
                                        parseErrors[0] = Rebase.$$Array[/* concat */11](/* array */[match[0]], parseErrors[0]);
                                        return /* () */0;
                                      }
                                    }
                                  }), Connection$AgdaMode.send(serialized, connection));
                            return /* () */0;
                          }))(Instance__Connections$AgdaMode.get(instance));
                  return /* () */0;
                }));
  } else {
    return Async$AgdaMode.resolve(/* () */0);
  }
}

function dispatch(command, instance) {
  return Async$AgdaMode.pass((function (param) {
                  return Curry._1(instance[/* view */2][/* updateIsPending */7], false);
                }))(Async$AgdaMode.pass((function (param) {
                      return Instance__TextEditors$AgdaMode.endCheckpoint(instance);
                    }))(Async$AgdaMode.thenOk((function (param) {
                          return handleRemoteCommand(instance, param);
                        }))(Async$AgdaMode.pass((function (param) {
                              return Curry._1(instance[/* view */2][/* updateIsPending */7], true);
                            }))(Async$AgdaMode.pass((function (param) {
                                  return Instance__TextEditors$AgdaMode.startCheckpoint(command, instance);
                                }))(handleLocalCommand(command, instance))))));
}

var Goals = 0;

var Highlightings = 0;

var Connections = 0;

var TextEditors = 0;

exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handleCommandError = handleCommandError;
exports.handleResponse = handleResponse;
exports.handleResponseAndRecoverCursor = handleResponseAndRecoverCursor;
exports.handleLocalCommand = handleLocalCommand;
exports.handleRemoteCommand = handleRemoteCommand;
exports.dispatch = dispatch;
/* fs Not a pure module */
