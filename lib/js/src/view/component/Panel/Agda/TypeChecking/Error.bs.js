// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

function position(param) {
  return Json_decode.andThen((function (tup, _) {
                return /* record */Block.record([
                          "pos",
                          "line",
                          "col"
                        ], [
                          Caml_array.caml_array_get(tup, 2),
                          Caml_array.caml_array_get(tup, 0),
                          Caml_array.caml_array_get(tup, 1)
                        ]);
              }), (function (param) {
                return Json_decode.array(Json_decode.$$int, param);
              }), param);
}

function interval(json) {
  return /* record */Block.record([
            "start",
            "end_"
          ], [
            Json_decode.field("start", position, json),
            Json_decode.field("end", position, json)
          ]);
}

function range(param) {
  return Json_decode.withDefault(/* NoRange */0, (function (json) {
                return /* Range */Block.simpleVariant("Range", [
                          Json_decode.field("source", (function (param) {
                                  return Json_decode.optional(Json_decode.string, param);
                                }), json),
                          Json_decode.field("intervals", (function (param) {
                                  return Json_decode.list(interval, param);
                                }), json)
                        ]);
              }), param);
}

var Position = /* module */Block.localModule([
    "position",
    "interval",
    "range"
  ], [
    position,
    interval,
    range
  ]);

var Syntax = /* module */Block.localModule(["Position"], [Position]);

function error(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "Exception" : 
                      return /* Exception */Block.variant("Exception", 1, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("message", Json_decode.string, json)
                              ]);
                  case "IOException" : 
                      return /* IOException */Block.variant("IOException", 2, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("message", Json_decode.string, json)
                              ]);
                  case "PatternError" : 
                      return /* PatternError */Block.variant("PatternError", 3, [Json_decode.field("range", range, json)]);
                  case "TypeError" : 
                      return /* TypeError */Block.variant("TypeError", 0, [Json_decode.field("range", range, json)]);
                  default:
                    return /* IOException */Block.variant("IOException", 2, [
                              Json_decode.field("range", range, json),
                              "JSON Parse Error"
                            ]);
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

var TypeChecking = /* module */Block.localModule(["error"], [error]);

var Decode = /* module */Block.localModule([
    "Syntax",
    "TypeChecking"
  ], [
    Syntax,
    TypeChecking
  ]);

function parseError(json) {
  var error$1 = error(json);
  console.log(json);
  console.log(error$1);
  return /* () */0;
}

exports.Decode = Decode;
exports.parseError = parseError;
/*  Not a pure module */
