// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Log$AgdaMode = require("../Log.bs.js");
var Request$AgdaMode = require("../Request.bs.js");
var Response$AgdaMode = require("../Response.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Command$AgdaMode = require("./Task__Command.bs.js");
var Task__Response$AgdaMode = require("./Task__Response.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Instance__Handler$AgdaMode = require("../Instance/Instance__Handler.bs.js");
var Instance__Connections$AgdaMode = require("../Instance/Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");

function packRequest(request, instance) {
  return $$Promise.mapError($$Promise.flatMapOk(Instance__Connections$AgdaMode.get(instance), (function (connection) {
                    return $$Promise.map(Curry._3(instance[/* view */2][/* display */3], "Loading ...", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])])), (function (param) {
                                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* record */Caml_chrome_debugger.record([
                                                "version",
                                                "filepath",
                                                "request"
                                              ], [
                                                connection[/* metadata */0][/* version */2],
                                                Instance__TextEditors$AgdaMode.getPath(instance),
                                                request
                                              ])]);
                                }));
                  })), (function (param) {
                return /* Cancelled */0;
              }));
}

function sendRequest(instance, request) {
  var match = $$Promise.pending(/* () */0);
  var resolve = match[1];
  $$Promise.getOk($$Promise.tapError(Instance__Connections$AgdaMode.get(instance), (function (_error) {
              return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Cancelled */0]));
            })), (function (connection) {
          var packedRequest_000 = /* version */connection[/* metadata */0][/* version */2];
          var packedRequest_001 = /* filepath */Instance__TextEditors$AgdaMode.getPath(instance);
          var packedRequest = /* record */Caml_chrome_debugger.record([
              "version",
              "filepath",
              "request"
            ], [
              packedRequest_000,
              packedRequest_001,
              request
            ]);
          if (Request$AgdaMode.isLoad(packedRequest) && connection[/* resetLogOnLoad */3]) {
            Connection$AgdaMode.resetLog(connection);
          }
          Log$AgdaMode.createEntry(request, connection[/* log */5]);
          var inputForAgda = Request$AgdaMode.toAgdaReadableString(packedRequest);
          var responseTasks = /* record */Caml_chrome_debugger.record(["contents"], [0]);
          var parseErrors = /* record */Caml_chrome_debugger.record(["contents"], [0]);
          var onResponse = function (param) {
            if (param.tag) {
              return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* ConnectionError */Caml_chrome_debugger.variant("ConnectionError", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [param[0]])])]));
            } else {
              var match = param[0];
              if (match) {
                var match$1 = match[0];
                if (match$1.tag) {
                  parseErrors[0] = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      match$1[0],
                      parseErrors[0]
                    ]);
                  return /* () */0;
                } else {
                  var tasks = Task__Response$AgdaMode.handle(match$1[0]);
                  responseTasks[0] = Rebase.List.concat(tasks, responseTasks[0]);
                  return /* () */0;
                }
              } else if (Rebase.List.isEmpty(parseErrors[0])) {
                return Curry._1(resolve, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [responseTasks[0]]));
              } else {
                return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* ParseError */Caml_chrome_debugger.variant("ParseError", 0, [Rebase.$$Array.fromList(parseErrors[0])])]));
              }
            }
          };
          Curry._1(Connection$AgdaMode.send(inputForAgda, connection)[/* on */3], onResponse);
          return /* () */0;
        }));
  return match[0];
}

function sendRequest2(instance, errorHandler, request) {
  var match = $$Promise.pending(/* () */0);
  var resolve = match[1];
  console.log(" <<< ", request);
  $$Promise.getOk($$Promise.tapError(Instance__Connections$AgdaMode.get(instance), (function (_error) {
              return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Cancelled */0]));
            })), (function (connection) {
          var packedRequest_000 = /* version */connection[/* metadata */0][/* version */2];
          var packedRequest_001 = /* filepath */Instance__TextEditors$AgdaMode.getPath(instance);
          var packedRequest = /* record */Caml_chrome_debugger.record([
              "version",
              "filepath",
              "request"
            ], [
              packedRequest_000,
              packedRequest_001,
              request
            ]);
          if (Request$AgdaMode.isLoad(packedRequest) && connection[/* resetLogOnLoad */3]) {
            Connection$AgdaMode.resetLog(connection);
          }
          Log$AgdaMode.createEntry(request, connection[/* log */5]);
          var inputForAgda = Request$AgdaMode.toAgdaReadableString(packedRequest);
          var resultsOfResponseHandling = /* record */Caml_chrome_debugger.record(["contents"], [0]);
          var parseErrors = /* record */Caml_chrome_debugger.record(["contents"], [0]);
          var onResponse = function (param) {
            if (param.tag) {
              return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* ConnectionError */Caml_chrome_debugger.variant("ConnectionError", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [param[0]])])]));
            } else {
              var match = param[0];
              if (match) {
                var match$1 = match[0];
                if (match$1.tag) {
                  parseErrors[0] = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      match$1[0],
                      parseErrors[0]
                    ]);
                  return /* () */0;
                } else {
                  var response = match$1[0];
                  console.log(" >>> ", Response$AgdaMode.toString(response));
                  var result = Instance__TextEditors$AgdaMode.updateCursorPosition((function (param) {
                          var x = Task__Response$AgdaMode.handle(response);
                          return run(instance, errorHandler, (console.log(Rebase.$$Array.fromList(x)), x));
                        }), instance);
                  resultsOfResponseHandling[0] = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      result,
                      resultsOfResponseHandling[0]
                    ]);
                  return /* () */0;
                }
              } else if (Rebase.List.isEmpty(parseErrors[0])) {
                return $$Promise.get($$Promise.all(resultsOfResponseHandling[0]), (function (_results) {
                              return Curry._1(resolve, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
                            }));
              } else {
                return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* ParseError */Caml_chrome_debugger.variant("ParseError", 0, [Rebase.$$Array.fromList(parseErrors[0])])]));
              }
            }
          };
          Curry._1(Connection$AgdaMode.send(inputForAgda, connection)[/* on */3], onResponse);
          return /* () */0;
        }));
  return match[0];
}

function run(instance, errorHandler, tasks) {
  var runTasks = function (x) {
    return $$Promise.flatMap(x, (function (param) {
                  if (param.tag) {
                    return Curry._1(errorHandler, param[0]);
                  } else {
                    return run(instance, errorHandler, param[0]);
                  }
                }));
  };
  var runTask = function (task) {
    console.log(" --- ", task);
    if (typeof task === "number") {
      switch (task) {
        case /* Disconnect */0 :
            return Instance__Connections$AgdaMode.disconnect(instance);
        case /* Activate */1 :
            return $$Promise.map(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                          return /* () */0;
                        }));
        case /* Deactivate */2 :
            return Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
        
      }
    } else {
      switch (task.tag | 0) {
        case /* WithInstance */0 :
            return runTasks(Curry._1(task[0], instance));
        case /* Display */1 :
            return Curry._3(instance[/* view */2][/* display */3], task[0], task[1], task[2]);
        case /* Inquire */2 :
            return runTasks($$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], task[0], task[1], task[2]), (function (param) {
                                  return /* Cancelled */0;
                                })), task[3]));
        case /* Editor */3 :
            return runTasks($$Promise.mapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(instance[/* editors */1][/* source */1].save())), (function (param) {
                                  return /* Cancelled */0;
                                })), (function (param) {
                              return /* [] */0;
                            })));
        case /* Goals */4 :
            var match = task[0];
            if (typeof match === "number") {
              if (match === /* JumpToTheNext */0) {
                return $$Promise.resolved(Rebase.$$Option.forEach((function (position) {
                                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                  return /* () */0;
                                }), Instance__Goals$AgdaMode.getNextGoalPosition(instance)));
              } else {
                return $$Promise.resolved(Rebase.$$Option.forEach((function (position) {
                                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                  return /* () */0;
                                }), Instance__Goals$AgdaMode.getPreviousGoalPosition(instance)));
              }
            } else if (match.tag) {
              var handler = match[1];
              return $$Promise.flatMap($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), match[0]), (function (param) {
                            if (param.tag) {
                              var error = param[0];
                              if (typeof error === "number" && error >= 2) {
                                return run(instance, errorHandler, Curry._1(handler, /* () */0));
                              } else {
                                return Curry._1(errorHandler, error);
                              }
                            } else {
                              return run(instance, errorHandler, param[0]);
                            }
                          }));
            } else {
              return runTasks($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), match[0]));
            }
        case /* DispatchCommand */5 :
            var command = task[0];
            Instance__TextEditors$AgdaMode.startCheckpoint(command, instance);
            var program = run(instance, errorHandler, Task__Command$AgdaMode.handle(command));
            return $$Promise.tap(program, (function (param) {
                          return Instance__TextEditors$AgdaMode.endCheckpoint(instance);
                        }));
        case /* SendRequest */6 :
            var request = task[0];
            return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Curry._1(instance[/* view */2][/* updateIsPending */5], true), (function (param) {
                                  return sendRequest2(instance, errorHandler, request);
                                })), (function (param) {
                              Curry._1(instance[/* onDispatch */8][/* emit */1], /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
                              return Curry._1(instance[/* view */2][/* updateIsPending */5], false);
                            })), (function (param) {
                          return /* () */0;
                        }));
        
      }
    }
  };
  var runEach = function (param) {
    if (param) {
      var xs = param[1];
      return $$Promise.flatMap(runTask(param[0]), (function (param) {
                    return runEach(xs);
                  }));
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  return runEach(tasks);
}

function dispatchCommand(command, instance) {
  return run(instance, (function (error) {
                return $$Promise.map(Instance__Handler$AgdaMode.handleCommandError($$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [error])), instance), (function (param) {
                              return /* () */0;
                            }));
              }), Task__Command$AgdaMode.handle(command));
}

exports.packRequest = packRequest;
exports.sendRequest = sendRequest;
exports.sendRequest2 = sendRequest2;
exports.run = run;
exports.dispatchCommand = dispatchCommand;
/* Promise Not a pure module */
