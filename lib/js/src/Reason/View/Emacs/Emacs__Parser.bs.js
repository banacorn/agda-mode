// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Util$AgdaMode = require("../../Util.bs.js");

function unindent(lines) {
  var newLineIndices = Rebase.$$Array[/* map */0]((function (param) {
          return param[2];
        }), Rebase.$$Array[/* filter */10]((function (param) {
              var line = param[0];
              var nextLine = param[1];
              var sort = (/^Sort \S*/);
              var delimeter = (/^\u2014{4}/g);
              var completeJudgement = (/^(?:(?:[^\(\{\s]+\s+\:)|Have\:|Goal\:)\s* \S*/);
              var reallyLongTermIdentifier = (/^\S+$/);
              var restOfTheJudgement = (/^\s*\:\s* \S*/);
              if (sort.test(line) || delimeter.test(line) || reallyLongTermIdentifier.test(line) && Rebase.Option[/* exists */9]((function (line) {
                        return restOfTheJudgement.test(line);
                      }), nextLine)) {
                return true;
              } else {
                return completeJudgement.test(line);
              }
            }), Rebase.$$Array[/* mapi */27]((function (line, index) {
                  return /* tuple */[
                          line,
                          Rebase.$$Array[/* get */17](lines, index + 1 | 0),
                          index
                        ];
                }), lines)));
  return Rebase.$$Array[/* map */0]((function (param) {
                return Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](Rebase.$$Array[/* slice */25](param[0], param[1], lines)));
              }), Rebase.$$Array[/* mapi */27]((function (index, i) {
                    var match = Rebase.$$Array[/* get */17](newLineIndices, i + 1 | 0);
                    if (match !== undefined) {
                      return /* tuple */[
                              index,
                              match
                            ];
                    } else {
                      return /* tuple */[
                              index,
                              Rebase.$$Array[/* length */16](lines) + 1 | 0
                            ];
                    }
                  }), newLineIndices));
}

var filepath = /* String */Block.variant("String", 1, [(function (raw) {
        var parsed = Path.parse(raw.replace("\n", ""));
        var joined = Rebase.$$String[/* joinWith */11]("/", Rebase.List[/* fromArray */12](Path.join(parsed.dir, parsed.base).split(Path.sep)));
        if (joined.charCodeAt(0) === 8234.0) {
          return Rebase.Option[/* some */11](joined.slice(1).trim());
        } else {
          return Rebase.Option[/* some */11](joined.trim());
        }
      })]);

var range_000 = (/^(.+):(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+))$/);

function range_001(captured) {
  var srcFile = Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 1));
  var sameRow = Rebase.Option[/* isSome */13](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 6)));
  if (sameRow) {
    return Rebase.Option[/* flatMap */5]((function (row) {
                  return Rebase.Option[/* flatMap */5]((function (colStart) {
                                return Rebase.Option[/* flatMap */5]((function (colEnd) {
                                              return /* Range */Block.simpleVariant("Range", [
                                                        srcFile,
                                                        /* :: */Block.simpleVariant("::", [
                                                            /* record */Block.record([
                                                                "start",
                                                                "end_"
                                                              ], [
                                                                Block.record([
                                                                    "pos",
                                                                    "line",
                                                                    "col"
                                                                  ], [
                                                                    undefined,
                                                                    Caml_format.caml_int_of_string(row),
                                                                    Caml_format.caml_int_of_string(colStart)
                                                                  ]),
                                                                Block.record([
                                                                    "pos",
                                                                    "line",
                                                                    "col"
                                                                  ], [
                                                                    undefined,
                                                                    Caml_format.caml_int_of_string(row),
                                                                    Caml_format.caml_int_of_string(colEnd)
                                                                  ])
                                                              ]),
                                                            /* [] */0
                                                          ])
                                                      ]);
                                            }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 8)));
                              }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 7)));
                }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 6)));
  } else {
    return Rebase.Option[/* flatMap */5]((function (rowStart) {
                  return Rebase.Option[/* flatMap */5]((function (colStart) {
                                return Rebase.Option[/* flatMap */5]((function (rowEnd) {
                                              return Rebase.Option[/* flatMap */5]((function (colEnd) {
                                                            return /* Range */Block.simpleVariant("Range", [
                                                                      srcFile,
                                                                      /* :: */Block.simpleVariant("::", [
                                                                          /* record */Block.record([
                                                                              "start",
                                                                              "end_"
                                                                            ], [
                                                                              Block.record([
                                                                                  "pos",
                                                                                  "line",
                                                                                  "col"
                                                                                ], [
                                                                                  undefined,
                                                                                  Caml_format.caml_int_of_string(rowStart),
                                                                                  Caml_format.caml_int_of_string(colStart)
                                                                                ]),
                                                                              Block.record([
                                                                                  "pos",
                                                                                  "line",
                                                                                  "col"
                                                                                ], [
                                                                                  undefined,
                                                                                  Caml_format.caml_int_of_string(rowEnd),
                                                                                  Caml_format.caml_int_of_string(colEnd)
                                                                                ])
                                                                            ]),
                                                                          /* [] */0
                                                                        ])
                                                                    ]);
                                                          }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 5)));
                                            }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 4)));
                              }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 3)));
                }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 2)));
  }
}

var range = /* Regex */Block.variant("Regex", 0, [
    range_000,
    range_001
  ]);

var expr = /* String */Block.variant("String", 1, [(function (raw) {
        var tokens = Rebase.$$String[/* trim */8](raw).split((/(\?\d+)|(\_\d+[^\}\)\s]*)/));
        return Rebase.Option[/* some */11](Rebase.$$Array[/* mapi */27]((function (token, i) {
                          var match = i % 3;
                          if (match !== 1) {
                            if (match !== 2) {
                              return /* Plain */Block.variant("Plain", 0, [token]);
                            } else {
                              return /* Underscore */Block.variant("Underscore", 2, [token]);
                            }
                          } else {
                            return /* QuestionMark */Block.variant("QuestionMark", 1, [token]);
                          }
                        }), tokens));
      })]);

var ofType_000 = (/^([^\:]*) \: ((?:\n|.)+)/);

function ofType_001(captured) {
  return Rebase.Option[/* flatMap */5]((function (type_) {
                return Rebase.Option[/* flatMap */5]((function (term) {
                              return /* OfType */Block.variant("OfType", 0, [
                                        term,
                                        type_
                                      ]);
                            }), Util$AgdaMode.Parser[/* at */3](1, expr, captured));
              }), Util$AgdaMode.Parser[/* at */3](2, expr, captured));
}

var ofType = /* Regex */Block.variant("Regex", 0, [
    ofType_000,
    ofType_001
  ]);

var justType_000 = (/^Type ((?:\n|.)+)/);

function justType_001(captured) {
  return Rebase.Option[/* map */0]((function (type_) {
                return /* JustType */Block.variant("JustType", 1, [type_]);
              }), Util$AgdaMode.Parser[/* at */3](1, expr, captured));
}

var justType = /* Regex */Block.variant("Regex", 0, [
    justType_000,
    justType_001
  ]);

var justSort_000 = (/^Sort ((?:\n|.)+)/);

function justSort_001(captured) {
  return Rebase.Option[/* map */0]((function (sort) {
                return /* JustSort */Block.variant("JustSort", 2, [sort]);
              }), Util$AgdaMode.Parser[/* at */3](1, expr, captured));
}

var justSort = /* Regex */Block.variant("Regex", 0, [
    justSort_000,
    justSort_001
  ]);

var others = /* String */Block.variant("String", 1, [(function (raw) {
        return Rebase.Option[/* map */0]((function (raw$prime) {
                      return /* Others */Block.variant("Others", 3, [raw$prime]);
                    }), Util$AgdaMode.Parser[/* parse */1](expr, raw));
      })]);

var OutputConstraint = /* module */Block.localModule([
    "ofType",
    "justType",
    "justSort",
    "others"
  ], [
    ofType,
    justType,
    justSort,
    others
  ]);

var outputConstraint = Util$AgdaMode.Parser[/* choice */4](/* array */[
      ofType,
      justType,
      justSort,
      others
    ]);

var outputWithoutRange = /* String */Block.variant("String", 1, [(function (raw) {
        return Rebase.Option[/* map */0]((function (x) {
                      return /* Output */Block.simpleVariant("Output", [
                                x,
                                undefined
                              ]);
                    }), Util$AgdaMode.Parser[/* parse */1](outputConstraint, raw));
      })]);

var outputWithRange_000 = (/((?:\n|.)*\S+)\s*\[ at (.+):(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+)) \]/);

function outputWithRange_001(captured) {
  return Rebase.Option[/* flatMap */5]((function (raw) {
                var rowStart = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 7)), Rebase.$$Array[/* get */17](captured, 3))));
                var rowEnd = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 7)), Rebase.$$Array[/* get */17](captured, 5))));
                var colStart = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 8)), Rebase.$$Array[/* get */17](captured, 4))));
                var colEnd = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 9)), Rebase.$$Array[/* get */17](captured, 6))));
                var start = /* record */Block.record([
                    "pos",
                    "line",
                    "col"
                  ], [
                    undefined,
                    rowStart,
                    colStart
                  ]);
                var end_ = /* record */Block.record([
                    "pos",
                    "line",
                    "col"
                  ], [
                    undefined,
                    rowEnd,
                    colEnd
                  ]);
                return Rebase.Option[/* map */0]((function (parsed) {
                              var path = Util$AgdaMode.Parser[/* at */3](2, filepath, captured);
                              return /* Output */Block.simpleVariant("Output", [
                                        parsed,
                                        /* Range */Block.simpleVariant("Range", [
                                            path,
                                            /* :: */Block.simpleVariant("::", [
                                                /* record */Block.record([
                                                    "start",
                                                    "end_"
                                                  ], [
                                                    start,
                                                    end_
                                                  ]),
                                                /* [] */0
                                              ])
                                          ])
                                      ]);
                            }), Util$AgdaMode.Parser[/* parse */1](outputConstraint, raw));
              }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 1)));
}

var outputWithRange = /* Regex */Block.variant("Regex", 0, [
    outputWithRange_000,
    outputWithRange_001
  ]);

var Output = /* module */Block.localModule([
    "outputWithoutRange",
    "outputWithRange"
  ], [
    outputWithoutRange,
    outputWithRange
  ]);

var output = /* String */Block.variant("String", 1, [(function (raw) {
        var rangeRe = (/\[ at (.+):(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+)) \]$/);
        var hasRange = rangeRe.test(raw);
        if (hasRange) {
          return Util$AgdaMode.Parser[/* parse */1](outputWithRange, raw);
        } else {
          return Util$AgdaMode.Parser[/* parse */1](outputWithoutRange, raw);
        }
      })]);

var partial_arg = Util$AgdaMode.Dict[/* split */1];

function partiteMetas(param) {
  return partial_arg("metas", (function (rawMetas) {
                var metas = unindent(rawMetas);
                var indexOfHiddenMetas = Rebase.Option[/* map */0]((function (prim) {
                        return prim[0];
                      }), Rebase.$$Array[/* findIndex */29]((function (s) {
                            return Rebase.Option[/* isSome */13](Util$AgdaMode.Parser[/* parse */1](outputWithRange, s));
                          }), metas));
                return Util$AgdaMode.Dict[/* partite */0]((function (param) {
                              var i = param[1];
                              if (indexOfHiddenMetas !== undefined) {
                                if (i === indexOfHiddenMetas) {
                                  return "hiddenMetas";
                                } else if (i === 0) {
                                  return "interactionMetas";
                                } else {
                                  return undefined;
                                }
                              } else if (i === 0) {
                                return "interactionMetas";
                              } else {
                                return undefined;
                              }
                            }), metas);
              }), param);
}

function allGoalsWarnings(title, body) {
  var partiteAllGoalsWarnings = function (title, body) {
    var lines = body.split("\n");
    var hasMetas = Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(title.match((/Goals/))));
    var hasWarnings = Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(title.match((/Warnings/))));
    var hasErrors = Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(title.match((/Errors/))));
    var markMetas = function (param) {
      var match = hasMetas && param[1] === 0;
      if (match) {
        return "metas";
      }
      
    };
    var markWarnings = function (param) {
      if (hasWarnings) {
        if (hasMetas) {
          return Rebase.Option[/* map */0]((function () {
                        return "warnings";
                      }), Js_primitive.null_to_opt(param[0].slice(5, 13).match((/Warnings/))));
        } else {
          var match = param[1] === 0;
          if (match) {
            return "warnings";
          } else {
            return undefined;
          }
        }
      }
      
    };
    var markErrors = function (param) {
      if (hasErrors) {
        var match = hasMetas || hasWarnings;
        if (match) {
          return Rebase.Option[/* map */0]((function () {
                        return "errors";
                      }), Js_primitive.null_to_opt(param[0].slice(5, 11).match((/Errors/))));
        } else {
          var match$1 = param[1] === 0;
          if (match$1) {
            return "errors";
          } else {
            return undefined;
          }
        }
      }
      
    };
    return Util$AgdaMode.Dict[/* partite */0]((function (line) {
                  return Rebase.Option[/* or_ */15](Rebase.Option[/* or_ */15](markMetas(line), markWarnings(line)), markErrors(line));
                }), lines);
  };
  var partiteWarningsOrErrors = function (key) {
    var partial_arg = Util$AgdaMode.Dict[/* update */2];
    return (function (param) {
        return partial_arg(key, (function (raw) {
                      var lines = raw.slice(1);
                      var markWarningStart = function (line) {
                        return Rebase.Option[/* isSome */13](Util$AgdaMode.Parser[/* parse */1](range, line));
                      };
                      return Rebase.$$Array[/* map */0]((function (xs) {
                                    return Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](xs));
                                  }), Util$AgdaMode.Array_[/* partite */1](markWarningStart, lines));
                    }), param);
      });
  };
  var dictionary = partiteWarningsOrErrors("errors")(partiteWarningsOrErrors("warnings")(partiteMetas(partiteAllGoalsWarnings(title, body))));
  var interactionMetas = Rebase.Option[/* mapOr */18]((function (metas) {
          return Util$AgdaMode.Parser[/* parseArray */2](outputWithoutRange, metas);
        }), /* array */[], Js_primitive.undefined_to_opt(dictionary["interactionMetas"]));
  var hiddenMetas = Rebase.Option[/* mapOr */18]((function (metas) {
          return Util$AgdaMode.Parser[/* parseArray */2](outputWithRange, metas);
        }), /* array */[], Js_primitive.undefined_to_opt(dictionary["hiddenMetas"]));
  var warnings = Rebase.Option[/* getOr */16](/* array */[], Js_primitive.undefined_to_opt(dictionary["warnings"]));
  var errors = Rebase.Option[/* getOr */16](/* array */[], Js_primitive.undefined_to_opt(dictionary["errors"]));
  return /* record */Block.record([
            "interactionMetas",
            "hiddenMetas",
            "warnings",
            "errors"
          ], [
            interactionMetas,
            hiddenMetas,
            warnings,
            errors
          ]);
}

function goalTypeContext(raw) {
  var markGoal = function (param) {
    return Rebase.Option[/* map */0]((function () {
                  return "goal";
                }), Js_primitive.null_to_opt(param[0].match((/^Goal:/))));
  };
  var markHave = function (param) {
    return Rebase.Option[/* map */0]((function () {
                  return "have";
                }), Js_primitive.null_to_opt(param[0].match((/^Have:/))));
  };
  var markMetas = function (param) {
    return Rebase.Option[/* map */0]((function () {
                  return "metas";
                }), Js_primitive.null_to_opt(param[0].match((/\u2014{60}/g))));
  };
  var partial_arg = Util$AgdaMode.Dict[/* partite */0];
  var partiteGoalTypeContext = function (param) {
    return partial_arg((function (line) {
                  return Rebase.Option[/* or_ */15](Rebase.Option[/* or_ */15](markGoal(line), markHave(line)), markMetas(line));
                }), param);
  };
  var partial_arg$1 = Util$AgdaMode.Dict[/* update */2];
  var removeDelimeter = function (param) {
    return partial_arg$1("metas", (function (param) {
                  return param.slice(1);
                }), param);
  };
  var lines = raw.split("\n");
  var dictionary = partiteMetas(Curry._1(removeDelimeter, Curry._1(partiteGoalTypeContext, lines)));
  var goal = Rebase.Option[/* map */0]((function (x) {
          return /* Goal */Block.simpleVariant("Goal", [x]);
        }), Rebase.Option[/* flatMap */5]((function (line) {
              return Util$AgdaMode.Parser[/* parse */1](expr, Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](line)).slice(5));
            }), Js_primitive.undefined_to_opt(dictionary["goal"])));
  var have = Rebase.Option[/* map */0]((function (x) {
          return /* Have */Block.simpleVariant("Have", [x]);
        }), Rebase.Option[/* flatMap */5]((function (line) {
              return Util$AgdaMode.Parser[/* parse */1](expr, Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](line)).slice(5));
            }), Js_primitive.undefined_to_opt(dictionary["have"])));
  var interactionMetas = Rebase.Option[/* mapOr */18]((function (metas) {
          return Util$AgdaMode.Parser[/* parseArray */2](outputWithoutRange, metas);
        }), /* array */[], Js_primitive.undefined_to_opt(dictionary["interactionMetas"]));
  var hiddenMetas = Rebase.Option[/* mapOr */18]((function (metas) {
          return Util$AgdaMode.Parser[/* parseArray */2](outputWithRange, metas);
        }), /* array */[], Js_primitive.undefined_to_opt(dictionary["hiddenMetas"]));
  return /* record */Block.record([
            "goal",
            "have",
            "interactionMetas",
            "hiddenMetas"
          ], [
            goal,
            have,
            interactionMetas,
            hiddenMetas
          ]);
}

function constraints(raw) {
  var shitpile = unindent(raw.split("\n"));
  return Util$AgdaMode.Parser[/* parseArray */2](output, shitpile);
}

function body(raw) {
  var match = raw.kind;
  var kind;
  switch (match) {
    case "AllGoalsWarnings" : 
        kind = /* AllGoalsWarnings */0;
        break;
    case "GoalTypeContext" : 
        kind = /* GoalTypeContext */1;
        break;
    default:
      kind = /* PlainText */3;
  }
  return /* record */Block.record([
            "kind",
            "header",
            "body"
          ], [
            kind,
            raw.header,
            raw.body
          ]);
}

exports.unindent = unindent;
exports.filepath = filepath;
exports.range = range;
exports.expr = expr;
exports.OutputConstraint = OutputConstraint;
exports.outputConstraint = outputConstraint;
exports.Output = Output;
exports.output = output;
exports.partiteMetas = partiteMetas;
exports.allGoalsWarnings = allGoalsWarnings;
exports.goalTypeContext = goalTypeContext;
exports.constraints = constraints;
exports.body = body;
/* range Not a pure module */
