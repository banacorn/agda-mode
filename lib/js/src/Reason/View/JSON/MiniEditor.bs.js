// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function setRef(theRef, param) {
  param[/* state */1][/* ref */1][0] = (theRef == null) ? undefined : Js_primitive.some(theRef);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("MiniEditor");

function make($staropt$star, $staropt$star$1, hidden, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, _) {
  var value = $staropt$star !== undefined ? $staropt$star : "";
  var placeholder = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var onConfirm = $staropt$star$2 !== undefined ? $staropt$star$2 : (function () {
        return /* () */0;
      });
  var onCancel = $staropt$star$3 !== undefined ? $staropt$star$3 : (function () {
        return /* () */0;
      });
  var onFocus = $staropt$star$4 !== undefined ? $staropt$star$4 : (function () {
        return /* () */0;
      });
  var onBlur = $staropt$star$5 !== undefined ? $staropt$star$5 : (function () {
        return /* () */0;
      });
  var grammar = $staropt$star$6 !== undefined ? $staropt$star$6 : "";
  var observeFocus = function (self, r) {
    var observer = new MutationObserver((function (mutations) {
            var focusedNow = $$Array.of_list(List.filter((function (m) {
                            return m.attributeName === "class";
                          }))($$Array.to_list(mutations))).every((function () {
                    return r.className.includes("is-focused");
                  }));
            if (focusedNow) {
              Curry._1(self[/* send */3], /* Focus */0);
              return Curry._1(onFocus, /* () */0);
            } else {
              Curry._1(self[/* send */3], /* Blur */1);
              return Curry._1(onBlur, /* () */0);
            }
          }));
    var config = {
      attributes: true,
      childList: false,
      subtree: false
    };
    observer.observe(r, config);
    return Curry._1(self[/* onUnmount */4], (function () {
                  return observer.disconnect();
                }));
  };
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                var match = self[/* state */1][/* ref */1][0];
                if (match !== undefined) {
                  var r = Js_primitive.valFromOption(match);
                  if (grammar === "agda") {
                    var agdaGrammar = atom.grammars.grammarForScopeName("source.agda");
                    try {
                      r.getModel().setGrammar(agdaGrammar);
                    }
                    catch (exn){
                      
                    }
                  }
                  atom.commands.add(r, "core:confirm", (function () {
                          return Curry._1(onConfirm, r.getModel().getText());
                        }));
                  atom.commands.add(r, "core:cancel", (function () {
                          return Curry._1(onCancel, /* () */0);
                        }));
                  observeFocus(self, r);
                  r.getModel().setText(value);
                  return r.getModel().setPlaceholderText(placeholder);
                } else {
                  return /* () */0;
                }
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var className = hidden ? $$String.concat(" ", /* :: */Block.simpleVariant("::", [
                          "mini-editor",
                          /* :: */Block.simpleVariant("::", [
                              "hidden",
                              /* [] */0
                            ])
                        ])) : $$String.concat(" ", /* :: */Block.simpleVariant("::", [
                          "mini-editor",
                          /* [] */0
                        ]));
                return React.createElement("atom-text-editor", {
                            class: className,
                            mini: "true",
                            ref: Curry._1(self[/* handle */0], setRef)
                          });
              }),
            (function () {
                return /* record */Block.record([
                          "focused",
                          "ref"
                        ], [
                          false,
                          Block.record(["contents"], [undefined])
                        ]);
              }),
            component[/* retainedProps */11],
            (function (action, state) {
                if (action) {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "focused",
                                "ref"
                              ], [
                                false,
                                state[/* ref */1]
                              ])]);
                } else {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "focused",
                                "ref"
                              ], [
                                true,
                                state[/* ref */1]
                              ])]);
                }
              }),
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.value, jsProps.placeholder, jsProps.hidden, jsProps.onConfirm, jsProps.onCancel, jsProps.onFocus, jsProps.onBlur, jsProps.grammar, /* array */[]);
      }));

exports.setRef = setRef;
exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
