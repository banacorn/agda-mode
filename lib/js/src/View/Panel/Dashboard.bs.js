// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaMode = require("../../Util/Util.bs.js");

function Dashboard(Props) {
  var header = Props.header;
  var hidden = Props.hidden;
  var isPending = Props.isPending;
  var mountingPoint = Props.mountingPoint;
  var settingsActivated = Props.settingsActivated;
  var onMountingTargetChange = Props.onMountingTargetChange;
  var onSettingsViewToggle = Props.onSettingsViewToggle;
  var settingsButtonRef = React.useRef(null);
  var dockingButtonRef = React.useRef(null);
  React.useEffect((function () {
          return Rebase.$$Option.flatMap((function (settingsButton) {
                        var disposable = atom.tooltips.add(atom.views.getView(settingsButton), {
                              title: "settings",
                              delay: {
                                show: 100,
                                hide: 1000
                              }
                            });
                        return (function (param) {
                                  disposable.dispose();
                                  return /* () */0;
                                });
                      }), Caml_option.nullable_to_opt(settingsButtonRef.current));
        }), []);
  React.useEffect((function () {
          return Rebase.$$Option.flatMap((function (dockingButton) {
                        var disposable = atom.tooltips.add(atom.views.getView(dockingButton), {
                              title: "toggle panel docking position",
                              delay: {
                                show: 300,
                                hide: 1000
                              },
                              keyBindingCommand: "agda-mode:toggle-docking"
                            });
                        return (function (param) {
                                  disposable.dispose();
                                  return /* () */0;
                                });
                      }), Caml_option.nullable_to_opt(dockingButtonRef.current));
        }), []);
  var match = header.style;
  var headerClassList;
  switch (match) {
    case /* PlainText */0 :
        headerClassList = "";
        break;
    case /* Error */1 :
        headerClassList = "text-error";
        break;
    case /* Info */2 :
        headerClassList = "text-info";
        break;
    case /* Success */3 :
        headerClassList = "text-success";
        break;
    case /* Warning */4 :
        headerClassList = "text-warning";
        break;
    
  }
  var spinnerClassList = "loading loading-spinner-tiny inline-block" + Util$AgdaMode.React.when_(isPending, "pending");
  var settingsViewClassList = "no-btn" + Util$AgdaMode.React.when_(settingsActivated, "activated");
  var tmp;
  tmp = mountingPoint.tag ? true : false;
  var toggleMountingPosition = "no-btn" + Util$AgdaMode.React.when_(tmp, "activated");
  return React.createElement("div", {
              className: "agda-header" + Util$AgdaMode.React.showWhen(!hidden)
            }, React.createElement("h1", {
                  className: headerClassList
                }, header.text), React.createElement("ul", {
                  className: "agda-dashboard"
                }, React.createElement("li", undefined, React.createElement("span", {
                          className: spinnerClassList,
                          id: "spinner"
                        })), React.createElement("li", undefined, React.createElement("button", {
                          ref: settingsButtonRef,
                          className: settingsViewClassList,
                          id: "agda-dashboard-settings",
                          onClick: (function (param) {
                              return Curry._1(onSettingsViewToggle, !settingsActivated);
                            })
                        }, React.createElement("span", {
                              className: "icon icon-settings"
                            }))), React.createElement("li", undefined, React.createElement("button", {
                          ref: dockingButtonRef,
                          className: toggleMountingPosition,
                          onClick: (function (param) {
                              if (mountingPoint.tag) {
                                return Curry._1(onMountingTargetChange, /* AtBottom */0);
                              } else {
                                return Curry._1(onMountingTargetChange, /* AtPane */1);
                              }
                            })
                        }, React.createElement("span", {
                              className: "icon icon-versions"
                            })))));
}

var make = Dashboard;

exports.make = make;
/* react Not a pure module */
