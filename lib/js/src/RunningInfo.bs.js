// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(param) {
  return {
          editor: undefined,
          isOpeningEditor: false,
          buffer: /* [] */0,
          subscriptions: new Atom.CompositeDisposable()
        };
}

var itemOptions = {
  initialLine: 0,
  initialColumn: 0,
  split: "right",
  activatePane: false,
  activateItem: false,
  pending: false,
  searchAllPanes: true,
  location: undefined
};

function destroy(self) {
  self.editor = undefined;
  self.isOpeningEditor = false;
  self.buffer = /* [] */0;
  self.subscriptions.dispose();
  return /* () */0;
}

function add(info, self) {
  var match = self.editor;
  if (match !== undefined) {
    Caml_option.valFromOption(match).insertText(info);
    return $$Promise.resolved(/* () */0);
  } else if (self.isOpeningEditor) {
    self.buffer = /* :: */Caml_chrome_debugger.simpleVariant("::", [
        info,
        self.buffer
      ]);
    return $$Promise.resolved(/* () */0);
  } else {
    self.isOpeningEditor = true;
    var promise = $$Promise.Js.toResult($$Promise.Js.fromBsPromise(atom.workspace.open("agda-mode://running-info", itemOptions)));
    return $$Promise.map(promise, (function (param) {
                  if (param.tag) {
                    return /* () */0;
                  } else {
                    var newItem = param[0];
                    self.isOpeningEditor = false;
                    self.editor = Caml_option.some(newItem);
                    newItem.insertText(Rebase.$$String.join(self.buffer));
                    self.buffer = /* [] */0;
                    self.subscriptions.add(newItem.onDidDestroy((function (param) {
                                return destroy(self);
                              })));
                    return /* () */0;
                  }
                }));
  }
}

exports.make = make;
exports.itemOptions = itemOptions;
exports.destroy = destroy;
exports.add = add;
/* atom Not a pure module */
