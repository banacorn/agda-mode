// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Util$AgdaMode = require("../Util/Util.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function decode(param) {
  return Json_decode.andThen((function (tup, param) {
                return /* record */Caml_chrome_debugger.record([
                          "pos",
                          "line",
                          "col"
                        ], [
                          Rebase.$$Array.get(tup, 2),
                          Rebase.$$Option.getOr(0, Rebase.$$Array.get(tup, 0)),
                          Rebase.$$Option.getOr(0, Rebase.$$Array.get(tup, 1))
                        ]);
              }), (function (param) {
                return Json_decode.array(Json_decode.$$int, param);
              }), param);
}

var Position = {
  decode: decode
};

function fuse(a, b) {
  var start = Caml_obj.caml_greaterthan(a[/* start */0][/* pos */0], b[/* start */0][/* pos */0]) ? b[/* start */0] : a[/* start */0];
  var end_ = Caml_obj.caml_greaterthan(a[/* end_ */1][/* pos */0], b[/* end_ */1][/* pos */0]) ? a[/* end_ */1] : b[/* end_ */1];
  return /* record */Caml_chrome_debugger.record([
            "start",
            "end_"
          ], [
            start,
            end_
          ]);
}

function toString(self) {
  if (self[/* start */0][/* line */1] === self[/* end_ */1][/* line */1]) {
    return String(self[/* start */0][/* line */1]) + ("," + (String(self[/* start */0][/* col */2]) + ("-" + String(self[/* end_ */1][/* col */2]))));
  } else {
    return String(self[/* start */0][/* line */1]) + ("," + (String(self[/* start */0][/* col */2]) + ("-" + (String(self[/* end_ */1][/* line */1]) + ("," + String(self[/* end_ */1][/* col */2]))))));
  }
}

function toAtomRange(self) {
  var start = new Atom.Point(self[/* start */0][/* line */1] - 1 | 0, self[/* start */0][/* col */2] - 1 | 0);
  var end_ = new Atom.Point(self[/* end_ */1][/* line */1] - 1 | 0, self[/* end_ */1][/* col */2] - 1 | 0);
  return new Atom.Range(start, end_);
}

function decode$1(json) {
  return /* record */Caml_chrome_debugger.record([
            "start",
            "end_"
          ], [
            Json_decode.field("start", decode, json),
            Json_decode.field("end", decode, json)
          ]);
}

var Interval = {
  fuse: fuse,
  toString: toString,
  toAtomRange: toAtomRange,
  decode: decode$1
};

var partial_arg = (/^(\S+)\:(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+))$/);

function parse(param) {
  return Parser$AgdaMode.captures((function (captured) {
                var srcFile = Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 1));
                var sameRow = Rebase.$$Option.isSome(Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 6)));
                if (sameRow) {
                  return Rebase.$$Option.flatMap((function (row) {
                                return Rebase.$$Option.flatMap((function (colStart) {
                                              return Rebase.$$Option.flatMap((function (colEnd) {
                                                            return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                                                                      srcFile,
                                                                      /* array */[/* record */Caml_chrome_debugger.record([
                                                                            "start",
                                                                            "end_"
                                                                          ], [
                                                                            Caml_chrome_debugger.record([
                                                                                "pos",
                                                                                "line",
                                                                                "col"
                                                                              ], [
                                                                                undefined,
                                                                                row,
                                                                                colStart
                                                                              ]),
                                                                            Caml_chrome_debugger.record([
                                                                                "pos",
                                                                                "line",
                                                                                "col"
                                                                              ], [
                                                                                undefined,
                                                                                row,
                                                                                colEnd
                                                                              ])
                                                                          ])]
                                                                    ]);
                                                          }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 8))));
                                            }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 7))));
                              }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 6))));
                } else {
                  return Rebase.$$Option.flatMap((function (rowStart) {
                                return Rebase.$$Option.flatMap((function (colStart) {
                                              return Rebase.$$Option.flatMap((function (rowEnd) {
                                                            return Rebase.$$Option.flatMap((function (colEnd) {
                                                                          return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                                                                                    srcFile,
                                                                                    /* array */[/* record */Caml_chrome_debugger.record([
                                                                                          "start",
                                                                                          "end_"
                                                                                        ], [
                                                                                          Caml_chrome_debugger.record([
                                                                                              "pos",
                                                                                              "line",
                                                                                              "col"
                                                                                            ], [
                                                                                              undefined,
                                                                                              rowStart,
                                                                                              colStart
                                                                                            ]),
                                                                                          Caml_chrome_debugger.record([
                                                                                              "pos",
                                                                                              "line",
                                                                                              "col"
                                                                                            ], [
                                                                                              undefined,
                                                                                              rowEnd,
                                                                                              colEnd
                                                                                            ])
                                                                                        ])]
                                                                                  ]);
                                                                        }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 5))));
                                                          }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 4))));
                                            }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 3))));
                              }), Rebase.$$Option.flatMap(Parser$AgdaMode.$$int, Rebase.$$Option.flatten(Rebase.$$Array.get(captured, 2))));
                }
              }), partial_arg, param);
}

function fuse$1(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return Rebase.List.concat(Rebase.List.concat(l, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* record */Caml_chrome_debugger.record([
                          "start",
                          "end_"
                        ], [
                          e[/* start */0],
                          s[/* end_ */1]
                        ]),
                      /* [] */0
                    ])), r);
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$prime = Util$AgdaMode.List_.dropWhile((function (x) {
            return Caml_obj.caml_lessequal(x[/* end_ */1][/* pos */0], s2[/* end_ */1][/* pos */0]);
          }), r1);
    return helpFuse(r1$prime, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  fuse(s1, s2),
                  r2
                ]));
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaMode.List_.span((function (s) {
            return Caml_obj.caml_lessthan(s[/* end_ */1][/* pos */0], s2[/* start */0][/* pos */0]);
          }), r1);
    return Rebase.List.concat(Rebase.List.concat(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      s1,
                      /* [] */0
                    ]), match[0]), helpFuse(match[1], is2));
  };
  var helpFuse = function (a, b) {
    var match = Rebase.List.reverse(a);
    var match$1 = Rebase.List.reverse(b);
    if (a) {
      if (match) {
        if (b) {
          if (match$1) {
            var e2 = match$1[0];
            var r2 = b[1];
            var s2 = b[0];
            var e1 = match[0];
            var r1 = a[1];
            var s1 = a[0];
            if (Caml_obj.caml_lessthan(e1[/* end_ */1][/* pos */0], s2[/* start */0][/* pos */0])) {
              return Rebase.List.concat(a, b);
            } else if (Caml_obj.caml_lessthan(e2[/* end_ */1][/* pos */0], s1[/* start */0][/* pos */0])) {
              return Rebase.List.concat(b, a);
            } else if (e1[/* end_ */1][/* pos */0] === s2[/* start */0][/* pos */0]) {
              return mergeTouching(match[1], e1, s2, r2);
            } else if (e2[/* end_ */1][/* pos */0] === s1[/* start */0][/* pos */0]) {
              return mergeTouching(match$1[1], e2, s1, r1);
            } else if (Caml_obj.caml_lessthan(s1[/* end_ */1][/* pos */0], s2[/* start */0][/* pos */0])) {
              return outputLeftPrefix(s1, r1, s2, b);
            } else if (Caml_obj.caml_lessthan(s2[/* end_ */1][/* pos */0], s1[/* start */0][/* pos */0])) {
              return outputLeftPrefix(s2, r2, s1, a);
            } else if (Caml_obj.caml_lessthan(s1[/* end_ */1][/* pos */0], s2[/* end_ */1][/* pos */0])) {
              return fuseSome(s1, r1, s2, r2);
            } else {
              return fuseSome(s2, r2, s1, r1);
            }
          } else {
            return Pervasives.failwith("something wrong with Range::fuse");
          }
        } else if (b) {
          return Pervasives.failwith("something wrong with Range::fuse");
        } else {
          return b;
        }
      } else if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    } else {
      return a;
    }
  };
  if (a) {
    if (b) {
      return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                a[0],
                Rebase.$$Array.fromList(helpFuse(Rebase.List.fromArray(a[1]), Rebase.List.fromArray(b[1])))
              ]);
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function toString$1(self) {
  if (self) {
    var match = self[0];
    if (match !== undefined) {
      var xs = self[1];
      var filepath = match;
      if (xs.length !== 0) {
        var match$1 = Rebase.$$Array.get(xs, 0);
        var match$2 = Rebase.$$Array.get(xs, Rebase.$$Array.length(xs) - 1 | 0);
        return filepath + (":" + (
                  match$1 !== undefined && match$2 !== undefined ? toString(/* record */Caml_chrome_debugger.record([
                            "start",
                            "end_"
                          ], [
                            match$1[/* start */0],
                            match$2[/* end_ */1]
                          ])) : ""
                ));
      } else {
        return filepath;
      }
    } else {
      var xs$1 = self[1];
      var match$3 = Rebase.$$Array.get(xs$1, 0);
      var match$4 = Rebase.$$Array.get(xs$1, Rebase.$$Array.length(xs$1) - 1 | 0);
      if (match$3 !== undefined && match$4 !== undefined) {
        return toString(/* record */Caml_chrome_debugger.record([
                      "start",
                      "end_"
                    ], [
                      match$3[/* start */0],
                      match$4[/* end_ */1]
                    ]));
      } else {
        return "";
      }
    }
  } else {
    return "";
  }
}

function toAtomRanges(self) {
  if (self) {
    return Rebase.$$Array.map(toAtomRange, self[1]);
  } else {
    return /* array */[];
  }
}

function decode$2(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "NoRange" :
                      return /* NoRange */0;
                  case "Range" :
                      return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                                Json_decode.field("source", (function (param) {
                                        return Json_decode.optional(Json_decode.string, param);
                                      }), json),
                                Json_decode.field("intervals", (function (param) {
                                        return Json_decode.array(decode$1, param);
                                      }), json)
                              ]);
                  default:
                    return Pervasives.failwith("unknown kind of Range");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

var $$Range = {
  parse: parse,
  fuse: fuse$1,
  toString: toString$1,
  toAtomRanges: toAtomRanges,
  decode: decode$2
};

exports.Position = Position;
exports.Interval = Interval;
exports.$$Range = $$Range;
/* partial_arg Not a pure module */
