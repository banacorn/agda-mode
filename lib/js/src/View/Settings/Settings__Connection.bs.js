// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Async$AgdaMode = require("../../Util/Async.bs.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Connection$AgdaMode = require("../../Connection.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var Settings__Connection__Error$AgdaMode = require("./Settings__Connection__Error.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "connected",
            "editorRef",
            "editorModel",
            "autoSearch"
          ], [
            false,
            Block.record(["contents"], [undefined]),
            Block.record(["contents"], [MiniEditor$AgdaMode.Model[/* make */0](/* () */0)]),
            undefined
          ]);
}

function reducer(onInquireConnection, action, state) {
  if (typeof action === "number") {
    return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                  return Async$AgdaMode.finalError((function (err) {
                                return Curry._1(self[/* send */3], /* UpdateError */Block.variant("UpdateError", 0, [/* AutoSearchError */Block.variant("AutoSearchError", 0, [err])]));
                              }), Async$AgdaMode.thenOk((function (path) {
                                      var match = self[/* state */1][/* editorRef */1][0];
                                      return Async$AgdaMode.resolve(match !== undefined ? (Caml_option.valFromOption(match).setText(path), /* () */0) : /* () */0);
                                    }))(Connection$AgdaMode.autoSearch("agda")));
                })]);
  } else if (action.tag) {
    var path = action[0];
    return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
              /* record */Block.record([
                  "connected",
                  "editorRef",
                  "editorModel",
                  "autoSearch"
                ], [
                  state[/* connected */0],
                  state[/* editorRef */1],
                  state[/* editorModel */2],
                  undefined
                ]),
              (function (param) {
                  return Event$AgdaMode.emitOk(path, onInquireConnection);
                })
            ]);
  } else {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "connected",
                  "editorRef",
                  "editorModel",
                  "autoSearch"
                ], [
                  state[/* connected */0],
                  state[/* editorRef */1],
                  state[/* editorModel */2],
                  action[0]
                ])]);
  }
}

var component = ReasonReact.reducerComponent("Connection");

function setEditorRef(theRef, param) {
  param[/* state */1][/* editorRef */1][0] = Caml_option.some(theRef);
  return /* () */0;
}

function make(inquireConnection, onInquireConnection, connection, error, hidden, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.pipe(onInquireConnection, self[/* state */1][/* editorModel */2][0][/* result */3]));
                return Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                                    return Rebase.$$Option[/* forEach */8]((function (editor) {
                                                  atom.views.getView(editor).focus();
                                                  editor.selectAll();
                                                  return /* () */0;
                                                }), self[/* state */1][/* editorRef */1][0]);
                                  }))(inquireConnection));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var connected = Rebase.$$Option[/* isSome */13](connection);
                var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("inquiring", !connected, Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* :: */Block.simpleVariant("::", [
                                "agda-settings-connection",
                                /* [] */0
                              ]))));
                var status = connected ? React.createElement("span", {
                        className: "icon icon-primitive-dot text-success",
                        id: "connection-status",
                        title: "connected"
                      }) : React.createElement("span", {
                        className: "icon icon-primitive-dot text-error",
                        id: "connection-status",
                        title: "disconnected"
                      });
                var tmp;
                if (connection !== undefined) {
                  var conn = connection;
                  var match = conn[/* metadata */0][/* protocol */3];
                  tmp = React.createElement(React.Fragment, undefined, React.createElement("p", undefined, "Path: " + conn[/* metadata */0][/* path */0]), React.createElement("p", undefined, "Version: " + conn[/* metadata */0][/* version */2]), React.createElement("p", undefined, "Supported protocol: " + (
                            match ? "Emacs / JSON" : "Emacs"
                          )));
                } else {
                  tmp = React.createElement(React.Fragment, undefined, React.createElement("p", undefined, "connection not established"));
                }
                var match$1 = self[/* state */1][/* autoSearch */3];
                return React.createElement("section", {
                            className: className
                          }, React.createElement("h1", undefined, React.createElement("span", {
                                    className: "icon icon-plug"
                                  }), React.createElement("span", undefined, "Connection to Agda"), status), React.createElement("hr", undefined), React.createElement("h2", undefined, "Status"), tmp, React.createElement("hr", undefined), React.createElement("h2", undefined, "Path"), React.createElement("p", undefined, ReasonReact.element(undefined, undefined, MiniEditor$AgdaMode.make(connection !== undefined ? connection[/* metadata */0][/* path */0] : "", "path to Agda", false, undefined, (function (result) {
                                          return Curry._1(self[/* send */3], /* Connect */Block.variant("Connect", 1, [result]));
                                        }), Caml_option.some((function () {
                                              return /* () */0;
                                            })), undefined, undefined, Curry._1(self[/* handle */0], setEditorRef), /* array */[]))), React.createElement("p", undefined, React.createElement("button", {
                                    className: "btn icon icon-search inline-block-tight",
                                    onClick: (function (param) {
                                        return Curry._1(self[/* send */3], /* AutoSearch */0);
                                      })
                                  }, "auto search")), match$1 !== undefined ? ReasonReact.element(undefined, undefined, Settings__Connection__Error$AgdaMode.make(match$1, /* array */[])) : (
                              error !== undefined ? ReasonReact.element(undefined, undefined, Settings__Connection__Error$AgdaMode.make(error, /* array */[])) : null
                            ));
              }),
            initialState,
            component[/* retainedProps */11],
            (function (param, param$1) {
                return reducer(onInquireConnection, param, param$1);
              }),
            component[/* jsElementWrapped */13]
          ]);
}

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.setEditorRef = setEditorRef;
exports.make = make;
/* component Not a pure module */
