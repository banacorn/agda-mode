// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Util$AgdaMode = require("./Util/Util.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Highlighting$AgdaMode = require("./Highlighting.bs.js");
var Emacs__AllGoalsWarnings$AgdaMode = require("./View/Emacs/Emacs__AllGoalsWarnings.bs.js");

function toString(warnings) {
  if (typeof warnings === "number") {
    return "CompilationOk";
  }
  switch (warnings.TAG | 0) {
    case /* Constraints */0 :
        var string = warnings._0;
        if (string !== undefined) {
          return "Constraints " + string;
        } else {
          return "Constraints";
        }
    case /* AllGoalsWarnings */1 :
        return "AllGoalsWarnings " + Emacs__AllGoalsWarnings$AgdaMode.toString(warnings._0);
    case /* Time */2 :
        return "Time " + warnings._0;
    case /* Error */3 :
        return "Error " + warnings._0;
    case /* Intro */4 :
        return "Intro " + warnings._0;
    case /* Auto */5 :
        return "Auto " + warnings._0;
    case /* ModuleContents */6 :
        return "ModuleContents " + warnings._0;
    case /* SearchAbout */7 :
        return "SearchAbout " + warnings._0;
    case /* WhyInScope */8 :
        return "WhyInScope " + warnings._0;
    case /* NormalForm */9 :
        return "NormalForm " + warnings._0;
    case /* GoalType */10 :
        return "GoalType " + warnings._0;
    case /* CurrentGoal */11 :
        return "CurrentGoal " + warnings._0;
    case /* InferredType */12 :
        return "InferredType " + warnings._0;
    case /* Context */13 :
        return "Context " + warnings._0;
    case /* HelperFunction */14 :
        return "HelperFunction " + warnings._0;
    case /* Version */15 :
        return "Version " + warnings._0;
    
  }
}

function parse(xs) {
  var match = Belt_Array.get(xs, 1);
  if (match === undefined) {
    return ;
  }
  if (match.TAG) {
    return ;
  }
  var payload = match._0.replace(/\\r\\n|\\n/g, "\n");
  var match$1 = Belt_Array.get(xs, 0);
  if (match$1 === undefined) {
    return ;
  }
  if (match$1.TAG) {
    return ;
  }
  var title = match$1._0;
  switch (title) {
    case "*Agda Version*" :
        return {
                TAG: 15,
                _0: payload,
                [Symbol.for("name")]: "Version"
              };
    case "*Auto*" :
        return {
                TAG: 5,
                _0: payload,
                [Symbol.for("name")]: "Auto"
              };
    case "*Compilation result*" :
        return /* CompilationOk */0;
    case "*Constraints*" :
        if (payload === "nil") {
          return {
                  TAG: 0,
                  _0: undefined,
                  [Symbol.for("name")]: "Constraints"
                };
        } else {
          return {
                  TAG: 0,
                  _0: payload,
                  [Symbol.for("name")]: "Constraints"
                };
        }
    case "*Context*" :
        return {
                TAG: 13,
                _0: payload,
                [Symbol.for("name")]: "Context"
              };
    case "*Current Goal*" :
        return {
                TAG: 11,
                _0: payload,
                [Symbol.for("name")]: "CurrentGoal"
              };
    case "*Error*" :
        return {
                TAG: 3,
                _0: payload,
                [Symbol.for("name")]: "Error"
              };
    case "*Goal type etc.*" :
        return {
                TAG: 10,
                _0: payload,
                [Symbol.for("name")]: "GoalType"
              };
    case "*Helper function*" :
        return {
                TAG: 14,
                _0: payload,
                [Symbol.for("name")]: "HelperFunction"
              };
    case "*Inferred Type*" :
        return {
                TAG: 12,
                _0: payload,
                [Symbol.for("name")]: "InferredType"
              };
    case "*Intro*" :
        return {
                TAG: 4,
                _0: payload,
                [Symbol.for("name")]: "Intro"
              };
    case "*Module contents*" :
        return {
                TAG: 6,
                _0: payload,
                [Symbol.for("name")]: "ModuleContents"
              };
    case "*Normal Form*" :
        return {
                TAG: 9,
                _0: payload,
                [Symbol.for("name")]: "NormalForm"
              };
    case "*Scope Info*" :
        return {
                TAG: 8,
                _0: payload,
                [Symbol.for("name")]: "WhyInScope"
              };
    case "*Search About*" :
        return {
                TAG: 7,
                _0: payload,
                [Symbol.for("name")]: "SearchAbout"
              };
    case "*Time*" :
        return {
                TAG: 2,
                _0: payload,
                [Symbol.for("name")]: "Time"
              };
    default:
      return {
              TAG: 1,
              _0: Emacs__AllGoalsWarnings$AgdaMode.parse(title, payload),
              [Symbol.for("name")]: "AllGoalsWarnings"
            };
  }
}

var Info = {
  toString: toString,
  parse: parse
};

function toString$1(filepath) {
  if (typeof filepath === "number") {
    switch (filepath) {
      case /* NoStatus */0 :
          return "NoStatus";
      case /* ClearRunningInfo */1 :
          return "ClearRunningInfo";
      case /* ClearHighlighting */2 :
          return "ClearHighlighting";
      case /* DoneAborting */3 :
          return "DoneAborting";
      
    }
  } else {
    switch (filepath.TAG | 0) {
      case /* HighlightingInfoDirect */0 :
          if (filepath._0) {
            return "HighlightingInfoDirect Keep " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath._1, Highlighting$AgdaMode.Annotation.toString));
          } else {
            return "HighlightingInfoDirect Remove " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath._1, Highlighting$AgdaMode.Annotation.toString));
          }
      case /* HighlightingInfoIndirect */1 :
          return "HighlightingInfoIndirect " + filepath._0;
      case /* Status */2 :
          return "Status: implicit arguments " + ((
                    filepath._0 ? "displayed, " : "not displayed, "
                  ) + ("module " + (
                      filepath._1 ? "type checked" : "not type checked"
                    )));
      case /* JumpToError */3 :
          return "JumpToError " + (filepath._0 + (" " + String(filepath._1)));
      case /* InteractionPoints */4 :
          return "InteractionPoints " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath._0, (function (prim) {
                            return String(prim);
                          })));
      case /* GiveAction */5 :
          var string = filepath._1;
          var index = filepath._0;
          if (typeof string === "number") {
            if (string !== 0) {
              return "GiveAction " + (String(index) + " NoParen");
            } else {
              return "GiveAction " + (String(index) + " Paren");
            }
          } else {
            return "GiveAction " + (String(index) + (" String " + string._0));
          }
      case /* MakeCase */6 :
          if (filepath._0) {
            return "MakeCase ExtendedLambda " + Util$AgdaMode.Pretty.array(filepath._1);
          } else {
            return "MakeCase Function " + Util$AgdaMode.Pretty.array(filepath._1);
          }
      case /* SolveAll */7 :
          return "SolveAll " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath._0, (function (param) {
                            return String(param[0]) + (" " + param[1]);
                          })));
      case /* DisplayInfo */8 :
          return "DisplayInfo " + toString(filepath._0);
      case /* RunningInfo */9 :
          return "RunningInfo " + (String(filepath._0) + (" " + filepath._1));
      
    }
  }
}

function parseWithPriority(_priority, tokens) {
  if (!tokens.TAG) {
    return {
            TAG: 1,
            _0: {
              TAG: 1,
              _0: 0,
              _1: tokens,
              [Symbol.for("name")]: "Response"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var xs = tokens._0;
  var match = Belt_Array.get(xs, 0);
  var exit = 0;
  if (match === undefined) {
    return {
            TAG: 1,
            _0: {
              TAG: 1,
              _0: 14,
              _1: tokens,
              [Symbol.for("name")]: "Response"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  if (match.TAG) {
    return {
            TAG: 1,
            _0: {
              TAG: 1,
              _0: 14,
              _1: tokens,
              [Symbol.for("name")]: "Response"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  switch (match._0) {
    case "agda2-abort-done" :
        return {
                TAG: 0,
                _0: /* DoneAborting */3,
                [Symbol.for("name")]: "Ok"
              };
    case "agda2-give-action" :
        var match$1 = Belt_Array.get(xs, 1);
        if (match$1 !== undefined && !match$1.TAG) {
          return Belt_Option.mapWithDefault(Belt_Option.flatMap(Parser$AgdaMode.$$int(match$1._0), (function (i) {
                            var match = Belt_Array.get(xs, 2);
                            if (match === undefined) {
                              return ;
                            }
                            if (match.TAG) {
                              return ;
                            }
                            var result = match._0;
                            switch (result) {
                              case "no-paren" :
                                  return {
                                          TAG: 5,
                                          _0: i,
                                          _1: /* NoParen */1,
                                          [Symbol.for("name")]: "GiveAction"
                                        };
                              case "paren" :
                                  return {
                                          TAG: 5,
                                          _0: i,
                                          _1: /* Paren */0,
                                          [Symbol.for("name")]: "GiveAction"
                                        };
                              default:
                                return {
                                        TAG: 5,
                                        _0: i,
                                        _1: {
                                          _0: result,
                                          [Symbol.for("name")]: "String"
                                        },
                                        [Symbol.for("name")]: "GiveAction"
                                      };
                            }
                          })), {
                      TAG: 1,
                      _0: {
                        TAG: 1,
                        _0: 6,
                        _1: tokens,
                        [Symbol.for("name")]: "Response"
                      },
                      [Symbol.for("name")]: "Error"
                    }, (function (x) {
                        return {
                                TAG: 0,
                                _0: x,
                                [Symbol.for("name")]: "Ok"
                              };
                      }));
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 7,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
    case "agda2-goals-action" :
        var xs$1 = Belt_Array.get(xs, 1);
        if (xs$1 !== undefined) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 4,
                    _0: Belt_Array.keepMap(Parser$AgdaMode.SExpression.flatten(xs$1), Parser$AgdaMode.$$int),
                    [Symbol.for("name")]: "InteractionPoints"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 5,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
    case "agda2-highlight-add-annotations" :
        var annotations = Highlighting$AgdaMode.Annotation.parseDirectHighlightings(xs);
        var match$2 = Belt_Array.get(xs, 1);
        if (match$2 === undefined) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 0,
                    _0: /* Keep */1,
                    _1: [],
                    [Symbol.for("name")]: "HighlightingInfoDirect"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        }
        if (match$2.TAG) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 0,
                    _0: /* Keep */1,
                    _1: [],
                    [Symbol.for("name")]: "HighlightingInfoDirect"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        }
        switch (match$2._0) {
          case "nil" :
              return {
                      TAG: 0,
                      _0: {
                        TAG: 0,
                        _0: /* Keep */1,
                        _1: annotations,
                        [Symbol.for("name")]: "HighlightingInfoDirect"
                      },
                      [Symbol.for("name")]: "Ok"
                    };
          case "remove" :
              return {
                      TAG: 0,
                      _0: {
                        TAG: 0,
                        _0: /* Remove */0,
                        _1: annotations,
                        [Symbol.for("name")]: "HighlightingInfoDirect"
                      },
                      [Symbol.for("name")]: "Ok"
                    };
          default:
            return {
                    TAG: 0,
                    _0: {
                      TAG: 0,
                      _0: /* Keep */1,
                      _1: [],
                      [Symbol.for("name")]: "HighlightingInfoDirect"
                    },
                    [Symbol.for("name")]: "Ok"
                  };
        }
    case "agda2-highlight-clear" :
        return {
                TAG: 0,
                _0: /* ClearHighlighting */2,
                [Symbol.for("name")]: "Ok"
              };
    case "agda2-highlight-load-and-delete-action" :
        var match$3 = Belt_Array.get(xs, 1);
        if (match$3 !== undefined && !match$3.TAG) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 1,
                    _0: match$3._0,
                    [Symbol.for("name")]: "HighlightingInfoIndirect"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 2,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
    case "agda2-info-action" :
    case "agda2-info-action-and-copy" :
        exit = 1;
        break;
    case "agda2-make-case-action" :
        var xs$2 = Belt_Array.get(xs, 1);
        if (xs$2 !== undefined) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 6,
                    _0: /* Function */0,
                    _1: Parser$AgdaMode.SExpression.flatten(xs$2),
                    [Symbol.for("name")]: "MakeCase"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 8,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
    case "agda2-make-case-action-extendlam" :
        var xs$3 = Belt_Array.get(xs, 1);
        if (xs$3 !== undefined) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 6,
                    _0: /* ExtendedLambda */1,
                    _1: Parser$AgdaMode.SExpression.flatten(xs$3),
                    [Symbol.for("name")]: "MakeCase"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 9,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
    case "agda2-maybe-goto" :
        var match$4 = Belt_Array.get(xs, 1);
        if (match$4 === undefined) {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 4,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
        if (!match$4.TAG) {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 4,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
        var match$5 = match$4._0;
        if (match$5.length !== 3) {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 4,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
        var filepath = match$5[0];
        if (filepath.TAG) {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 4,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
        var filepath$1 = filepath._0;
        var index$prime = match$5[2];
        if (index$prime.TAG) {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 4,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        } else {
          return Belt_Option.mapWithDefault(Belt_Option.flatMap(Parser$AgdaMode.$$int(index$prime._0), (function (index) {
                            return {
                                    TAG: 3,
                                    _0: filepath$1,
                                    _1: index,
                                    [Symbol.for("name")]: "JumpToError"
                                  };
                          })), {
                      TAG: 1,
                      _0: {
                        TAG: 1,
                        _0: 3,
                        _1: tokens,
                        [Symbol.for("name")]: "Response"
                      },
                      [Symbol.for("name")]: "Error"
                    }, (function (x) {
                        return {
                                TAG: 0,
                                _0: x,
                                [Symbol.for("name")]: "Ok"
                              };
                      }));
        }
    case "agda2-solveAll-action" :
        var xs$4 = Belt_Array.get(xs, 1);
        if (xs$4 === undefined) {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 10,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
        var tokens$1 = Parser$AgdaMode.SExpression.flatten(xs$4);
        var isEven = function (i) {
          return i % 2 === 0;
        };
        var i = {
          contents: 0
        };
        var solutions = Belt_Array.keepMap(tokens$1, (function (token) {
                var solution = isEven(i.contents) ? Belt_Option.flatMap(Parser$AgdaMode.$$int(token), (function (index) {
                          return Belt_Option.map(Belt_Array.get(tokens$1, i.contents + 1 | 0), (function (s) {
                                        return [
                                                index,
                                                s
                                              ];
                                      }));
                        })) : undefined;
                i.contents = i.contents + 1 | 0;
                return solution;
              }));
        return {
                TAG: 0,
                _0: {
                  TAG: 7,
                  _0: solutions,
                  [Symbol.for("name")]: "SolveAll"
                },
                [Symbol.for("name")]: "Ok"
              };
    case "agda2-status-action" :
        var match$6 = Belt_Array.get(xs, 1);
        if (match$6 === undefined) {
          return {
                  TAG: 0,
                  _0: /* NoStatus */0,
                  [Symbol.for("name")]: "Ok"
                };
        }
        if (match$6.TAG) {
          return {
                  TAG: 0,
                  _0: /* NoStatus */0,
                  [Symbol.for("name")]: "Ok"
                };
        }
        var pulp = match$6._0.split(",");
        return {
                TAG: 0,
                _0: {
                  TAG: 2,
                  _0: pulp.includes("ShowImplicit"),
                  _1: pulp.includes("Checked"),
                  [Symbol.for("name")]: "Status"
                },
                [Symbol.for("name")]: "Ok"
              };
    case "agda2-verbose" :
        var match$7 = Belt_Array.get(xs, 1);
        if (match$7 !== undefined && !match$7.TAG) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 9,
                    _0: 2,
                    _1: match$7._0,
                    [Symbol.for("name")]: "RunningInfo"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 13,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
    default:
      return {
              TAG: 1,
              _0: {
                TAG: 1,
                _0: 14,
                _1: tokens,
                [Symbol.for("name")]: "Response"
              },
              [Symbol.for("name")]: "Error"
            };
  }
  if (exit === 1) {
    var match$8 = Belt_Array.get(xs, 1);
    var exit$1 = 0;
    if (match$8 !== undefined && !match$8.TAG) {
      if (match$8._0 === "*Type-checking*") {
        var match$9 = Belt_Array.get(xs, 3);
        if (match$9 === undefined) {
          return {
                  TAG: 0,
                  _0: /* ClearRunningInfo */1,
                  [Symbol.for("name")]: "Ok"
                };
        }
        if (match$9.TAG) {
          return {
                  TAG: 0,
                  _0: /* ClearRunningInfo */1,
                  [Symbol.for("name")]: "Ok"
                };
        }
        if (match$9._0 !== "t") {
          return {
                  TAG: 0,
                  _0: /* ClearRunningInfo */1,
                  [Symbol.for("name")]: "Ok"
                };
        }
        var match$10 = Belt_Array.get(xs, 2);
        if (match$10 !== undefined && !match$10.TAG) {
          return {
                  TAG: 0,
                  _0: {
                    TAG: 9,
                    _0: 1,
                    _1: match$10._0,
                    [Symbol.for("name")]: "RunningInfo"
                  },
                  [Symbol.for("name")]: "Ok"
                };
        } else {
          return {
                  TAG: 1,
                  _0: {
                    TAG: 1,
                    _0: 11,
                    _1: tokens,
                    [Symbol.for("name")]: "Response"
                  },
                  [Symbol.for("name")]: "Error"
                };
        }
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var info = parse(xs.slice(1));
      if (info !== undefined) {
        return {
                TAG: 0,
                _0: {
                  TAG: 8,
                  _0: info,
                  [Symbol.for("name")]: "DisplayInfo"
                },
                [Symbol.for("name")]: "Ok"
              };
      } else {
        return {
                TAG: 1,
                _0: {
                  TAG: 1,
                  _0: 12,
                  _1: tokens,
                  [Symbol.for("name")]: "Response"
                },
                [Symbol.for("name")]: "Error"
              };
      }
    }
    
  }
  
}

function parse$1(tokens) {
  if (!tokens.TAG) {
    return parseWithPriority(0, tokens);
  }
  var match = tokens._0;
  if (match.length !== 3) {
    return parseWithPriority(0, tokens);
  }
  var match$1 = match[0];
  if (!match$1.TAG) {
    return parseWithPriority(0, tokens);
  }
  var match$2 = match$1._0;
  if (match$2.length !== 3) {
    return parseWithPriority(0, tokens);
  }
  var match$3 = match$2[0];
  if (match$3.TAG) {
    return parseWithPriority(0, tokens);
  }
  if (match$3._0 !== "last") {
    return parseWithPriority(0, tokens);
  }
  var match$4 = match$2[1];
  if (match$4.TAG) {
    return parseWithPriority(0, tokens);
  }
  if (match$4._0 !== ".") {
    return parseWithPriority(0, tokens);
  }
  var priority = match$2[2];
  if (priority.TAG) {
    return parseWithPriority(0, tokens);
  }
  var match$5 = match[1];
  if (match$5.TAG) {
    return parseWithPriority(0, tokens);
  }
  if (match$5._0 !== ".") {
    return parseWithPriority(0, tokens);
  }
  var xs = match[2];
  return parseWithPriority(Caml_format.caml_int_of_string(priority._0), xs);
}

var Token;

exports.Token = Token;
exports.Info = Info;
exports.toString = toString$1;
exports.parseWithPriority = parseWithPriority;
exports.parse = parse$1;
/* Util-AgdaMode Not a pure module */
