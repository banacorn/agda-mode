// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Decoder$AgdaMode = require("../../Decoder.bs.js");
var JSON__Error$AgdaMode = require("../JSON/JSON__Error.bs.js");
var Emacs__Error$AgdaMode = require("../Emacs/Emacs__Error.bs.js");
var Emacs__Context$AgdaMode = require("../Emacs/Emacs__Context.bs.js");
var Emacs__WhyInScope$AgdaMode = require("../Emacs/Emacs__WhyInScope.bs.js");
var Emacs__SearchAbout$AgdaMode = require("../Emacs/Emacs__SearchAbout.bs.js");
var Emacs__GoalTypeContext$AgdaMode = require("../Emacs/Emacs__GoalTypeContext.bs.js");
var JSON__AllGoalsWarnings$AgdaMode = require("../JSON/JSON__AllGoalsWarnings.bs.js");
var Emacs__AllGoalsWarnings$AgdaMode = require("../Emacs/Emacs__AllGoalsWarnings.bs.js");

var component = ReasonReact.statelessComponent("JSONBody");

function make(body, hidden, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                var comp;
                if (typeof body === "number") {
                  comp = null;
                } else if (body.tag) {
                  var match = Decoder$AgdaMode.parseBody(body[0]);
                  switch (match.tag | 0) {
                    case 0 : 
                        comp = ReasonReact.element(undefined, undefined, JSON__AllGoalsWarnings$AgdaMode.make(match[0], /* array */[]));
                        break;
                    case 1 : 
                        comp = ReasonReact.element(undefined, undefined, JSON__Error$AgdaMode.make(match[0], match[1], /* array */[]));
                        break;
                    case 2 : 
                        comp = React.createElement("p", undefined, match[0]);
                        break;
                    
                  }
                } else {
                  var data = body[0];
                  var exit = 0;
                  switch (data.tag | 0) {
                    case 0 : 
                        comp = ReasonReact.element(undefined, undefined, Emacs__AllGoalsWarnings$AgdaMode.make(data[0], /* array */[]));
                        break;
                    case 1 : 
                        comp = ReasonReact.element(undefined, undefined, Emacs__GoalTypeContext$AgdaMode.make(data[0], /* array */[]));
                        break;
                    case 2 : 
                    case 3 : 
                        exit = 1;
                        break;
                    case 4 : 
                        comp = ReasonReact.element(undefined, undefined, Emacs__WhyInScope$AgdaMode.make(data[0], /* array */[]));
                        break;
                    case 5 : 
                        comp = ReasonReact.element(undefined, undefined, Emacs__SearchAbout$AgdaMode.make(data[0], /* array */[]));
                        break;
                    case 6 : 
                        comp = ReasonReact.element(undefined, undefined, Emacs__Error$AgdaMode.make(data[0], /* array */[]));
                        break;
                    case 7 : 
                        var body$1 = data[0];
                        var match$1 = Rebase.$$String[/* isEmpty */5](body$1);
                        comp = match$1 ? null : React.createElement("p", undefined, body$1);
                        break;
                    
                  }
                  if (exit === 1) {
                    comp = ReasonReact.element(undefined, undefined, Emacs__Context$AgdaMode.make(data[0], /* array */[]));
                  }
                  
                }
                var className = hidden ? Rebase.$$String[/* joinWith */11](" ", /* :: */Block.simpleVariant("::", [
                          "agda-body",
                          /* :: */Block.simpleVariant("::", [
                              "native-key-bindings",
                              /* :: */Block.simpleVariant("::", [
                                  "hidden",
                                  /* [] */0
                                ])
                            ])
                        ])) : Rebase.$$String[/* joinWith */11](" ", /* :: */Block.simpleVariant("::", [
                          "agda-body",
                          /* :: */Block.simpleVariant("::", [
                              "native-key-bindings",
                              /* [] */0
                            ])
                        ]));
                return React.createElement("section", {
                            className: className,
                            tabIndex: -1
                          }, comp);
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
