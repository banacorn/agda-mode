// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var C$AgdaMode = require("./C.bs.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("./Util.bs.js");
var Concrete$AgdaMode = require("./Concrete.bs.js");
var CommonPrim$AgdaMode = require("./CommonPrim.bs.js");

var component = ReasonReact.statelessComponent("Call");

function make(call, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                if (typeof call === "number") {
                  return React.createElement("span", undefined, "<Call> unimplemented");
                } else {
                  switch (call.tag | 0) {
                    case 0 : 
                        return React.createElement("span", undefined, "when checking that the clause", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.LHS[/* make */0](call[1], /* array */[])), "has type", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[0][/* concrete */1], /* array */[])));
                    case 1 : 
                        return React.createElement("span", undefined, "when checking that the pattern", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Pattern[/* make */0](call[0], /* array */[])), "has type", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[1][/* concrete */1], /* array */[])));
                    case 2 : 
                        return React.createElement("span", undefined, "when checking that the let biding", Util$AgdaMode.sepBy(React.createElement("br", undefined), List.map((function (decl) {
                                              return ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Declaration[/* make */0](decl, /* array */[]));
                                            }), call[0])));
                    case 3 : 
                        return React.createElement("span", undefined, "when inferring the type of", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[0], /* array */[])));
                    case 4 : 
                        return React.createElement("span", undefined, "when checking that the expression ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[1], /* array */[])), " has type ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[2][/* concrete */1], /* array */[])));
                    case 12 : 
                        var exprs = call[1];
                        var match = List.length(exprs) > 1;
                        return React.createElement("span", undefined, "when checking that ", Util$AgdaMode.sepBy(" ", List.map((function (value) {
                                              return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Arg[/* make */4](undefined, value, (function (prec, value) {
                                                                return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Named[/* make */4](prec, value, (function (_, value) {
                                                                                  return ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](value, /* array */[]));
                                                                                })));
                                                              })));
                                            }), exprs)), match ? " are valid arguments " : " is a valid argument ", "to a function of type ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[2][/* concrete */1], /* array */[])));
                    case 16 : 
                        return React.createElement("span", undefined, "when checking the constructor ", ReasonReact.element(undefined, undefined, C$AgdaMode.QName[/* make */2](call[1], /* array */[])), " in the declaration of ", ReasonReact.element(undefined, undefined, C$AgdaMode.QName[/* make */2](call[0], /* array */[])));
                    case 24 : 
                        return React.createElement("span", undefined, "when scope checking ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](call[0], /* array */[])));
                    default:
                      return React.createElement("span", undefined, "<Call> unimplemented");
                  }
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
