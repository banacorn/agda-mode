// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

var component = ReasonReact.reducerComponent("CandidateSymbols");

function make(candidateSymbols, updateTranslation, chooseSymbol, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                var disposables = new Atom.CompositeDisposable();
                disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-up", (function ($$event) {
                            Curry._1(self[/* send */3], /* MoveUp */0);
                            $$event.stopImmediatePropagation();
                            return /* () */0;
                          })));
                disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-right", (function ($$event) {
                            Curry._1(self[/* send */3], /* MoveRight */2);
                            $$event.stopImmediatePropagation();
                            return /* () */0;
                          })));
                disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-down", (function ($$event) {
                            Curry._1(self[/* send */3], /* MoveDown */1);
                            $$event.stopImmediatePropagation();
                            return /* () */0;
                          })));
                disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-left", (function ($$event) {
                            Curry._1(self[/* send */3], /* MoveLeft */3);
                            $$event.stopImmediatePropagation();
                            return /* () */0;
                          })));
                return Curry._1(self[/* onUnmount */4], (function (param) {
                              disposables.dispose();
                              return /* () */0;
                            }));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var rowStart = Caml_int32.imul(self[/* state */1][/* index */0] / 10 | 0, 10);
                var row = Rebase.$$Array[/* slice */25](rowStart, rowStart + 10 | 0, candidateSymbols);
                var match = Rebase.$$Array[/* get */17](candidateSymbols, self[/* state */1][/* index */0]);
                if (match !== undefined) {
                  var keys = Rebase.$$Array[/* mapi */27]((function (key, i) {
                          var isSelected = (rowStart + i | 0) === self[/* state */1][/* index */0];
                          var className = Curry._1(Util$AgdaMode.React[/* toClassName */3], Util$AgdaMode.React[/* addClass */2]("selected", isSelected, /* :: */Block.simpleVariant("::", [
                                      "btn",
                                      /* [] */0
                                    ])));
                          return React.createElement("button", {
                                      key: key,
                                      className: className,
                                      onClick: (function (param) {
                                          return Curry._1(chooseSymbol, key);
                                        })
                                    }, key);
                        }), row);
                  return ReactDOMRe.createElementVariadic("div", {
                              className: "candidates btn-group btn-group-sm"
                            }, keys);
                } else {
                  return null;
                }
              }),
            (function (param) {
                return /* record */Block.record(["index"], [0]);
              }),
            component[/* retainedProps */11],
            (function (action, param) {
                var index = param[/* index */0];
                switch (action) {
                  case 0 : 
                      var newIndex = Caml_primitive.caml_int_max(0, index - 10 | 0);
                      return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                /* record */Block.record(["index"], [newIndex]),
                                (function (param) {
                                    return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex));
                                  })
                              ]);
                  case 1 : 
                      var newIndex$1 = Caml_primitive.caml_int_min(Rebase.$$Array[/* length */16](candidateSymbols) - 1 | 0, index + 10 | 0);
                      return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                /* record */Block.record(["index"], [newIndex$1]),
                                (function (param) {
                                    return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex$1));
                                  })
                              ]);
                  case 2 : 
                      var newIndex$2 = Caml_primitive.caml_int_min(Rebase.$$Array[/* length */16](candidateSymbols) - 1 | 0, index + 1 | 0);
                      return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                /* record */Block.record(["index"], [newIndex$2]),
                                (function (param) {
                                    return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex$2));
                                  })
                              ]);
                  case 3 : 
                      var newIndex$3 = Caml_primitive.caml_int_max(0, index - 1 | 0);
                      return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                /* record */Block.record(["index"], [newIndex$3]),
                                (function (param) {
                                    return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex$3));
                                  })
                              ]);
                  
                }
              }),
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.candidateSymbols, jsProps.updateTranslation, jsProps.chooseSymbol, /* array */[]);
      }));

exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
