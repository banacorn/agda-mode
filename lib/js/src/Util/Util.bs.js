// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var CompareVersions = require("compare-versions");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function sepBy$prime(item, sep) {
  if (!item) {
    return React.createElement(React.Fragment, undefined);
  }
  var xs = item[1];
  var x = item[0];
  if (xs) {
    return Caml_splice_call.spliceApply(React.createElement, [
                "span",
                undefined,
                Belt_List.toArray(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        x,
                        Belt_List.map(xs, (function (i) {
                                return React.createElement(React.Fragment, undefined, sep, i);
                              }))
                      ]))
              ]);
  } else {
    return x;
  }
}

function sepBy(sep, xs) {
  return sepBy$prime(Belt_List.fromArray(xs), sep);
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

function when_(p, className) {
  if (p) {
    return " " + className;
  } else {
    return "";
  }
}

function showWhen(param) {
  if (param) {
    return "";
  } else {
    return " hidden";
  }
}

var React$1 = {
  sepBy$prime: sepBy$prime,
  sepBy: sepBy,
  enclosedBy: enclosedBy,
  when_: when_,
  showWhen: showWhen
};

function every(xs) {
  return Belt_Array.reduce(xs, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [[]]), (function (acc, x) {
                if (!acc.tag) {
                  var xs = acc[0];
                  if (!x.tag) {
                    xs.push(x[0]);
                    return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [xs]);
                  }
                  
                }
                if (x.tag) {
                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [x[0]]);
                } else {
                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [acc[0]]);
                }
              }));
}

var Result = {
  every: every
};

function partite(p, xs) {
  var indices = Belt_Array.map(Belt_Array.keep(Belt_Array.mapWithIndex(xs, (function (i, x) {
                  return /* tuple */[
                          i,
                          x
                        ];
                })), (function (param) {
              return Curry._1(p, param[1]);
            })), (function (prim) {
          return prim[0];
        }));
  var n = Belt_Array.get(indices, 0);
  var indicesWF = n !== undefined ? (
      n === 0 ? indices : Belt_Array.concat(indices, [0])
    ) : (
      indices.length === 0 ? [0] : indices
    );
  var intervals = Belt_Array.mapWithIndex(indicesWF, (function (n, index) {
          var next = Belt_Array.get(indicesWF, n + 1 | 0);
          if (next !== undefined) {
            return /* tuple */[
                    index,
                    next
                  ];
          } else {
            return /* tuple */[
                    index,
                    xs.length
                  ];
          }
        }));
  return Belt_Array.map(intervals, (function (param) {
                return xs.slice(param[0], param[1]);
              }));
}

function mergeWithNext(p, xs) {
  return Belt_Array.reduce(xs, [], (function (acc, x) {
                var last = Belt_Array.get(acc, acc.length - 1 | 0);
                if (last !== undefined) {
                  if (Curry._1(p, last)) {
                    Belt_Array.set(acc, acc.length - 1 | 0, Belt_Array.concat(x, last));
                    return acc;
                  } else {
                    return Belt_Array.concat([x], acc);
                  }
                } else {
                  return [x];
                }
              }));
}

var Array_ = {
  partite: partite,
  mergeWithNext: mergeWithNext
};

function partite$1(tagEntry, xs) {
  var keys = Belt_Array.keepMap(Belt_Array.mapWithIndex(xs, (function (i, x) {
              return /* tuple */[
                      i,
                      x
                    ];
            })), (function (param) {
          var i = param[0];
          return Belt_Option.map(Curry._1(tagEntry, /* tuple */[
                          param[1],
                          i
                        ]), (function (key) {
                        return /* tuple */[
                                key,
                                i
                              ];
                      }));
        }));
  var intervals = Belt_Array.mapWithIndex(keys, (function (n, param) {
          var index = param[1];
          var key = param[0];
          var match = Belt_Array.get(keys, n + 1 | 0);
          if (match !== undefined) {
            return /* tuple */[
                    key,
                    index,
                    match[1]
                  ];
          } else {
            return /* tuple */[
                    key,
                    index,
                    xs.length
                  ];
          }
        }));
  return Js_dict.fromArray(Belt_Array.map(intervals, (function (param) {
                    var start = param[1];
                    var func = function (param, param$1) {
                      return param$1.slice(start, param);
                    };
                    return /* tuple */[
                            param[0],
                            Curry._2(func, param[2], xs)
                          ];
                  })));
}

function split(key, splitter, dict) {
  var value = Js_dict.get(dict, key);
  if (value !== undefined) {
    Belt_Array.forEach(Js_dict.entries(Curry._1(splitter, value)), (function (param) {
            dict[param[0]] = param[1];
            
          }));
    return dict;
  } else {
    return dict;
  }
}

function update(key, f, dict) {
  var value = Js_dict.get(dict, key);
  if (value !== undefined) {
    dict[key] = Curry._1(f, Caml_option.valFromOption(value));
    return dict;
  } else {
    return dict;
  }
}

var Dict = {
  partite: partite$1,
  split: split,
  update: update
};

function span(p, xs) {
  if (!xs) {
    return /* tuple */[
            /* [] */0,
            /* [] */0
          ];
  }
  var xs$1 = xs[1];
  var x = xs[0];
  if (!Curry._1(p, x)) {
    return /* tuple */[
            /* [] */0,
            xs$1
          ];
  }
  var match = span(p, xs$1);
  return /* tuple */[
          /* :: */Caml_chrome_debugger.simpleVariant("::", [
              x,
              match[0]
            ]),
          match[1]
        ];
}

function dropWhile(p, _xs) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return /* [] */0;
    }
    var xs$1 = xs[1];
    var x = xs[0];
    if (!Curry._1(p, x)) {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                x,
                xs$1
              ]);
    }
    _xs = xs$1;
    continue ;
  };
}

var List_ = {
  span: span,
  dropWhile: dropWhile
};

function indexOf(needle, haystack) {
  var n = haystack.indexOf(needle);
  if (n !== -1) {
    return n;
  }
  
}

function lastIndexOf(needle, haystack) {
  var n = haystack.lastIndexOf(needle);
  if (n !== -1) {
    return n;
  }
  
}

function indentedBy(s) {
  var n = 0;
  for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
    var match = s.charAt(i);
    var exit = 0;
    switch (match) {
      case "\t" :
      case "\n" :
      case "\f" :
      case "\r" :
      case " " :
          exit = 1;
          break;
      default:
        
    }
    if (exit === 1 && i === n) {
      n = n + 1 | 0;
    }
    
  }
  return n;
}

var $$String = {
  indexOf: indexOf,
  lastIndexOf: lastIndexOf,
  indentedBy: indentedBy
};

function toString(_e) {
  return (_e.toString());
}

var JsError = {
  toString: toString
};

var partial_arg = /-.*/;

function trim(param) {
  return param.replace(partial_arg, "");
}

function compare(a, b) {
  var match = CompareVersions(Curry._1(trim, a), Curry._1(trim, b));
  if (match !== -1) {
    if (match !== 0) {
      return /* GT */2;
    } else {
      return /* EQ */1;
    }
  } else {
    return /* LT */0;
  }
}

function gte(a, b) {
  var match = compare(a, b);
  return match !== 0;
}

var Version = {
  trim: trim,
  compare: compare,
  gte: gte
};

function list(xs) {
  var xs_ = Rebase.$$String.joinWith(", ", xs);
  return "[" + (xs_ + "]");
}

function array(xs) {
  return list(Rebase.List.fromArray(xs));
}

var Pretty = {
  list: list,
  array: array
};

exports.React = React$1;
exports.Result = Result;
exports.Array_ = Array_;
exports.Dict = Dict;
exports.List_ = List_;
exports.$$String = $$String;
exports.JsError = JsError;
exports.Version = Version;
exports.Pretty = Pretty;
/* react Not a pure module */
