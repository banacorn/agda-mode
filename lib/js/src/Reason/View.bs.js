// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Tab$AgdaMode = require("./View/Tab.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var Panel$AgdaMode = require("./View/Panel/Panel.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Editor$AgdaMode = require("./Editor.bs.js");

var EditorNotSet = Caml_exceptions.create("View-AgdaMode.EditorNotSet");

var updateHeader = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateRawBody = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateMode = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateMountTo = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var inquireQuery = /* record */Block.record(["contents"], [(function (param, param$1) {
        return Promise.reject(Util$AgdaMode.TelePromise[/* Uninitialized */0]);
      })]);

var interceptAndInsertKey = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var inputMethodHandle = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var settingsViewHandle = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var collection = /* record */Block.record([
    "updateHeader",
    "updateRawBody",
    "updateMode",
    "updateMountTo",
    "inquireQuery",
    "interceptAndInsertKey",
    "inputMethodHandle",
    "settingsViewHandle"
  ], [
    updateHeader,
    updateRawBody,
    updateMode,
    updateMountTo,
    inquireQuery,
    interceptAndInsertKey,
    inputMethodHandle,
    settingsViewHandle
  ]);

function updateHeader$1(handle) {
  updateHeader[0] = handle;
  return /* () */0;
}

function updateRawBody$1(handle) {
  updateRawBody[0] = handle;
  return /* () */0;
}

function updateMode$1(handle) {
  updateMode[0] = handle;
  return /* () */0;
}

function updateMountTo$1(handle) {
  updateMountTo[0] = handle;
  return /* () */0;
}

function inquireQuery$1(handle) {
  inquireQuery[0] = handle;
  return /* () */0;
}

function interceptAndInsertKey$1(handle) {
  interceptAndInsertKey[0] = handle;
  return /* () */0;
}

function inputMethodHandle$1(handle) {
  inputMethodHandle[0] = handle;
  return /* () */0;
}

function settingsViewHandle$1(handle) {
  settingsViewHandle[0] = handle;
  return /* () */0;
}

var Hooked = /* module */Block.localModule([
    "updateHeader",
    "updateRawBody",
    "updateMode",
    "updateMountTo",
    "inquireQuery",
    "interceptAndInsertKey",
    "inputMethodHandle",
    "settingsViewHandle"
  ], [
    updateHeader$1,
    updateRawBody$1,
    updateMode$1,
    updateMountTo$1,
    inquireQuery$1,
    interceptAndInsertKey$1,
    inputMethodHandle$1,
    settingsViewHandle$1
  ]);

var Handle = /* module */Block.localModule([
    "updateHeader",
    "updateRawBody",
    "updateMode",
    "updateMountTo",
    "inquireQuery",
    "interceptAndInsertKey",
    "inputMethodHandle",
    "settingsViewHandle",
    "collection",
    "Hooked"
  ], [
    updateHeader,
    updateRawBody,
    updateMode,
    updateMountTo,
    inquireQuery,
    interceptAndInsertKey,
    inputMethodHandle,
    settingsViewHandle,
    collection,
    Hooked
  ]);

function initialState(editor, param) {
  return /* record */Block.record([
            "header",
            "body",
            "mountAt",
            "settingsView",
            "editor",
            "mode"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                ""
              ]),
            Block.record([
                "maxHeight",
                "raw"
              ], [
                170,
                0
              ]),
            0,
            undefined,
            Editor$AgdaMode.make(editor),
            0
          ]);
}

function createElement(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function mountPanel(self, mountTo) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(self[/* state */1][/* editor */4][/* source */1], undefined, undefined, (function (param) {
                  return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 2, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */2];
  if (typeof match === "number") {
    switch (mountTo) {
      case 0 : 
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Bottom */Block.variant("Bottom", 0, [createElement(/* () */0)])]));
      case 1 : 
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Pane */Block.variant("Pane", 1, [createTab(/* () */0)])]));
      case 2 : 
          return /* () */0;
      
    }
  } else if (match.tag) {
    var tab = match[0];
    switch (mountTo) {
      case 0 : 
          Curry._1(tab[/* kill */1], /* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Bottom */Block.variant("Bottom", 0, [createElement(/* () */0)])]));
      case 1 : 
          return /* () */0;
      case 2 : 
          Curry._1(tab[/* kill */1], /* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Nowhere */0]));
      
    }
  } else {
    switch (mountTo) {
      case 0 : 
          return /* () */0;
      case 1 : 
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Pane */Block.variant("Pane", 1, [createTab(/* () */0)])]));
      case 2 : 
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Nowhere */0]));
      
    }
  }
}

function reducer(action, state) {
  if (typeof action === "number") {
    if (action === 0) {
      var init = state[/* editor */4];
      return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                /* record */Block.record([
                    "header",
                    "body",
                    "mountAt",
                    "settingsView",
                    "editor",
                    "mode"
                  ], [
                    state[/* header */0],
                    state[/* body */1],
                    state[/* mountAt */2],
                    state[/* settingsView */3],
                    Block.record([
                        "focused",
                        "source",
                        "query"
                      ], [
                        1,
                        init[/* source */1],
                        init[/* query */2]
                      ]),
                    state[/* mode */5]
                  ]),
                (function (self) {
                    return Editor$AgdaMode.Focus[/* onQuery */2](self[/* state */1][/* editor */4]);
                  })
              ]);
    } else {
      var init$1 = state[/* editor */4];
      return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                /* record */Block.record([
                    "header",
                    "body",
                    "mountAt",
                    "settingsView",
                    "editor",
                    "mode"
                  ], [
                    state[/* header */0],
                    state[/* body */1],
                    state[/* mountAt */2],
                    state[/* settingsView */3],
                    Block.record([
                        "focused",
                        "source",
                        "query"
                      ], [
                        0,
                        init$1[/* source */1],
                        init$1[/* query */2]
                      ]),
                    state[/* mode */5]
                  ]),
                (function (self) {
                    return Editor$AgdaMode.Focus[/* onSource */1](self[/* state */1][/* editor */4]);
                  })
              ]);
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var init$2 = state[/* editor */4];
          var init$3 = state[/* editor */4][/* query */2];
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* settingsView */3],
                        Block.record([
                            "focused",
                            "source",
                            "query"
                          ], [
                            init$2[/* focused */0],
                            init$2[/* source */1],
                            Block.record([
                                "value",
                                "placeholder",
                                "ref",
                                "telePromise"
                              ], [
                                init$3[/* value */0],
                                init$3[/* placeholder */1],
                                Caml_option.some(action[0]),
                                init$3[/* telePromise */3]
                              ])
                          ]),
                        state[/* mode */5]
                      ])]);
      case 1 : 
          var init$4 = state[/* editor */4];
          var init$5 = state[/* editor */4][/* query */2];
          return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                    /* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* settingsView */3],
                        Block.record([
                            "focused",
                            "source",
                            "query"
                          ], [
                            init$4[/* focused */0],
                            init$4[/* source */1],
                            Block.record([
                                "value",
                                "placeholder",
                                "ref",
                                "telePromise"
                              ], [
                                action[1],
                                action[0],
                                init$5[/* ref */2],
                                init$5[/* telePromise */3]
                              ])
                          ]),
                        state[/* mode */5]
                      ]),
                    (function (self) {
                        return Editor$AgdaMode.Focus[/* onQuery */2](self[/* state */1][/* editor */4]);
                      })
                  ]);
      case 2 : 
          var mountTo = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                        return mountPanel(self, mountTo);
                      })]);
      case 3 : 
          var open_ = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                        var match = state[/* settingsView */3];
                        if (match !== undefined) {
                          if (open_) {
                            return 0;
                          } else {
                            Curry._1(match[/* kill */1], /* () */0);
                            return Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 4, [undefined]));
                          }
                        } else if (open_) {
                          var tab = Tab$AgdaMode.make(self[/* state */1][/* editor */4][/* source */1], undefined, undefined, (function (param) {
                                  Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 3, [false]));
                                  return Curry._1(settingsViewHandle[0], false);
                                }), undefined, /* () */0);
                          return Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 4, [tab]));
                        } else {
                          return 0;
                        }
                      })]);
      case 4 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        action[0],
                        state[/* editor */4],
                        state[/* mode */5]
                      ])]);
      case 5 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        action[0],
                        state[/* settingsView */3],
                        state[/* editor */4],
                        state[/* mode */5]
                      ])]);
      case 6 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        action[0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* settingsView */3],
                        state[/* editor */4],
                        state[/* mode */5]
                      ])]);
      case 7 : 
          var init$6 = state[/* body */1];
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        state[/* header */0],
                        Block.record([
                            "maxHeight",
                            "raw"
                          ], [
                            init$6[/* maxHeight */0],
                            action[0]
                          ]),
                        state[/* mountAt */2],
                        state[/* settingsView */3],
                        state[/* editor */4],
                        state[/* mode */5]
                      ])]);
      case 8 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "settingsView",
                        "editor",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* settingsView */3],
                        state[/* editor */4],
                        action[0]
                      ])]);
      
    }
  }
}

var component = ReasonReact.reducerComponent("View");

function make(editor, updateRawBody, updateHeader, updateMode, updateMountTo, inquireQuery, interceptAndInsertKey, inputMethodHandle$2, settingsViewHandle, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                Curry._1(updateMountTo, (function (mountTo) {
                        return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 2, [mountTo]));
                      }));
                Curry._1(updateHeader, (function (header) {
                        return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 6, [header]));
                      }));
                Curry._1(updateRawBody, (function (rawBody) {
                        return Curry._1(self[/* send */3], /* UpdateRawBody */Block.variant("UpdateRawBody", 7, [rawBody]));
                      }));
                Curry._1(updateMode, (function (mode) {
                        return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 8, [mode]));
                      }));
                return Curry._1(inquireQuery, (function (placeholder, value) {
                              Curry._1(self[/* send */3], /* InquireQuery */Block.variant("InquireQuery", 1, [
                                      placeholder,
                                      value
                                    ]));
                              var promise = Util$AgdaMode.TelePromise[/* make */2](/* () */0);
                              Curry._2(self[/* handle */0], (function (param, newSelf) {
                                      Editor$AgdaMode.Query[/* inquire */0](newSelf[/* state */1][/* editor */4]).then((function (answer) {
                                                return Promise.resolve(Curry._1(promise[/* resolve */1], answer));
                                              })).catch((function (error) {
                                              return Promise.resolve(Curry._1(promise[/* reject */2], [
                                                              Util$AgdaMode.JSPromiseError,
                                                              error
                                                            ]));
                                            }));
                                      return /* () */0;
                                    }), /* () */0);
                              return Curry._1(promise[/* wire */0], /* () */0);
                            }));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var editor = match[/* editor */4];
                var mountAt = match[/* mountAt */2];
                var element;
                element = typeof mountAt === "number" ? undefined : (
                    mountAt.tag ? Caml_option.some(mountAt[0][/* element */0]) : Caml_option.some(mountAt[0])
                  );
                return React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, Panel$AgdaMode.make(editor, element, (function (mountTo) {
                                      return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 2, [mountTo]));
                                    }), match[/* body */1], match[/* header */0], mountAt, match[/* mode */5], (function (result) {
                                      Curry._1(Editor$AgdaMode.Query[/* answer */1](editor), result);
                                      Curry._1(inputMethodHandle[0], false);
                                      Curry._1(self[/* send */3], /* FocusSource */1);
                                      return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 8, [/* Display */0]));
                                    }), (function (focused) {
                                      return Curry._1(self[/* send */3], focused ? /* FocusQuery */0 : /* FocusSource */1);
                                    }), (function () {
                                      Curry._1(Editor$AgdaMode.Query[/* reject */2](editor), Editor$AgdaMode.QueryCancelled);
                                      Curry._1(inputMethodHandle[0], false);
                                      Curry._1(self[/* send */3], /* FocusSource */1);
                                      return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 8, [/* Display */0]));
                                    }), (function (ref) {
                                      return Curry._1(self[/* send */3], /* SetGeneralRef */Block.variant("SetGeneralRef", 0, [ref]));
                                    }), editor[/* query */2][/* placeholder */1], editor[/* query */2][/* value */0], interceptAndInsertKey, inputMethodHandle$2, settingsViewHandle, (function (status) {
                                      return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 3, [status]));
                                    }), /* array */[])));
              }),
            (function (param) {
                return initialState(editor, param);
              }),
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

function initialize(editor) {
  var element = document.createElement("article");
  ReactDom.render(ReasonReact.element(undefined, undefined, make(editor, updateRawBody$1, updateHeader$1, updateMode$1, updateMountTo$1, inquireQuery$1, interceptAndInsertKey$1, inputMethodHandle$1, settingsViewHandle$1, /* array */[])), element);
  return collection;
}

exports.EditorNotSet = EditorNotSet;
exports.Handle = Handle;
exports.initialState = initialState;
exports.createElement = createElement;
exports.mountPanel = mountPanel;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
exports.initialize = initialize;
/* component Not a pure module */
