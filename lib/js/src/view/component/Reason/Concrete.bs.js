// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var CommonPrim$AgdaMode = require("./CommonPrim.bs.js");

function pretty(part) {
  if (part) {
    return part[0];
  } else {
    return "_";
  }
}

var NamePart = /* module */Block.localModule(["pretty"], [pretty]);

function isUnderscore(name) {
  if (name.tag) {
    return true;
  } else {
    var match = name[1];
    if (match) {
      var match$1 = match[0];
      if (match$1 && !match[1]) {
        return match$1[0] === "_";
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
}

function pretty$1(name) {
  if (name.tag) {
    return "_";
  } else {
    return $$String.concat("", List.map(pretty, name[1]));
  }
}

var component = ReasonReact.statelessComponent("Name");

function make(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                return React.createElement("span", undefined, pretty$1(value));
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var Name = /* module */Block.localModule([
    "isUnderscore",
    "pretty",
    "component",
    "make"
  ], [
    isUnderscore,
    pretty$1,
    component,
    make
  ]);

function sepBy(sep, item) {
  if (item) {
    var xs = item[1];
    var x = item[0];
    if (xs) {
      return React.createElement(React.Fragment, undefined, x, $$Array.of_list(List.map((function (i) {
                            return React.createElement(React.Fragment, undefined, sep, i);
                          }), xs)));
    } else {
      return x;
    }
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

var component$1 = ReasonReact.statelessComponent("QName");

function make$1(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$1[/* debugName */0],
            component$1[/* reactClassInternal */1],
            component$1[/* handedOffState */2],
            component$1[/* willReceiveProps */3],
            component$1[/* didMount */4],
            component$1[/* didUpdate */5],
            component$1[/* willUnmount */6],
            component$1[/* willUpdate */7],
            component$1[/* shouldUpdate */8],
            (function () {
                return sepBy(".", List.map((function (n) {
                                  return ReasonReact.element(undefined, undefined, make(n, /* array */[]));
                                }), value));
              }),
            component$1[/* initialState */10],
            component$1[/* retainedProps */11],
            component$1[/* reducer */12],
            component$1[/* jsElementWrapped */13]
          ]);
}

var QName = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$1,
    make$1
  ]);

function appView(expr) {
  var arg = function (expr) {
    switch (expr.tag | 0) {
      case 8 : 
          return CommonPrim$AgdaMode.Arg[/* setArgInfoHiding */2](/* Hidden */0, CommonPrim$AgdaMode.Arg[/* default */0](expr[1]));
      case 9 : 
          return CommonPrim$AgdaMode.Arg[/* setArgInfoHiding */2](/* Instance */Block.simpleVariant("Instance", [/* NoOverlap */1]), CommonPrim$AgdaMode.Arg[/* default */0](expr[1]));
      default:
        return CommonPrim$AgdaMode.Arg[/* default */0](CommonPrim$AgdaMode.Named[/* unnamed */1](expr));
    }
  };
  switch (expr.tag | 0) {
    case 4 : 
        var match = expr[1];
        if (match) {
          return /* tuple */[
                  expr,
                  List.map(arg, match[1])
                ];
        } else {
          return /* tuple */[
                  expr,
                  /* [] */0
                ];
        }
    case 5 : 
        var param = appView(expr[1]);
        var arg$1 = expr[2];
        return /* tuple */[
                param[0],
                List.append(param[1], /* :: */Block.simpleVariant("::", [
                        arg$1,
                        /* [] */0
                      ]))
              ];
    default:
      return /* tuple */[
              expr,
              /* [] */0
            ];
  }
}

var component$2 = ReasonReact.statelessComponent("Expr");

function make$2(value, _, _$1) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$2[/* debugName */0],
            component$2[/* reactClassInternal */1],
            component$2[/* handedOffState */2],
            component$2[/* willReceiveProps */3],
            component$2[/* didMount */4],
            component$2[/* didUpdate */5],
            component$2[/* willUnmount */6],
            component$2[/* willUpdate */7],
            component$2[/* shouldUpdate */8],
            (function () {
                switch (value.tag | 0) {
                  case 0 : 
                      return ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[]));
                  case 5 : 
                      var match = appView(value);
                      var items_000 = ReasonReact.element(undefined, undefined, make$2(match[0], undefined, /* array */[]));
                      var items_001 = List.map((function (arg) {
                              return CommonPrim$AgdaMode.Arg[/* make */3](arg, 0, (function (named, prec) {
                                            return CommonPrim$AgdaMode.Named[/* make */3](named, prec, (function (expr, prec) {
                                                          return ReasonReact.element(undefined, undefined, make$2(expr, prec, /* array */[]));
                                                        }));
                                          }));
                            }), match[1]);
                      var items = /* :: */Block.simpleVariant("::", [
                          items_000,
                          items_001
                        ]);
                      return sepBy(" ", items);
                  default:
                    return React.createElement("span", undefined, "unimplemented");
                }
              }),
            component$2[/* initialState */10],
            component$2[/* retainedProps */11],
            component$2[/* reducer */12],
            component$2[/* jsElementWrapped */13]
          ]);
}

var Expr = /* module */Block.localModule([
    "appView",
    "component",
    "make"
  ], [
    appView,
    component$2,
    make$2
  ]);

exports.NamePart = NamePart;
exports.Name = Name;
exports.sepBy = sepBy;
exports.QName = QName;
exports.Expr = Expr;
/* component Not a pure module */
