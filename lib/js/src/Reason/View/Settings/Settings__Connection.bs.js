// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Editors$AgdaMode = require("../../Editors.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");

function initialState(param) {
  return /* record */Block.record(["connected"], [false]);
}

function reducer(action, _state) {
  return /* NoUpdate */0;
}

var component = ReasonReact.reducerComponent("Connection");

function make(editors, onConnectionEditorRef, hidden, querying, checked, toggleAgdaConnection, agdaConnected, agdaPath, agdaVersion, supportedProtocol, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("querying", querying, Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* :: */Block.simpleVariant("::", [
                                "agda-settings-connection",
                                /* [] */0
                              ]))));
                return React.createElement("section", {
                            className: className
                          }, React.createElement("form", undefined, React.createElement("ul", {
                                    className: "agda-settings-connection-dashboard"
                                  }, React.createElement("li", {
                                        id: "agda-settings-connection-agda"
                                      }, React.createElement("h2", undefined, React.createElement("label", {
                                                className: "input-label"
                                              }, React.createElement("span", undefined, "Connection to Agda"), React.createElement("input", {
                                                    className: "input-toggle",
                                                    checked: checked,
                                                    type: "checkbox",
                                                    onChange: toggleAgdaConnection
                                                  }))), React.createElement("div", undefined, React.createElement("p", undefined, "Connection: " + (
                                                agdaConnected ? "established" : "not established"
                                              )), React.createElement("p", undefined, "Established path: " + (
                                                agdaConnected ? agdaPath : "unknown"
                                              )), React.createElement("p", undefined, "Established path: " + (
                                                agdaConnected ? agdaVersion : "unknown"
                                              )), React.createElement("p", undefined, "Supported protocol: " + supportedProtocol), React.createElement("p", undefined, ReasonReact.element(undefined, undefined, MiniEditor$AgdaMode.make(atom.config.get("agda-mode.agdaPath"), "path to Agda", false, undefined, (function (result) {
                                                          atom.config.set("agda-mode.agdaPath", result);
                                                          return Editors$AgdaMode.Connection[/* answer */1](result, editors);
                                                        }), Caml_option.some((function () {
                                                              return /* () */0;
                                                            })), Caml_option.some((function () {
                                                              return /* () */0;
                                                            })), Caml_option.some((function () {
                                                              return /* () */0;
                                                            })), onConnectionEditorRef, /* array */[]))))))));
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
/* component Not a pure module */
