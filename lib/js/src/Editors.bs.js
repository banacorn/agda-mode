// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var MiniEditor$AgdaMode = require("./View/MiniEditor.bs.js");

var QueryCancelled = Caml_exceptions.create("Editors-AgdaMode.QueryCancelled");

function make(editor) {
  return /* record */Block.record([
            "focused",
            "source",
            "query"
          ], [
            0,
            editor,
            MiniEditor$AgdaMode.Model[/* make */0](/* () */0)
          ]);
}

function get(editors) {
  var match = editors[/* focused */0];
  if (match) {
    var match$1 = editors[/* query */2][/* ref */2];
    if (match$1 !== undefined) {
      return Caml_option.valFromOption(match$1);
    } else {
      return editors[/* source */1];
    }
  } else {
    return editors[/* source */1];
  }
}

function on(sort, editors) {
  if (sort) {
    Rebase.$$Option[/* forEach */8](MiniEditor$AgdaMode.focus, editors[/* query */2][/* ref */2]);
    editors[/* focused */0] = /* Query */1;
    return /* () */0;
  } else {
    atom.views.getView(editors[/* source */1]).focus();
    editors[/* focused */0] = /* Source */0;
    return /* () */0;
  }
}

var Focus = /* module */Block.localModule([
    "get",
    "on"
  ], [
    get,
    on
  ]);

function pointingAt(cursor, goals, editors) {
  var cursor_ = cursor !== undefined ? Caml_option.valFromOption(cursor) : editors[/* source */1].getCursorBufferPosition();
  var pointedGoals = Rebase.$$Array[/* filter */10]((function (goal) {
          return goal[/* range */2].containsPoint(cursor_);
        }), goals);
  return Rebase.$$Array[/* get */17](pointedGoals, 0);
}

exports.QueryCancelled = QueryCancelled;
exports.make = make;
exports.Focus = Focus;
exports.pointingAt = pointingAt;
/* MiniEditor-AgdaMode Not a pure module */
