// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Body$AgdaMode = require("./Body.bs.js");
var Context$AgdaMode = require("../Context.bs.js");
var Dashboard$AgdaMode = require("./Dashboard.bs.js");
var SizingHandle$AgdaMode = require("./SizingHandle.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "header",
            "body",
            "mountAt",
            "mode",
            "isPending",
            "settingsViewOn"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                ""
              ]),
            Block.record([
                "maxHeight",
                "raw"
              ], [
                170,
                0
              ]),
            0,
            0,
            false,
            false
          ]);
}

function reducer(action, state) {
  switch (action.tag | 0) {
    case 0 : 
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "mode",
                      "isPending",
                      "settingsViewOn"
                    ], [
                      action[0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* mode */3],
                      state[/* isPending */4],
                      state[/* settingsViewOn */5]
                    ])]);
    case 1 : 
        var init = state[/* body */1];
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "mode",
                      "isPending",
                      "settingsViewOn"
                    ], [
                      state[/* header */0],
                      Block.record([
                          "maxHeight",
                          "raw"
                        ], [
                          init[/* maxHeight */0],
                          Block.variant("RawJSON", 1, [action[0]])
                        ]),
                      state[/* mountAt */2],
                      state[/* mode */3],
                      state[/* isPending */4],
                      state[/* settingsViewOn */5]
                    ])]);
    case 2 : 
        var init$1 = state[/* body */1];
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "mode",
                      "isPending",
                      "settingsViewOn"
                    ], [
                      state[/* header */0],
                      Block.record([
                          "maxHeight",
                          "raw"
                        ], [
                          init$1[/* maxHeight */0],
                          Block.variant("RawEmacs", 0, [action[0]])
                        ]),
                      state[/* mountAt */2],
                      state[/* mode */3],
                      state[/* isPending */4],
                      state[/* settingsViewOn */5]
                    ])]);
    case 3 : 
        var init$2 = state[/* body */1];
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "mode",
                      "isPending",
                      "settingsViewOn"
                    ], [
                      state[/* header */0],
                      Block.record([
                          "maxHeight",
                          "raw"
                        ], [
                          action[0],
                          init$2[/* raw */1]
                        ]),
                      state[/* mountAt */2],
                      state[/* mode */3],
                      state[/* isPending */4],
                      state[/* settingsViewOn */5]
                    ])]);
    case 4 : 
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "mode",
                      "isPending",
                      "settingsViewOn"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* mode */3],
                      action[0],
                      state[/* settingsViewOn */5]
                    ])]);
    
  }
}

var component = ReasonReact.reducerComponent("Panel");

function make(updateHeader, updateJSONBody, updateEmacsBody, updateIsPending, onMountChange, onSettingsViewToggle, emit, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var mountAt = match[/* mountAt */2];
                Curry._1(updateHeader, (function (state) {
                        return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 0, [/* record */Block.record([
                                          "text",
                                          "style"
                                        ], [
                                          state.text,
                                          state.style
                                        ])]));
                      }));
                Curry._1(updateJSONBody, (function (state) {
                        return Curry._1(self[/* send */3], /* UpdateJSONBody */Block.variant("UpdateJSONBody", 1, [/* record */Block.record([
                                          "kind",
                                          "rawJSON",
                                          "rawString"
                                        ], [
                                          state.kind,
                                          state.rawJSON,
                                          state.rawString
                                        ])]));
                      }));
                Curry._1(updateEmacsBody, (function (state) {
                        return Curry._1(self[/* send */3], /* UpdateEmacsBody */Block.variant("UpdateEmacsBody", 2, [/* record */Block.record([
                                          "kind",
                                          "header",
                                          "body"
                                        ], [
                                          state.kind,
                                          state.header,
                                          state.body
                                        ])]));
                      }));
                Curry._1(updateIsPending, (function (state) {
                        return Curry._1(self[/* send */3], /* UpdateIsPending */Block.variant("UpdateIsPending", 4, [state.isPending]));
                      }));
                return React.createElement("section", undefined, React.createElement("section", {
                                className: "panel-heading agda-header-container"
                              }, ReasonReact.element(undefined, undefined, SizingHandle$AgdaMode.make((function (height) {
                                          return Curry._1(self[/* send */3], /* UpdateMaxHeight */Block.variant("UpdateMaxHeight", 3, [height]));
                                        }), (function (height) {
                                          setTimeout((function (param) {
                                                  Curry._1(self[/* send */3], /* UpdateMaxHeight */Block.variant("UpdateMaxHeight", 3, [height]));
                                                  atom.config.set("agda-mode.maxBodyHeight", String(height));
                                                  return /* () */0;
                                                }), 0);
                                          return /* () */0;
                                        }), mountAt === /* Bottom */0, /* array */[])), ReasonReact.element(undefined, undefined, Dashboard$AgdaMode.make(match[/* header */0], false, match[/* isPending */4], mountAt, (function (mountAt) {
                                          switch (mountAt) {
                                            case 0 : 
                                                return Curry._1(onMountChange, "bottom");
                                            case 1 : 
                                                return Curry._1(onMountChange, "pane");
                                            case 2 : 
                                                return Curry._1(onMountChange, "nowhere");
                                            
                                          }
                                        }), match[/* settingsViewOn */5], onSettingsViewToggle, /* array */[]))), React.createElement("section", {
                                className: "agda-body-container"
                              }, ReasonReact.element(undefined, undefined, Curry._2(Context$AgdaMode.Emitter[/* Provider */1][/* make */0], emit, /* array */[ReasonReact.element(undefined, undefined, Body$AgdaMode.make(match[/* body */1], match[/* mode */3] !== /* Display */0, mountAt === /* Bottom */0, /* array */[]))]))));
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.updateHeader, jsProps.updateJSONBody, jsProps.updateEmacsBody, jsProps.updateIsPending, jsProps.onMountChange, jsProps.onSettingsViewToggle, jsProps.emit, /* array */[]);
      }));

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
