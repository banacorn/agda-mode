// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Expect$BsChai = require("bs-chai/lib/js/src/Expect.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Event$AgdaMode = require("../src/Util/Event.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Webapi__Dom__Element = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__Element.js");

Mocha$BsMocha.describe("View")(undefined, undefined, undefined, (function (param) {
        Promise$BsMocha.before(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* activate */2]);
        return Mocha$BsMocha.describe("when activating agda-mode")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("should mount the panel at the bottom")(undefined, undefined, undefined, (function (param) {
                                    return Curry._1(Test__Util$AgdaMode.$$File[/* openAsset */1], "Blank1.agda").then((function (param) {
                                                        return Test__Util$AgdaMode.dispatch("agda-mode:load", param);
                                                      })).then(Test__Util$AgdaMode.getInstance).then((function (instance) {
                                                    return Async$AgdaMode.thenOk((function (param) {
                                                                    if (param !== undefined) {
                                                                      return Async$AgdaMode.resolve(Caml_option.valFromOption(param));
                                                                    } else {
                                                                      return Async$AgdaMode.reject(/* () */0);
                                                                    }
                                                                  }))(Event$AgdaMode.once(instance[/* view */2][/* handles */18][/* onPanelActivationChange */4]));
                                                  })).then((function (result) {
                                                  if (result.tag) {
                                                    Assert$BsMocha.fail("failed to activate the panel");
                                                  } else {
                                                    var element = result[0];
                                                    Curry._3(Expect$BsChai.Combos[/* End */34][/* to_be */1], undefined, "agda-mode", Chai.expect(element.className));
                                                    var panels = atom.workspace.getBottomPanels();
                                                    Assert$BsMocha.equal("there should be exactly 1 bottom panel", Rebase.$$Array[/* length */16](panels), 1);
                                                    var children = Rebase.$$Array[/* filterMap */23](Webapi__Dom__Element.ofNode, Rebase.$$Array[/* flatMap */5](Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], (function (prim) {
                                                                        return atom.views.getView(prim);
                                                                      }), (function (prim) {
                                                                        return prim.childNodes;
                                                                      })), (function (prim) {
                                                                    return Array.prototype.slice.call(prim);
                                                                  })), panels));
                                                    Curry._3(Expect$BsChai.Combos[/* End */34][/* to_include */4], undefined, element, Chai.expect(children));
                                                  }
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

/*  Not a pure module */
