// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");

function map(f, p) {
  return p.then((function (x) {
                return Promise.resolve(Curry._1(f, x));
              }));
}

function resolve(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function race(prim) {
  return Promise.race(prim);
}

function all(prim) {
  return Promise.all(prim);
}

function make(prim) {
  return new Promise(Curry.__2(prim));
}

function then_(prim, prim$1) {
  return prim$1.then(Curry.__1(prim));
}

function $$catch(prim, prim$1) {
  return prim$1.catch(Curry.__1(prim));
}

function thenDrop(f, x) {
  x.then((function (x$prime) {
          Curry._1(f, x$prime);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function $$finally(f, p) {
  var prim = p.then((function (param) {
          Curry._1(f, /* () */0);
          return Promise.resolve(/* () */0);
        }));
  prim.catch((function (param) {
          Curry._1(f, /* () */0);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function mapOk(f) {
  var partial_arg = Rebase.Result[/* map */0];
  var partial_arg$1 = function (param) {
    return partial_arg(f, param);
  };
  return (function (param) {
      return map(partial_arg$1, param);
    });
}

function thenOk(f) {
  return (function (param) {
      return param.then((function (param) {
                    if (param.tag) {
                      return Promise.resolve(/* Error */Block.variant("Error", 1, [param[0]]));
                    } else {
                      return Curry._1(f, param[0]);
                    }
                  }));
    });
}

function mapError(f) {
  var partial_arg = Rebase.Result[/* map2 */1];
  var partial_arg$1 = function (param) {
    return partial_arg((function (x) {
                  return x;
                }), f, param);
  };
  return (function (param) {
      return map(partial_arg$1, param);
    });
}

function thenError(f) {
  return (function (param) {
      return param.then((function (param) {
                    if (param.tag) {
                      return Curry._1(f, param[0]);
                    } else {
                      return Promise.resolve(/* Ok */Block.variant("Ok", 0, [param[0]]));
                    }
                  }));
    });
}

function recover(handler, promise) {
  return promise.then((function (param) {
                if (param.tag) {
                  return Curry._1(handler, param[0]);
                } else {
                  return Promise.resolve(param[0]);
                }
              }));
}

exports.map = map;
exports.resolve = resolve;
exports.reject = reject;
exports.race = race;
exports.all = all;
exports.make = make;
exports.then_ = then_;
exports.$$catch = $$catch;
exports.thenDrop = thenDrop;
exports.$$finally = $$finally;
exports.mapOk = mapOk;
exports.thenOk = thenOk;
exports.mapError = mapError;
exports.thenError = thenError;
exports.recover = recover;
/* No side effect */
