// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Parser$AgdaMode = require("../../src/Parser.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Connection$AgdaMode = require("../../src/Connection.bs.js");
var Test__Util$AgdaMode = require("../Test__Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function parseSExpression(breakpoints, input) {
  var output = /* record */Caml_chrome_debugger.record(["contents"], [[]]);
  var parser = Parser$AgdaMode.SExpression[/* makeIncr */5]((function (param) {
          if (param) {
            var match = param[0];
            if (match.tag) {
              return Assert$BsMocha.fail("Failed when parsing S-expression: " + Parser$AgdaMode.$$Error[/* toString */0](match[0]));
            } else {
              output[0].push(match[0]);
              return /* () */0;
            }
          } else {
            return /* () */0;
          }
        }));
  Rebase.$$Array[/* forEach */8]((function (param) {
          return Connection$AgdaMode.parseAgdaOutput(parser, param);
        }), Test__Util$AgdaMode.breakInput(breakpoints, input));
  return output[0];
}

Mocha$BsMocha.describe("when parsing S-expressions wholly")(undefined, undefined, undefined, (function (param) {
        return Rebase.$$Array[/* forEach */8]((function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    var partial_arg = /* array */[];
                                    var partial_arg$1 = function (param) {
                                      return parseSExpression(partial_arg, param);
                                    };
                                    var partial_arg$2 = Test__Util$AgdaMode.Golden[/* map */1];
                                    var partial_arg$3 = Test__Util$AgdaMode.serializeWith(Parser$AgdaMode.SExpression[/* toString */0]);
                                    var partial_arg$4 = Test__Util$AgdaMode.Golden[/* map */1];
                                    var partial_arg$5 = Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], (function (param) {
                                                return partial_arg$2(partial_arg$1, param);
                                              }), (function (param) {
                                                return partial_arg$4(partial_arg$3, param);
                                              })), Test__Util$AgdaMode.Golden[/* compare */3]);
                                    return Test__Util$AgdaMode.Golden[/* readFile */2](filepath).then(Curry.__1(partial_arg$5));
                                  }));
                    }), Test__Util$AgdaMode.getGoldenFilepathsSync("test/Parser/SExpression"));
      }));

Mocha$BsMocha.describe("when parsing S-expressions incrementally")(undefined, undefined, undefined, (function (param) {
        return Rebase.$$Array[/* forEach */8]((function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    var partial_arg = /* array */[
                                      3,
                                      23,
                                      1234,
                                      2342,
                                      3453
                                    ];
                                    var partial_arg$1 = function (param) {
                                      return parseSExpression(partial_arg, param);
                                    };
                                    var partial_arg$2 = Test__Util$AgdaMode.Golden[/* map */1];
                                    var partial_arg$3 = Test__Util$AgdaMode.serializeWith(Parser$AgdaMode.SExpression[/* toString */0]);
                                    var partial_arg$4 = Test__Util$AgdaMode.Golden[/* map */1];
                                    var partial_arg$5 = Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], (function (param) {
                                                return partial_arg$2(partial_arg$1, param);
                                              }), (function (param) {
                                                return partial_arg$4(partial_arg$3, param);
                                              })), Test__Util$AgdaMode.Golden[/* compare */3]);
                                    return Test__Util$AgdaMode.Golden[/* readFile */2](filepath).then(Curry.__1(partial_arg$5));
                                  }));
                    }), Test__Util$AgdaMode.getGoldenFilepathsSync("test/Parser/SExpression"));
      }));

exports.parseSExpression = parseSExpression;
/*  Not a pure module */
