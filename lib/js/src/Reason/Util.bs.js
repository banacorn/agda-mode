// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnhandledPromise = Caml_exceptions.create("Util-AgdaMode.UnhandledPromise");

function sepBy(sep, item) {
  if (item) {
    var xs = item[1];
    var x = item[0];
    if (xs) {
      return ReactDOMRe.createElementVariadic("span", undefined, Rebase.$$Array[/* fromList */13](/* :: */Block.simpleVariant("::", [
                        x,
                        Rebase.List[/* map */0]((function (i) {
                                return React.createElement(React.Fragment, undefined, sep, i);
                              }), xs)
                      ])));
    } else {
      return x;
    }
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

var React$1 = /* module */Block.localModule([
    "sepBy",
    "enclosedBy"
  ], [
    sepBy,
    enclosedBy
  ]);

function add(x, self) {
  return /* :: */Block.simpleVariant("::", [
            x,
            self
          ]);
}

function addWhen(x, p, self) {
  if (p) {
    return /* :: */Block.simpleVariant("::", [
              x,
              self
            ]);
  } else {
    return self;
  }
}

var partial_arg = Rebase.$$String[/* joinWith */11];

function serialize(param) {
  return partial_arg(" ", param);
}

var ClassName = /* module */Block.localModule([
    "add",
    "addWhen",
    "serialize"
  ], [
    add,
    addWhen,
    serialize
  ]);

function catMaybes(xs) {
  return Rebase.$$Array[/* fromList */13](Rebase.$$Array[/* reduceRight */4]((function (acc, x) {
                    if (x !== undefined) {
                      return /* :: */Block.simpleVariant("::", [
                                Caml_option.valFromOption(x),
                                acc
                              ]);
                    } else {
                      return acc;
                    }
                  }), /* [] */0, xs));
}

function partite(p, xs) {
  var indices = Rebase.$$Array[/* map */0]((function (prim) {
          return prim[1];
        }), Rebase.$$Array[/* filter */10]((function (param) {
              return Curry._1(p, param[0]);
            }), Rebase.$$Array[/* mapi */27]((function (x, i) {
                  return /* tuple */[
                          x,
                          i
                        ];
                }), xs)));
  var match = Rebase.$$Array[/* get */17](indices, 0);
  var indicesWF;
  if (match !== undefined) {
    var match$1 = match === 0;
    indicesWF = match$1 ? indices : Rebase.$$Array[/* concat */11](indices, /* array */[0]);
  } else {
    var match$2 = Rebase.$$Array[/* length */16](indices) === 0;
    indicesWF = match$2 ? /* array */[0] : indices;
  }
  var intervals = Rebase.$$Array[/* mapi */27]((function (index, n) {
          var match = Rebase.$$Array[/* get */17](indicesWF, n + 1 | 0);
          if (match !== undefined) {
            return /* tuple */[
                    index,
                    match
                  ];
          } else {
            return /* tuple */[
                    index,
                    Rebase.$$Array[/* length */16](xs)
                  ];
          }
        }), indicesWF);
  return Rebase.$$Array[/* map */0]((function (param) {
                return Rebase.$$Array[/* slice */25](param[0], param[1], xs);
              }), intervals);
}

function mergeWithNext(p) {
  var partial_arg = /* array */[];
  var partial_arg$1 = Rebase.$$Array[/* reduce */3];
  return (function (param) {
      return partial_arg$1((function (acc, x) {
                    var last = Rebase.$$Array[/* get */17](acc, Rebase.$$Array[/* length */16](acc) - 1 | 0);
                    if (last !== undefined) {
                      var l = last;
                      if (Curry._1(p, l)) {
                        Rebase.$$Array[/* set */18](acc, Rebase.$$Array[/* length */16](acc) - 1 | 0, Rebase.$$Array[/* concat */11](x, l));
                        return acc;
                      } else {
                        return Rebase.$$Array[/* concat */11](/* array */[x], acc);
                      }
                    } else {
                      return /* array */[x];
                    }
                  }), partial_arg, param);
    });
}

var Array_ = /* module */Block.localModule([
    "catMaybes",
    "partite",
    "mergeWithNext"
  ], [
    catMaybes,
    partite,
    mergeWithNext
  ]);

function partite$1(tagEntry, xs) {
  var keys = Rebase.$$Array[/* filterMap */23]((function (param) {
          var i = param[1];
          return Rebase.Option[/* map */0]((function (key) {
                        return /* tuple */[
                                key,
                                i
                              ];
                      }), Curry._1(tagEntry, /* tuple */[
                          param[0],
                          i
                        ]));
        }), Rebase.$$Array[/* mapi */27]((function (x, i) {
              return /* tuple */[
                      x,
                      i
                    ];
            }), xs));
  var intervals = Rebase.$$Array[/* mapi */27]((function (param, n) {
          var index = param[1];
          var key = param[0];
          var match = Rebase.$$Array[/* get */17](keys, n + 1 | 0);
          if (match !== undefined) {
            return /* tuple */[
                    key,
                    index,
                    match[1]
                  ];
          } else {
            return /* tuple */[
                    key,
                    index,
                    Rebase.$$Array[/* length */16](xs)
                  ];
          }
        }), keys);
  return Js_dict.fromArray(Rebase.$$Array[/* map */0]((function (param) {
                    return /* tuple */[
                            param[0],
                            Rebase.$$Array[/* slice */25](param[1], param[2], xs)
                          ];
                  }), intervals));
}

function split(key, splitter, dict) {
  var match = Js_dict.get(dict, key);
  if (match !== undefined) {
    Rebase.$$Array[/* forEach */8]((function (param) {
            dict[param[0]] = param[1];
            return /* () */0;
          }), Js_dict.entries(Curry._1(splitter, match)));
    return dict;
  } else {
    return dict;
  }
}

function update(key, f, dict) {
  var match = Js_dict.get(dict, key);
  if (match !== undefined) {
    dict[key] = Curry._1(f, Caml_option.valFromOption(match));
    return dict;
  } else {
    return dict;
  }
}

var Dict = /* module */Block.localModule([
    "partite",
    "split",
    "update"
  ], [
    partite$1,
    split,
    update
  ]);

function captures(re, x) {
  return Rebase.Option[/* map */0]((function (result) {
                return Rebase.$$Array[/* map */0]((function (prim) {
                              if (prim == null) {
                                return undefined;
                              } else {
                                return Caml_option.some(prim);
                              }
                            }), result);
              }), Caml_option.null_to_opt(re.exec(x)));
}

function parse(parser, raw) {
  if (parser.tag) {
    return Curry._1(parser[0], raw);
  } else {
    return Rebase.Option[/* flatMap */5](parser[1], captures(parser[0], raw));
  }
}

function parseArray(parser, xs) {
  return catMaybes(Rebase.$$Array[/* map */0]((function (raw) {
                    return parse(parser, raw);
                  }), xs));
}

function at(i, parser, captured) {
  if (i >= Rebase.$$Array[/* length */16](captured)) {
    return undefined;
  } else {
    return Rebase.Option[/* flatMap */5]((function (param) {
                  return parse(parser, param);
                }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, i)));
  }
}

function choice(res) {
  return /* String */Block.variant("String", 1, [(function (raw) {
                return Rebase.$$Array[/* reduce */3]((function (result, parser) {
                              if (result !== undefined) {
                                return Caml_option.some(Caml_option.valFromOption(result));
                              } else {
                                return parse(parser, raw);
                              }
                            }), undefined, res);
              })]);
}

var Parser = /* module */Block.localModule([
    "captures",
    "parse",
    "parseArray",
    "at",
    "choice"
  ], [
    captures,
    parse,
    parseArray,
    at,
    choice
  ]);

function sepBy$1(sep, item) {
  if (item) {
    return /* :: */Block.simpleVariant("::", [
              item[0],
              Rebase.List[/* flatMap */5]((function (i) {
                      return /* :: */Block.simpleVariant("::", [
                                sep,
                                /* :: */Block.simpleVariant("::", [
                                    i,
                                    /* [] */0
                                  ])
                              ]);
                    }), item[1])
            ]);
  } else {
    return /* [] */0;
  }
}

function init(xs) {
  if (xs) {
    var xs$1 = xs[1];
    if (xs$1) {
      return /* :: */Block.simpleVariant("::", [
                xs[0],
                init(xs$1)
              ]);
    } else {
      return /* [] */0;
    }
  } else {
    return Pervasives.failwith("init on empty list");
  }
}

function last(_xs) {
  while(true) {
    var xs = _xs;
    if (xs) {
      var xs$1 = xs[1];
      if (xs$1) {
        _xs = xs$1;
        continue ;
      } else {
        return xs[0];
      }
    } else {
      return Pervasives.failwith("last on empty list");
    }
  };
}

function span(p, xs) {
  if (xs) {
    var xs$1 = xs[1];
    var x = xs[0];
    if (Curry._1(p, x)) {
      var match = span(p, xs$1);
      return /* tuple */[
              /* :: */Block.simpleVariant("::", [
                  x,
                  match[0]
                ]),
              match[1]
            ];
    } else {
      return /* tuple */[
              /* [] */0,
              xs$1
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            /* [] */0
          ];
  }
}

function dropWhile(p, _xs) {
  while(true) {
    var xs = _xs;
    if (xs) {
      var xs$1 = xs[1];
      var x = xs[0];
      if (Curry._1(p, x)) {
        _xs = xs$1;
        continue ;
      } else {
        return /* :: */Block.simpleVariant("::", [
                  x,
                  xs$1
                ]);
      }
    } else {
      return /* [] */0;
    }
  };
}

var List_ = /* module */Block.localModule([
    "sepBy",
    "init",
    "last",
    "span",
    "dropWhile"
  ], [
    sepBy$1,
    init,
    last,
    span,
    dropWhile
  ]);

function toCharArray(input) {
  return input.split("");
}

function indexOf(needle, haystack) {
  var n = haystack.indexOf(needle);
  if (n !== -1) {
    return n;
  }
  
}

function lastIndexOf(needle, haystack) {
  var n = haystack.lastIndexOf(needle);
  if (n !== -1) {
    return n;
  }
  
}

function indentedBy(s) {
  var n = 0;
  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){
    var match = s.charAt(i);
    var exit = 0;
    switch (match) {
      case "\t" : 
      case "\n" : 
      case "\f" : 
      case "\r" : 
      case " " : 
          exit = 1;
          break;
      default:
        
    }
    if (exit === 1) {
      if (i === n) {
        n = n + 1 | 0;
      }
      
    }
    
  }
  return n;
}

var $$String = /* module */Block.localModule([
    "toCharArray",
    "indexOf",
    "lastIndexOf",
    "indentedBy"
  ], [
    toCharArray,
    indexOf,
    lastIndexOf,
    indentedBy
  ]);

function make(param) {
  var resource = /* record */Block.record(["contents"], [undefined]);
  var queue = /* record */Block.record(["contents"], [0]);
  var acquire = function (param) {
    var match = resource[0];
    if (match !== undefined) {
      return Promise.resolve(Caml_option.valFromOption(match));
    } else {
      return new Promise((function (resolve, param) {
                    queue[0] = /* :: */Block.simpleVariant("::", [
                        resolve,
                        queue[0]
                      ]);
                    return /* () */0;
                  }));
    }
  };
  var supply = function (x) {
    resource[0] = Caml_option.some(x);
    return Rebase.List[/* forEach */8]((function (resolve) {
                  return resolve(x);
                }), queue[0]);
  };
  return /* record */Block.record([
            "acquire",
            "supply"
          ], [
            acquire,
            supply
          ]);
}

var Resource = /* module */Block.localModule(["make"], [make]);

function map(f, p) {
  return p.then((function (x) {
                return Promise.resolve(Curry._1(f, x));
              }));
}

function resolve(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function race(prim) {
  return Promise.race(prim);
}

function all(prim) {
  return Promise.all(prim);
}

function make$1(prim) {
  return new Promise(Curry.__2(prim));
}

function then_(prim, prim$1) {
  return prim$1.then(Curry.__1(prim));
}

function $$catch(prim, prim$1) {
  return prim$1.catch(Curry.__1(prim));
}

function thenDrop(f, x) {
  x.then((function (x$prime) {
          Curry._1(f, x$prime);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var $$Promise$1 = /* module */Block.localModule([
    "map",
    "resolve",
    "reject",
    "race",
    "all",
    "make",
    "then_",
    "catch",
    "thenDrop"
  ], [
    map,
    resolve,
    reject,
    race,
    all,
    make$1,
    then_,
    $$catch,
    thenDrop
  ]);

var JSPromiseError = Caml_exceptions.create("Util-AgdaMode.JSPromiseError");

function make$2(param) {
  var resolvers = /* record */Block.record(["contents"], [0]);
  var rejecters = /* record */Block.record(["contents"], [0]);
  var wire = function (param) {
    return new Promise((function (resolve, reject) {
                  resolvers[0] = /* :: */Block.simpleVariant("::", [
                      resolve,
                      resolvers[0]
                    ]);
                  rejecters[0] = /* :: */Block.simpleVariant("::", [
                      reject,
                      rejecters[0]
                    ]);
                  return /* () */0;
                }));
  };
  var cleanup = function (param) {
    resolvers[0] = /* [] */0;
    rejecters[0] = /* [] */0;
    return /* () */0;
  };
  var resolve = function (value) {
    Rebase.List[/* forEach */8]((function (resolver) {
            return resolver(value);
          }), resolvers[0]);
    return cleanup(/* () */0);
  };
  var reject = function (exn) {
    Rebase.List[/* forEach */8]((function (rejecter) {
            return rejecter(exn);
          }), rejecters[0]);
    return cleanup(/* () */0);
  };
  var handlePromise = function (p) {
    p.then((function (x) {
              return Promise.resolve(resolve(x));
            })).catch((function (err) {
            reject([
                  JSPromiseError,
                  err
                ]);
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  };
  return /* record */Block.record([
            "wire",
            "handlePromise",
            "resolve",
            "reject"
          ], [
            wire,
            handlePromise,
            resolve,
            reject
          ]);
}

var TelePromise = /* module */Block.localModule(["make"], [make$2]);

function make$3(resolve, reject, id) {
  return /* record */Block.record([
            "resolve",
            "reject",
            "id"
          ], [
            resolve,
            reject,
            id
          ]);
}

var Listener = /* module */Block.localModule(["make"], [make$3]);

function make$4(param) {
  return /* record */Block.record([
            "counter",
            "listeners"
          ], [
            Block.record(["contents"], [0]),
            { }
          ]);
}

function removeListener(_id, _self) {
  return (delete _self[1][String(_id)]);
}

function removeListener$prime(_id, _self) {
  return (delete _self[1][_id]);
}

function removeAllListeners(self) {
  return Rebase.$$Array[/* forEach */8]((function (id) {
                return removeListener$prime(id, self);
              }), Object.keys(self[/* listeners */1]));
}

function listen(resolve, self) {
  var id = self[/* counter */0][0] + 1 | 0;
  self[/* counter */0][0] = id;
  var listener_000 = Curry.__1(resolve);
  var listener_001 = function (param) {
    return /* () */0;
  };
  var listener = /* record */Block.record([
      "resolve",
      "reject",
      "id"
    ], [
      listener_000,
      listener_001,
      id
    ]);
  self[/* listeners */1][String(id)] = listener;
  return (function (param) {
      return removeListener(id, self);
    });
}

function destroyWhen(trigger, destructor) {
  return Curry._1(trigger, destructor);
}

function once(self) {
  var id = self[/* counter */0][0] + 1 | 0;
  self[/* counter */0][0] = id;
  return new Promise((function (resolve, reject) {
                var resolve$prime = function (x) {
                  resolve(x);
                  return removeListener(id, self);
                };
                var reject$prime = function (x) {
                  reject(x);
                  return removeListener(id, self);
                };
                var listener = /* record */Block.record([
                    "resolve",
                    "reject",
                    "id"
                  ], [
                    resolve$prime,
                    reject$prime,
                    id
                  ]);
                self[/* listeners */1][String(id)] = listener;
                return /* () */0;
              }));
}

function resolve$1(x, self) {
  return Rebase.$$Array[/* forEach */8]((function (listener) {
                return listener[/* resolve */0](x);
              }), Js_dict.values(self[/* listeners */1]));
}

function reject$1(x, self) {
  return Rebase.$$Array[/* forEach */8]((function (listener) {
                return listener[/* reject */1](x);
              }), Js_dict.values(self[/* listeners */1]));
}

function handlePromise(p, self) {
  p.then((function (x) {
            return Promise.resolve(resolve$1(x, self));
          })).catch((function (err) {
          reject$1([
                JSPromiseError,
                err
              ], self);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var Event = /* module */Block.localModule([
    "Listener",
    "make",
    "removeListener",
    "removeListener'",
    "removeAllListeners",
    "listen",
    "destroyWhen",
    "on",
    "once",
    "resolve",
    "reject",
    "handlePromise"
  ], [
    Listener,
    make$4,
    removeListener,
    removeListener$prime,
    removeAllListeners,
    listen,
    destroyWhen,
    listen,
    once,
    resolve$1,
    reject$1,
    handlePromise
  ]);

function toString(_e) {
  return (_e.toString());
}

var JSError = /* module */Block.localModule(["toString"], [toString]);

var OCamlString = 0;

exports.OCamlString = OCamlString;
exports.UnhandledPromise = UnhandledPromise;
exports.React = React$1;
exports.ClassName = ClassName;
exports.Array_ = Array_;
exports.Dict = Dict;
exports.Parser = Parser;
exports.List_ = List_;
exports.$$String = $$String;
exports.Resource = Resource;
exports.$$Promise = $$Promise$1;
exports.JSPromiseError = JSPromiseError;
exports.TelePromise = TelePromise;
exports.Event = Event;
exports.JSError = JSError;
/* react Not a pure module */
