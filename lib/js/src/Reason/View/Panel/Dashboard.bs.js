// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "settingsButtonRef",
            "dockingButtonRef",
            "settingsView"
          ], [
            Block.record(["contents"], [undefined]),
            Block.record(["contents"], [undefined]),
            false
          ]);
}

function reducer(action, state) {
  if (action) {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "settingsButtonRef",
                  "dockingButtonRef",
                  "settingsView"
                ], [
                  state[/* settingsButtonRef */0],
                  state[/* dockingButtonRef */1],
                  false
                ])]);
  } else {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "settingsButtonRef",
                  "dockingButtonRef",
                  "settingsView"
                ], [
                  state[/* settingsButtonRef */0],
                  state[/* dockingButtonRef */1],
                  true
                ])]);
  }
}

function setSettingsButtonRef(r, param) {
  param[/* state */1][/* settingsButtonRef */0][0] = (r == null) ? undefined : Caml_option.some(r);
  return /* () */0;
}

function setDockingButtonRef(r, param) {
  param[/* state */1][/* dockingButtonRef */1][0] = (r == null) ? undefined : Caml_option.some(r);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("Dashboard");

function make(header, hidden, isPending, mountAt, onMountAtChange, onSettingsViewToggle, activateSettingsView, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                Curry._1(activateSettingsView, (function (open_) {
                        return Curry._1(self[/* send */3], open_ ? /* SettingsViewOn */0 : /* SettingsViewOff */1);
                      }));
                var match = self[/* state */1][/* settingsButtonRef */0][0];
                if (match !== undefined) {
                  var disposables = new Atom.CompositeDisposable();
                  disposables.add(atom.tooltips.add(atom.views.getView(Caml_option.valFromOption(match)), {
                            title: "settings",
                            delay: {
                              show: 100,
                              hide: 1000
                            }
                          }));
                  Curry._1(self[/* onUnmount */4], (function (param) {
                          disposables.dispose();
                          return /* () */0;
                        }));
                }
                var match$1 = self[/* state */1][/* dockingButtonRef */1][0];
                if (match$1 !== undefined) {
                  var disposables$1 = new Atom.CompositeDisposable();
                  disposables$1.add(atom.tooltips.add(atom.views.getView(Caml_option.valFromOption(match$1)), {
                            title: "toggle panel docking position",
                            delay: {
                              show: 300,
                              hide: 1000
                            },
                            keyBindingCommand: "agda-mode:toggle-docking"
                          }));
                  return Curry._1(self[/* onUnmount */4], (function (param) {
                                disposables$1.dispose();
                                return /* () */0;
                              }));
                } else {
                  return /* () */0;
                }
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var classList = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* :: */Block.simpleVariant("::", [
                            "agda-header",
                            /* [] */0
                          ])));
                var headerClassList = "text-" + header[/* style */1];
                var spinnerClassList = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("pending", isPending, /* :: */Block.simpleVariant("::", [
                            "loading",
                            /* :: */Block.simpleVariant("::", [
                                "loading-spinner-tiny",
                                /* :: */Block.simpleVariant("::", [
                                    "inline-block",
                                    /* [] */0
                                  ])
                              ])
                          ])));
                var settingsViewClassList = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("activated", self[/* state */1][/* settingsView */2], /* :: */Block.simpleVariant("::", [
                            "no-btn",
                            /* [] */0
                          ])));
                var tmp;
                tmp = mountAt.tag ? true : false;
                var toggleMountingPosition = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("activated", tmp, /* :: */Block.simpleVariant("::", [
                            "no-btn",
                            /* [] */0
                          ])));
                return React.createElement("div", {
                            className: classList
                          }, React.createElement("h1", {
                                className: headerClassList
                              }, header[/* text */0]), React.createElement("ul", {
                                className: "agda-dashboard"
                              }, React.createElement("li", undefined, React.createElement("span", {
                                        className: spinnerClassList,
                                        id: "spinner"
                                      })), React.createElement("li", undefined, React.createElement("button", {
                                        ref: Curry._1(self[/* handle */0], setSettingsButtonRef),
                                        className: settingsViewClassList,
                                        onClick: Curry._1(self[/* handle */0], (function (param, self) {
                                                if (self[/* state */1][/* settingsView */2]) {
                                                  Curry._1(onSettingsViewToggle, false);
                                                  return Curry._1(self[/* send */3], /* SettingsViewOff */1);
                                                } else {
                                                  Curry._1(onSettingsViewToggle, true);
                                                  return Curry._1(self[/* send */3], /* SettingsViewOn */0);
                                                }
                                              }))
                                      }, React.createElement("span", {
                                            className: "icon icon-settings"
                                          }))), React.createElement("li", undefined, React.createElement("button", {
                                        ref: Curry._1(self[/* handle */0], setDockingButtonRef),
                                        className: toggleMountingPosition,
                                        onClick: (function (param) {
                                            if (mountAt.tag) {
                                              return Curry._1(onMountAtChange, /* ToBottom */0);
                                            } else {
                                              return Curry._1(onMountAtChange, /* ToPane */1);
                                            }
                                          })
                                      }, React.createElement("span", {
                                            className: "icon icon-versions"
                                          })))));
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

exports.initialState = initialState;
exports.reducer = reducer;
exports.setSettingsButtonRef = setSettingsButtonRef;
exports.setDockingButtonRef = setDockingButtonRef;
exports.component = component;
exports.make = make;
/* component Not a pure module */
