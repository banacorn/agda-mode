// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Util$AgdaMode = require("./Util.bs.js");

function concatLines(lines) {
  var newLineIndices = $$Array.map((function (param) {
          return param[2];
        }), lines.map((function (line, index) {
                if (lines.length > (index + 1 | 0)) {
                  return /* tuple */[
                          line,
                          Caml_array.caml_array_get(lines, index + 1 | 0),
                          index
                        ];
                } else {
                  return /* tuple */[
                          line,
                          undefined,
                          index
                        ];
                }
              })).filter((function (param) {
              var line = param[0];
              var nextLine = param[1];
              var sort = (/^Sort \S*/);
              var completeJudgement = (/^[^\(\{\s]+\s+\:\s* \S*/);
              var reallyLongTermIdentifier = (/^\S+$/);
              var restOfTheJudgement = (/^\s*\:\s* \S*/);
              if (sort.test(line) || reallyLongTermIdentifier.test(line) && Js_option.isSomeValue((function (_, line) {
                        return restOfTheJudgement.test(line);
                      }), "", nextLine)) {
                return true;
              } else {
                return completeJudgement.test(line);
              }
            })));
  return $$Array.map((function (param) {
                return $$String.concat("\n", $$Array.to_list(lines.slice(param[0], param[1])));
              }), newLineIndices.map((function (index, i) {
                    if (newLineIndices.length === (i + 1 | 0)) {
                      return /* tuple */[
                              index,
                              newLineIndices.length + 1 | 0
                            ];
                    } else {
                      return /* tuple */[
                              index,
                              Caml_array.caml_array_get(newLineIndices, i + 1 | 0)
                            ];
                    }
                  })));
}

function allGoalsWarningsOld(title, body) {
  var shitpile = concatLines(body.split("\n"));
  var hasMetas = Js_option.isSome(Js_primitive.null_to_opt(title.match((/Goals/))));
  var hasWarnings = Js_option.isSome(Js_primitive.null_to_opt(title.match((/Warnings/))));
  var hasErrors = Js_option.isSome(Js_primitive.null_to_opt(title.match((/Errors/))));
  var indexOfWarnings = shitpile.findIndex((function (s) {
          return Js_option.isSome(Js_primitive.null_to_opt(s.slice(5, 13).match((/Warnings/))));
        }));
  var indexOfErrors = shitpile.findIndex((function (s) {
          return Js_option.isSome(Js_primitive.null_to_opt(s.slice(5, 11).match((/Errors/))));
        }));
  if (hasMetas) {
    if (hasWarnings) {
      if (hasErrors) {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  shitpile.slice(0, indexOfWarnings),
                  shitpile.slice(indexOfWarnings + 1 | 0, indexOfErrors),
                  shitpile.slice(indexOfErrors + 1 | 0)
                ]);
      } else {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  shitpile.slice(0, indexOfWarnings),
                  shitpile.slice(indexOfWarnings + 1 | 0),
                  []
                ]);
      }
    } else if (hasErrors) {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                shitpile.slice(0, indexOfErrors),
                [],
                shitpile.slice(indexOfErrors + 1 | 0)
              ]);
    } else {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                shitpile,
                [],
                []
              ]);
    }
  } else if (hasWarnings) {
    if (hasErrors) {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                [],
                shitpile.slice(0, indexOfErrors),
                shitpile.slice(indexOfErrors + 1 | 0)
              ]);
    } else {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                [],
                shitpile,
                []
              ]);
    }
  } else if (hasErrors) {
    return /* record */Block.record([
              "metas",
              "warnings",
              "errors"
            ], [
              [],
              [],
              shitpile
            ]);
  } else {
    return /* record */Block.record([
              "metas",
              "warnings",
              "errors"
            ], [
              [],
              [],
              []
            ]);
  }
}

var filepath = /* String */Block.variant("String", 1, [(function (raw) {
        var parsed = Path.parse(raw.replace("\n", ""));
        var joined = $$String.concat("/", $$Array.to_list(Path.join(parsed.dir, parsed.base).split(Path.sep)));
        if (joined.charCodeAt(0) === 8234.0) {
          return Js_option.some(joined.slice(1).trim());
        } else {
          return Js_option.some(joined.trim());
        }
      })]);

var exprs = /* String */Block.variant("String", 1, [(function (raw) {
        var tokens = raw.split((/(\?\d+)|(\_[^\.][^\}\)\s]*)/));
        return Js_option.some(tokens.map((function (token, i) {
                          if (i !== 1) {
                            if (i !== 2) {
                              return /* Plain */Block.variant("Plain", 0, [token]);
                            } else {
                              return /* Underscore */Block.variant("Underscore", 2, [token]);
                            }
                          } else {
                            return /* QuestionMark */Block.variant("QuestionMark", 1, [token]);
                          }
                        })));
      })]);

var ofType_000 = (/^([^\:]*) \: ((?:\n|.)+)/);

function ofType_001(captured) {
  return Util$AgdaMode.Option[/* bind */0]((function (type_) {
                return Util$AgdaMode.Option[/* bind */0]((function (term) {
                              return /* OfType */Block.variant("OfType", 0, [
                                        term,
                                        type_
                                      ]);
                            }), Util$AgdaMode.Re_[/* at */2](2, exprs, captured));
              }), Util$AgdaMode.Re_[/* at */2](1, exprs, captured));
}

var ofType = /* Regex */Block.variant("Regex", 0, [
    ofType_000,
    ofType_001
  ]);

var justType_000 = (/^Type ((?:\n|.)+)/);

function justType_001(captured) {
  return Util$AgdaMode.Option[/* map */1]((function (type_) {
                return /* JustType */Block.variant("JustType", 1, [type_]);
              }), Util$AgdaMode.Re_[/* at */2](1, exprs, captured));
}

var justType = /* Regex */Block.variant("Regex", 0, [
    justType_000,
    justType_001
  ]);

var justSort_000 = (/^Sort ((?:\n|.)+)/);

function justSort_001(captured) {
  return Util$AgdaMode.Option[/* map */1]((function (sort) {
                return /* JustSort */Block.variant("JustSort", 2, [sort]);
              }), Util$AgdaMode.Re_[/* at */2](1, exprs, captured));
}

var justSort = /* Regex */Block.variant("Regex", 0, [
    justSort_000,
    justSort_001
  ]);

var others = /* String */Block.variant("String", 1, [(function (raw) {
        return Util$AgdaMode.Option[/* map */1]((function (raw$prime) {
                      return /* Others */Block.variant("Others", 3, [raw$prime]);
                    }), Util$AgdaMode.Re_[/* parse */1](exprs, raw));
      })]);

var all = Util$AgdaMode.Re_[/* choice */3](/* array */[
      ofType,
      justType,
      justSort,
      others
    ]);

var Meta = /* module */Block.localModule([
    "ofType",
    "justType",
    "justSort",
    "others",
    "all"
  ], [
    ofType,
    justType,
    justSort,
    others,
    all
  ]);

function occurence(captured) {
  return Util$AgdaMode.Option[/* bind */0]((function (meta) {
                var rowStart = Caml_format.caml_int_of_string(Js_option.getWithDefault(Js_option.getWithDefault("0", Caml_array.caml_array_get(captured, 7)), Caml_array.caml_array_get(captured, 3)));
                var rowEnd = Caml_format.caml_int_of_string(Js_option.getWithDefault(Js_option.getWithDefault("0", Caml_array.caml_array_get(captured, 7)), Caml_array.caml_array_get(captured, 5)));
                var colStart = Caml_format.caml_int_of_string(Js_option.getWithDefault(Js_option.getWithDefault("0", Caml_array.caml_array_get(captured, 8)), Caml_array.caml_array_get(captured, 4)));
                var colEnd = Caml_format.caml_int_of_string(Js_option.getWithDefault(Js_option.getWithDefault("0", Caml_array.caml_array_get(captured, 9)), Caml_array.caml_array_get(captured, 6)));
                var start = /* record */Block.record([
                    "pos",
                    "line",
                    "col"
                  ], [
                    undefined,
                    rowStart,
                    colStart
                  ]);
                var end_ = /* record */Block.record([
                    "pos",
                    "line",
                    "col"
                  ], [
                    undefined,
                    rowEnd,
                    colEnd
                  ]);
                return Util$AgdaMode.Option[/* map */1]((function (parsedOutputConstraint) {
                              var path = Util$AgdaMode.Re_[/* at */2](2, filepath, captured);
                              return /* IsHiddenMeta */Block.variant("IsHiddenMeta", 0, [
                                        parsedOutputConstraint,
                                        /* Range */Block.simpleVariant("Range", [
                                            path,
                                            /* :: */Block.simpleVariant("::", [
                                                /* record */Block.record([
                                                    "start",
                                                    "end_"
                                                  ], [
                                                    start,
                                                    end_
                                                  ]),
                                                /* [] */0
                                              ])
                                          ])
                                      ]);
                            }), Util$AgdaMode.Re_[/* parse */1](all, meta));
              }), Caml_array.caml_array_get(captured, 1));
}

function allGoalsWarnings(title, body) {
  var metas = $$Array.map((function (raw) {
          return Util$AgdaMode.Re_[/* parse */1](Util$AgdaMode.Re_[/* choice */3](/* array */[
                          /* Regex */Block.variant("Regex", 0, [
                              (/((?:\n|.)*\S+)\s*\[ at (.+):(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+)) \]/),
                              occurence
                            ]),
                          /* String */Block.variant("String", 1, [(function (raw) {
                                  return Util$AgdaMode.Option[/* map */1]((function (x) {
                                                return /* NotHiddenMeta */Block.variant("NotHiddenMeta", 1, [x]);
                                              }), Util$AgdaMode.Re_[/* parse */1](all, raw));
                                })])
                        ]), raw);
        }), allGoalsWarningsOld(title, body)[/* metas */0]);
  console.log(metas);
  return /* () */0;
}

function goalTypeContext(body) {
  var shitpile = concatLines(body.split("\n"));
  var indexOfHave = shitpile.findIndex((function (s) {
          return Js_option.isSome(Js_primitive.null_to_opt(s.match((/^Have/))));
        }));
  var indexOfDelimeter = shitpile.findIndex((function (s) {
          return Js_option.isSome(Js_primitive.null_to_opt(s.match((/\u2014{60}/g))));
        }));
  var parseGoalOrHave = function (lines) {
    return $$String.concat("\n", $$Array.to_list(lines)).slice(5);
  };
  if (indexOfHave === -1) {
    return /* record */Block.record([
              "goal",
              "have",
              "metas"
            ], [
              parseGoalOrHave(shitpile.slice(0, indexOfDelimeter)),
              undefined,
              shitpile.slice(indexOfDelimeter + 1 | 0)
            ]);
  } else {
    return /* record */Block.record([
              "goal",
              "have",
              "metas"
            ], [
              parseGoalOrHave(shitpile.slice(0, indexOfHave)),
              parseGoalOrHave(shitpile.slice(indexOfHave, indexOfDelimeter)),
              shitpile.slice(indexOfDelimeter + 1 | 0)
            ]);
  }
}

var Parser = /* module */Block.localModule([
    "concatLines",
    "allGoalsWarningsOld",
    "filepath",
    "exprs",
    "Meta",
    "occurence",
    "allGoalsWarnings",
    "goalTypeContext"
  ], [
    concatLines,
    allGoalsWarningsOld,
    filepath,
    exprs,
    Meta,
    occurence,
    allGoalsWarnings,
    goalTypeContext
  ]);

var jsParseAllGoalsWarningsOld = allGoalsWarningsOld;

var jsParseAllGoalsWarnings = allGoalsWarnings;

var jsParseGoalTypeContext = goalTypeContext;

exports.Parser = Parser;
exports.jsParseAllGoalsWarningsOld = jsParseAllGoalsWarningsOld;
exports.jsParseAllGoalsWarnings = jsParseAllGoalsWarnings;
exports.jsParseGoalTypeContext = jsParseGoalTypeContext;
/* ofType Not a pure module */
