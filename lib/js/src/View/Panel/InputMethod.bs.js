// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactUpdate = require("reason-react-update/lib/js/src/ReactUpdate.bs.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Buffer$AgdaMode = require("./InputMethod/Buffer.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Editors$AgdaMode = require("../../Editors.bs.js");
var Translator$AgdaMode = require("./Translator.bs.js");
var Type__View$AgdaMode = require("../../Type/Type__View.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var CandidateSymbols$AgdaMode = require("./CandidateSymbols.bs.js");

var initialState_001 = /* markers : array */[];

var initialState = /* record */Caml_chrome_debugger.record([
    "activated",
    "markers",
    "buffer"
  ], [
    false,
    initialState_001,
    Buffer$AgdaMode.initial
  ]);

function addClass(editor) {
  atom.views.getView(editor).classList.add("agda-mode-input-method-activated");
  return /* () */0;
}

function removeClass(editor) {
  atom.views.getView(editor).classList.remove("agda-mode-input-method-activated");
  return /* () */0;
}

function getSelections(editor) {
  var getCharIndex = function (selection) {
    var start = selection.getBufferRange().start;
    return editor.getBuffer().characterIndexForPosition(start);
  };
  var compareSelection = function (a, b) {
    return Caml_primitive.caml_int_compare(getCharIndex(a), getCharIndex(b));
  };
  var selections = editor.getSelections();
  $$Array.sort(compareSelection, selections);
  return selections;
}

function insertTextBuffer(editor, $$char) {
  return Rebase.$$Array[/* forEach */8]((function (selection) {
                var range = selection.getBufferRange();
                editor.setTextInBufferRange(range, $$char);
                return /* () */0;
              }), getSelections(editor));
}

function rewriteTextBuffer(editor, markers, string) {
  return Rebase.$$Array[/* forEach */8]((function (marker) {
                editor.getBuffer().setTextInRange(marker.getBufferRange(), string);
                return /* () */0;
              }), markers);
}

function clearAndMarkSelectedAreas(editor) {
  return Rebase.$$Array[/* map */0]((function (selection) {
                var range = selection.getBufferRange();
                editor.setTextInBufferRange(range, "");
                return editor.markBufferRange(range.copy());
              }), getSelections(editor));
}

function markerOnDidChange(editor, setReality, $$event) {
  var rangeOld = new Atom.Range($$event.oldTailBufferPosition, $$event.oldHeadBufferPosition);
  var rangeNew = new Atom.Range($$event.newTailBufferPosition, $$event.newHeadBufferPosition);
  editor.getBuffer().getTextInRange(rangeOld);
  return Curry._1(setReality, editor.getBuffer().getTextInRange(rangeNew));
}

function monitor(editor, setReality, send) {
  var disposables = new Atom.CompositeDisposable();
  addClass(editor);
  var markers = clearAndMarkSelectedAreas(editor);
  Curry._1(send, /* UpdateMarker */Caml_chrome_debugger.variant("UpdateMarker", 0, [markers]));
  Rebase.$$Option[/* forEach */8]((function (marker) {
          disposables.add(marker.onDidChange((function (param) {
                      return markerOnDidChange(editor, setReality, param);
                    })));
          disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "editor:newline", (function ($$event) {
                      Curry._1(send, /* Deactivate */1);
                      $$event.stopImmediatePropagation();
                      return /* () */0;
                    })));
          return /* () */0;
        }), Rebase.$$Array[/* get */17](markers, 0));
  disposables.add(editor.onDidChangeCursorPosition((function ($$event) {
              var point = $$event.newBufferPosition;
              var ranges = Rebase.$$Array[/* map */0]((function (prim) {
                      return prim.getBufferRange();
                    }), markers);
              var inRange = Rebase.$$Array[/* exists */9]((function (param) {
                      return param.containsPoint(point);
                    }), ranges);
              if (inRange) {
                return 0;
              } else {
                return Curry._1(send, /* Deactivate */1);
              }
            })));
  var decorations = Rebase.$$Array[/* map */0]((function (marker) {
          return editor.decorateMarker(marker, {
                      type: "highlight",
                      class: "input-method-decoration"
                    });
        }), markers);
  return (function (param) {
            removeClass(editor);
            Rebase.$$Array[/* forEach */8]((function (prim) {
                    prim.destroy();
                    return /* () */0;
                  }), decorations);
            Rebase.$$Array[/* forEach */8]((function (prim) {
                    prim.destroy();
                    return /* () */0;
                  }), markers);
            disposables.dispose();
            return Curry._1(send, /* UpdateMarker */Caml_chrome_debugger.variant("UpdateMarker", 0, [/* array */[]]));
          });
}

function reducer(action, state) {
  if (typeof action === "number") {
    if (action === 0) {
      var match = state[/* activated */0];
      if (match) {
        return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                      "activated",
                      "markers",
                      "buffer"
                    ], [
                      false,
                      state[/* markers */1],
                      Buffer$AgdaMode.initial
                    ])]);
      } else {
        return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                      "activated",
                      "markers",
                      "buffer"
                    ], [
                      true,
                      state[/* markers */1],
                      state[/* buffer */2]
                    ])]);
      }
    } else {
      var match$1 = state[/* activated */0];
      if (match$1) {
        return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                      "activated",
                      "markers",
                      "buffer"
                    ], [
                      false,
                      state[/* markers */1],
                      Buffer$AgdaMode.initial
                    ])]);
      } else {
        return /* NoUpdate */0;
      }
    }
  } else if (action.tag) {
    return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                  "activated",
                  "markers",
                  "buffer"
                ], [
                  state[/* activated */0],
                  state[/* markers */1],
                  action[0]
                ])]);
  } else {
    return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                  "activated",
                  "markers",
                  "buffer"
                ], [
                  state[/* activated */0],
                  action[0],
                  state[/* buffer */2]
                ])]);
  }
}

function InputMethod(Props) {
  var editors = Props.editors;
  var interceptAndInsertKey = Props.interceptAndInsertKey;
  var activateInputMethod = Props.activateInputMethod;
  var onActivationChange = Props.onActivationChange;
  var isActive = Props.isActive;
  var editor = Editors$AgdaMode.Focus[/* get */0](editors);
  var match = ReactUpdate.useReducer(initialState, reducer);
  var send = match[1];
  var state = match[0];
  var stateRef = React.useRef(state);
  var match$1 = Hook$AgdaMode.useState("");
  var setReality = match$1[1];
  var reality = match$1[0];
  React.useEffect((function () {
          var match = Buffer$AgdaMode.next(state[/* buffer */2], reality);
          if (typeof match === "number") {
            Curry._1(send, /* Deactivate */1);
          } else if (match.tag) {
            var buffer = match[0];
            Curry._1(send, /* UpdateBuffer */Caml_chrome_debugger.variant("UpdateBuffer", 1, [buffer]));
            var surface = Buffer$AgdaMode.toSurface(buffer);
            rewriteTextBuffer(editor, state[/* markers */1], surface);
          } else {
            Curry._1(send, /* UpdateBuffer */Caml_chrome_debugger.variant("UpdateBuffer", 1, [match[0]]));
          }
          return undefined;
        }), /* array */[reality]);
  var debugDispatch = React.useContext(Type__View$AgdaMode.Debug[/* debugDispatch */2]);
  React.useEffect((function () {
          if (atom.inDevMode()) {
            Curry._1(debugDispatch, /* UpdateInputMethod */Caml_chrome_debugger.simpleVariant("UpdateInputMethod", [/* record */Caml_chrome_debugger.record([
                        "activated",
                        "markers",
                        "buffer"
                      ], [
                        state[/* activated */0],
                        state[/* markers */1],
                        state[/* buffer */2]
                      ])]));
          }
          return undefined;
        }), /* array */[state]);
  stateRef.current = state;
  React.useEffect((function () {
          return Rebase.$$Option[/* some */11](Event$AgdaMode.onOk((function (shouldActivate) {
                              var state = stateRef.current;
                              if (shouldActivate) {
                                if (state[/* activated */0]) {
                                  if (Buffer$AgdaMode.isEmpty(state[/* buffer */2])) {
                                    insertTextBuffer(editor, "\\");
                                    return Curry._1(send, /* Deactivate */1);
                                  } else {
                                    Curry._1(send, /* Deactivate */1);
                                    return Curry._1(send, /* Activate */0);
                                  }
                                } else {
                                  return Curry._1(send, /* Activate */0);
                                }
                              } else {
                                return Curry._1(send, /* Deactivate */1);
                              }
                            }))(activateInputMethod));
        }), /* array */[]);
  Hook$AgdaMode.useDidUpdateEffect((function (param) {
          Event$AgdaMode.emitOk(state[/* activated */0], onActivationChange);
          return undefined;
        }), /* array */[state[/* activated */0]]);
  React.useEffect((function () {
          return Rebase.$$Option[/* some */11](Event$AgdaMode.onOk((function ($$char) {
                              return insertTextBuffer(editor, $$char);
                            }))(interceptAndInsertKey));
        }), /* array */[]);
  Hook$AgdaMode.useListenWhen((function (param) {
          return monitor(editor, setReality, send);
        }), state[/* activated */0]);
  var translation = Translator$AgdaMode.translate(Buffer$AgdaMode.toSequence(state[/* buffer */2]));
  var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", !state[/* activated */0], /* :: */Caml_chrome_debugger.simpleVariant("::", [
              "input-method",
              /* [] */0
            ])));
  var bufferClassName = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", Buffer$AgdaMode.isEmpty(state[/* buffer */2]), /* :: */Caml_chrome_debugger.simpleVariant("::", [
              "inline-block",
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  "buffer",
                  /* [] */0
                ])
            ])));
  return React.createElement("section", {
              className: className
            }, React.createElement("div", {
                  className: "keyboard"
                }, React.createElement("div", {
                      className: bufferClassName
                    }, Buffer$AgdaMode.toSequence(state[/* buffer */2])), Caml_splice_call.spliceApply(React.createElement, [
                      "div",
                      {
                        className: "keys btn-group btn-group-sm"
                      },
                      Rebase.$$Array[/* map */0]((function (key) {
                              return React.createElement("button", {
                                          key: key,
                                          className: "btn",
                                          onClick: (function (param) {
                                              return insertTextBuffer(editor, key);
                                            })
                                        }, key);
                            }), translation[/* keySuggestions */2])
                    ])), React.createElement(CandidateSymbols$AgdaMode.make, {
                  isActive: isActive && state[/* activated */0],
                  candidateSymbols: translation[/* candidateSymbols */3],
                  updateTranslation: (function (replace) {
                      if (replace !== undefined) {
                        return rewriteTextBuffer(editor, state[/* markers */1], replace);
                      } else {
                        return /* () */0;
                      }
                    }),
                  chooseSymbol: (function (symbol) {
                      rewriteTextBuffer(editor, state[/* markers */1], symbol);
                      return Curry._1(send, /* Deactivate */1);
                    })
                }));
}

var sort = $$Array.sort;

var make = InputMethod;

exports.sort = sort;
exports.initialState = initialState;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.getSelections = getSelections;
exports.insertTextBuffer = insertTextBuffer;
exports.rewriteTextBuffer = rewriteTextBuffer;
exports.clearAndMarkSelectedAreas = clearAndMarkSelectedAreas;
exports.markerOnDidChange = markerOnDidChange;
exports.monitor = monitor;
exports.reducer = reducer;
exports.make = make;
/* atom Not a pure module */
