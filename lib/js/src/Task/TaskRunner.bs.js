// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Command$AgdaMode = require("../Command.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Command$AgdaMode = require("./Task__Command.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Instance__Handler$AgdaMode = require("../Instance/Instance__Handler.bs.js");
var Instance__Connections$AgdaMode = require("../Instance/Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");

function packRequest(request, instance) {
  return $$Promise.mapError($$Promise.flatMapOk(Instance__Connections$AgdaMode.get(instance), (function (connection) {
                    return $$Promise.map(Curry._3(instance[/* view */2][/* display */3], "Loading ...", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])])), (function (param) {
                                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* record */Caml_chrome_debugger.record([
                                                "version",
                                                "filepath",
                                                "request"
                                              ], [
                                                connection[/* metadata */0][/* version */2],
                                                Instance__TextEditors$AgdaMode.getPath(instance),
                                                request
                                              ])]);
                                }));
                  })), (function (param) {
                return /* Cancelled */0;
              }));
}

function run(instance, errorHandler, tasks) {
  var runTasks = function (x) {
    return $$Promise.flatMap(x, (function (param) {
                  if (param.tag) {
                    return Curry._1(errorHandler, param[0]);
                  } else {
                    return run(instance, errorHandler, param[0]);
                  }
                }));
  };
  var runTask = function (task) {
    if (typeof task === "number") {
      switch (task) {
        case /* Disconnect */0 :
            return Instance__Connections$AgdaMode.disconnect(instance);
        case /* Activate */1 :
            return $$Promise.map(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                          return /* () */0;
                        }));
        case /* Deactivate */2 :
            return Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
        
      }
    } else {
      switch (task.tag | 0) {
        case /* WithInstance */0 :
            return runTasks(Curry._1(task[0], instance));
        case /* Display */1 :
            return Curry._3(instance[/* view */2][/* display */3], task[0], task[1], task[2]);
        case /* Inquire */2 :
            return runTasks($$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], task[0], task[1], task[2]), (function (param) {
                                  return /* Cancelled */0;
                                })), task[3]));
        case /* Editor */3 :
            return runTasks($$Promise.mapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(instance[/* editors */1][/* source */1].save())), (function (param) {
                                  return /* Cancelled */0;
                                })), (function (param) {
                              return /* [] */0;
                            })));
        case /* Goals */4 :
            var match = task[0];
            if (typeof match === "number") {
              if (match === /* JumpToTheNext */0) {
                return $$Promise.resolved(Rebase.$$Option.forEach((function (position) {
                                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                  return /* () */0;
                                }), Instance__Goals$AgdaMode.getNextGoalPosition(instance)));
              } else {
                return $$Promise.resolved(Rebase.$$Option.forEach((function (position) {
                                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                  return /* () */0;
                                }), Instance__Goals$AgdaMode.getPreviousGoalPosition(instance)));
              }
            } else if (match.tag) {
              var handler = match[1];
              return $$Promise.flatMap($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), match[0]), (function (param) {
                            if (param.tag) {
                              var error = param[0];
                              if (typeof error === "number" && error >= 2) {
                                return run(instance, errorHandler, Curry._1(handler, /* () */0));
                              } else {
                                return Curry._1(errorHandler, error);
                              }
                            } else {
                              return run(instance, errorHandler, param[0]);
                            }
                          }));
            } else {
              return runTasks($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), match[0]));
            }
        case /* DispatchCommand */5 :
            var command = task[0];
            Instance__TextEditors$AgdaMode.startCheckpoint(command, instance);
            var program = run(instance, errorHandler, Task__Command$AgdaMode.handle(command));
            return $$Promise.tap(program, (function (param) {
                          return Instance__TextEditors$AgdaMode.endCheckpoint(instance);
                        }));
        case /* SendRequest */6 :
            return $$Promise.map(Instance__Handler$AgdaMode.handleCommandError($$Promise.tapError($$Promise.mapOk($$Promise.flatMap($$Promise.flatMapOk($$Promise.flatMap(packRequest(task[0], instance), (function (x) {
                                                  return $$Promise.map(Curry._1(instance[/* view */2][/* updateIsPending */5], true), (function (param) {
                                                                return x;
                                                              }));
                                                })), (function (x) {
                                              return Instance__Handler$AgdaMode.handleRequest(instance, Instance__Handler$AgdaMode.handleResponse, x);
                                            })), (function (x) {
                                          return $$Promise.map(Curry._1(instance[/* view */2][/* updateIsPending */5], false), (function (param) {
                                                        return x;
                                                      }));
                                        })), (function (param) {
                                      return Curry._1(instance[/* onDispatch */9][/* emit */1], /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
                                    })), (function (error) {
                                  return Curry._1(instance[/* onDispatch */9][/* emit */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [error]));
                                })), instance), (function (param) {
                          return /* () */0;
                        }));
        
      }
    }
  };
  var runEach = function (param) {
    if (param) {
      var xs = param[1];
      return $$Promise.flatMap(runTask(param[0]), (function (param) {
                    return runEach(xs);
                  }));
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  return runEach(tasks);
}

function dispatchCommand(command, instance) {
  run(instance, (function (error) {
          return $$Promise.map(Instance__Handler$AgdaMode.handleCommandError($$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [error])), instance), (function (param) {
                        return /* () */0;
                      }));
        }), Task__Command$AgdaMode.handle(Command$AgdaMode.parse(command)));
  return /* () */0;
}

exports.packRequest = packRequest;
exports.run = run;
exports.dispatchCommand = dispatchCommand;
/* Promise Not a pure module */
