// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Channel$AgdaMode = require("./Util/Channel.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(events, channels) {
  var activate = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* activatePanel */1]);
  };
  var deactivate = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* deactivatePanel */2]);
  };
  var toggleDocking = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* toggleDocking */3]);
  };
  var display = function (text, style, body) {
    return Channel$AgdaMode.send(/* tuple */[
                /* record */Caml_chrome_debugger.record([
                    "text",
                    "style"
                  ], [
                    text,
                    style
                  ]),
                body
              ], channels[/* display */4]);
  };
  var inquire = function (text, placeholder, value) {
    return $$Promise.flatMap(Channel$AgdaMode.send(/* () */0, channels[/* activatePanel */1]), (function (param) {
                  return Channel$AgdaMode.send(/* tuple */[
                              /* record */Caml_chrome_debugger.record([
                                  "text",
                                  "style"
                                ], [
                                  text,
                                  0
                                ]),
                              placeholder,
                              value
                            ], channels[/* inquire */5]);
                }));
  };
  var updateIsPending = function (isPending) {
    return Channel$AgdaMode.send(isPending, channels[/* updateIsPending */6]);
  };
  var onMouseEvent = events[/* onMouseEvent */2];
  var activateInputMethod = function (activate) {
    return Channel$AgdaMode.send(activate, channels[/* activateInputMethod */7]);
  };
  var interceptAndInsertKey = function (symbol) {
    return Channel$AgdaMode.send(symbol, channels[/* interceptAndInsertKey */8]);
  };
  var onInputMethodChange = events[/* onInputMethodChange */1];
  var navigateSettings = function (where) {
    return Channel$AgdaMode.send(where, channels[/* navigateSettings */9]);
  };
  var updateConnection = function (connection, error) {
    return Channel$AgdaMode.send(/* tuple */[
                connection,
                error
              ], channels[/* updateConnection */10]);
  };
  var inquireConnection = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* inquireConnection */11]);
  };
  var onDestroy = Event$AgdaMode.make(/* () */0);
  var destroy = function (param) {
    return $$Promise.tap($$Promise.flatMap($$Promise.flatMap(Channel$AgdaMode.send(/* () */0, channels[/* deactivatePanel */2]), (function (param) {
                          return Channel$AgdaMode.send(false, channels[/* activateInputMethod */7]);
                        })), (function (param) {
                      return Channel$AgdaMode.send(/* () */0, channels[/* destroy */0]);
                    })), (function (param) {
                  return Curry._1(onDestroy[/* emit */1], /* () */0);
                }));
  };
  return /* record */Caml_chrome_debugger.record([
            "activate",
            "deactivate",
            "toggleDocking",
            "display",
            "inquire",
            "updateIsPending",
            "destroy",
            "onDestroy",
            "onMouseEvent",
            "activateInputMethod",
            "interceptAndInsertKey",
            "onInputMethodChange",
            "navigateSettings",
            "updateConnection",
            "inquireConnection"
          ], [
            activate,
            deactivate,
            toggleDocking,
            display,
            inquire,
            updateIsPending,
            destroy,
            onDestroy,
            onMouseEvent,
            activateInputMethod,
            interceptAndInsertKey,
            onInputMethodChange,
            navigateSettings,
            updateConnection,
            inquireConnection
          ]);
}

exports.make = make;
/* Promise Not a pure module */
