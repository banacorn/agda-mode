// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Event$AgdaMode = require("../src/Util/Event.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");

Mocha$BsMocha.describe("Input Method")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("View")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                Promise$BsMocha.it("should not add class '.agda-mode-input-method-activated' to the editor element before triggering")(undefined, undefined, undefined, (function (param) {
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, false, atom.views.getView(instance[/* editors */1][/* source */1]).classList.contains("agda-mode-input-method-activated"));
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                Promise$BsMocha.it("should add class '.agda-mode-input-method-activated' to the editor element after triggering")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                        return partial_arg("\\", param);
                                      })).then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, true, atom.views.getView(instance[/* editors */1][/* source */1]).classList.contains("agda-mode-input-method-activated"));
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                return Promise$BsMocha.it("should display the keyboard after triggering")(undefined, undefined, undefined, (function (param) {
                              var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                                var partial_arg = Test__Util$AgdaMode.View[/* querySelector */7];
                                                return Test__Util$AgdaMode.View[/* getPanel */5](instance).then((function (param) {
                                                                return partial_arg(".input-method", param);
                                                              })).then((function (element) {
                                                              Test__Util$AgdaMode.Assert[/* equal */0](undefined, true, element.classList.contains("hidden"));
                                                              return Promise.resolve(instance);
                                                            }));
                                              })).then((function (param) {
                                              return partial_arg("\\", param);
                                            })).then((function (instance) {
                                            var partial_arg = Test__Util$AgdaMode.View[/* querySelector */7];
                                            return Test__Util$AgdaMode.View[/* getPanel */5](instance).then((function (param) {
                                                            return partial_arg(".input-method", param);
                                                          })).then((function (element) {
                                                          Test__Util$AgdaMode.Assert[/* equal */0](undefined, false, element.classList.contains("hidden"));
                                                          return Promise.resolve(/* () */0);
                                                        }));
                                          }));
                            }));
              }));
        Mocha$BsMocha.describe("Typing")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                Promise$BsMocha.it("should trigger onInputMethodActivationChange")(undefined, undefined, undefined, (function (param) {
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                        var onDispatch = Async$AgdaMode.toPromise(Event$AgdaMode.once(instance[/* view */2][/* onInputMethodActivationChange */12]));
                                        return Test__Util$AgdaMode.Keyboard[/* dispatch */0]("\\", instance).then((function (param) {
                                                      return onDispatch.then((function (activated) {
                                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, true, activated);
                                                                    return Promise.resolve(instance);
                                                                  }));
                                                    }));
                                      })).then((function (instance) {
                                      var onDispatch = Async$AgdaMode.toPromise(Event$AgdaMode.once(instance[/* view */2][/* onInputMethodActivationChange */12]));
                                      return Test__Util$AgdaMode.Keyboard[/* dispatch */0]("\\", instance).then((function (param) {
                                                    return onDispatch.then((function (activated) {
                                                                  Test__Util$AgdaMode.Assert[/* equal */0](undefined, false, activated);
                                                                  return Promise.resolve(instance);
                                                                }));
                                                  }));
                                    }));
                      }));
                Promise$BsMocha.it("should result in \"λ\" after typing \"gl\"")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                        return partial_arg("\\", param);
                                      })).then((function (instance) {
                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("G", instance).then((function (param) {
                                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                    })).then((function (param) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ", instance[/* editors */1][/* source */1].getText());
                                                    return Promise.resolve(/* () */0);
                                                  }));
                                    }));
                      }));
                Promise$BsMocha.it("should result in \"ƛ\" after typing \"lambdabar\"")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                        return partial_arg("\\", param);
                                      })).then((function (instance) {
                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance).then((function (param) {
                                                                    return Test__Util$AgdaMode.Keyboard[/* insert */1]("a", instance);
                                                                  })).then((function (param) {
                                                                  return Test__Util$AgdaMode.Keyboard[/* insert */1]("m", instance);
                                                                })).then((function (param) {
                                                                return Test__Util$AgdaMode.Keyboard[/* insert */1]("b", instance);
                                                              })).then((function (param) {
                                                              return Test__Util$AgdaMode.Keyboard[/* insert */1]("d", instance);
                                                            })).then((function (param) {
                                                            return Test__Util$AgdaMode.Keyboard[/* insert */1]("a", instance);
                                                          })).then((function (param) {
                                                          return Test__Util$AgdaMode.Keyboard[/* insert */1]("b", instance);
                                                        })).then((function (param) {
                                                        return Test__Util$AgdaMode.Keyboard[/* insert */1]("a", instance);
                                                      })).then((function (param) {
                                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("r", instance);
                                                    })).then((function (param) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "ƛ", instance[/* editors */1][/* source */1].getText());
                                                    return Promise.resolve(/* () */0);
                                                  }));
                                    }));
                      }));
                Promise$BsMocha.it("should result in \"lamb\" after typing \"lambda\" and then backspace twice")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                        return partial_arg("\\", param);
                                      })).then((function (instance) {
                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance).then((function (param) {
                                                                  return Test__Util$AgdaMode.Keyboard[/* insert */1]("a", instance);
                                                                })).then((function (param) {
                                                                return Test__Util$AgdaMode.Keyboard[/* insert */1]("m", instance);
                                                              })).then((function (param) {
                                                              return Test__Util$AgdaMode.Keyboard[/* insert */1]("b", instance);
                                                            })).then((function (param) {
                                                            return Test__Util$AgdaMode.Keyboard[/* insert */1]("d", instance);
                                                          })).then((function (param) {
                                                          return Test__Util$AgdaMode.Keyboard[/* insert */1]("a", instance);
                                                        })).then((function (param) {
                                                        return Test__Util$AgdaMode.Keyboard[/* backspace */2](instance);
                                                      })).then((function (param) {
                                                      return Test__Util$AgdaMode.Keyboard[/* backspace */2](instance);
                                                    })).then((function (param) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "lamb", instance[/* editors */1][/* source */1].getText());
                                                    return Promise.resolve(/* () */0);
                                                  }));
                                    }));
                      }));
                return Mocha$BsMocha.describe("Deactivation")(undefined, undefined, undefined, (function (param) {
                              Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                              Promise$BsMocha.it("should deactivate when stuck (\"gll\")")(undefined, undefined, undefined, (function (param) {
                                      var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                      return partial_arg("\\", param);
                                                    })).then((function (instance) {
                                                    return Test__Util$AgdaMode.Keyboard[/* insert */1]("G", instance).then((function (param) {
                                                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                                    })).then((function (param) {
                                                                    return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                                  })).then((function (param) {
                                                                  Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λl", instance[/* editors */1][/* source */1].getText());
                                                                  return Promise.resolve(/* () */0);
                                                                }));
                                                  }));
                                    }));
                              Promise$BsMocha.it("should deactivate when stuck (\"gl \")")(undefined, undefined, undefined, (function (param) {
                                      var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                      return partial_arg("\\", param);
                                                    })).then((function (instance) {
                                                    return Test__Util$AgdaMode.Keyboard[/* insert */1]("G", instance).then((function (param) {
                                                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                                    })).then((function (param) {
                                                                    return Test__Util$AgdaMode.Keyboard[/* insert */1](" ", instance);
                                                                  })).then((function (param) {
                                                                  Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ ", instance[/* editors */1][/* source */1].getText());
                                                                  return Promise.resolve(/* () */0);
                                                                }));
                                                  }));
                                    }));
                              Promise$BsMocha.it("should deactivate after typing \"ESC\" (\"gl\" + \"ESC\")")(undefined, undefined, undefined, (function (param) {
                                      var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                      return partial_arg("\\", param);
                                                    })).then((function (instance) {
                                                    return Test__Util$AgdaMode.Keyboard[/* insert */1]("G", instance).then((function (param) {
                                                                      return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                                    })).then((function (param) {
                                                                    return Test__Util$AgdaMode.Keyboard[/* dispatch */0]("escape", instance);
                                                                  })).then((function (param) {
                                                                  Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ", instance[/* editors */1][/* source */1].getText());
                                                                  return Promise.resolve(/* () */0);
                                                                }));
                                                  }));
                                    }));
                              return Promise$BsMocha.it("should deactivate after typing \"ENTER\" (\"gl\" + \"ENTER\")")(undefined, undefined, undefined, (function (param) {
                                            var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                            return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                            return partial_arg("\\", param);
                                                          })).then((function (instance) {
                                                          return Test__Util$AgdaMode.Keyboard[/* insert */1]("G", instance).then((function (param) {
                                                                            return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                                          })).then((function (param) {
                                                                          return Test__Util$AgdaMode.Keyboard[/* insert */1]("\n", instance);
                                                                        })).then((function (param) {
                                                                        Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ\n", instance[/* editors */1][/* source */1].getText());
                                                                        return Promise.resolve(/* () */0);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
        return Mocha$BsMocha.describe("Issue #72")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                      Promise$BsMocha.it("should make \"ʳ\" the first candidate")(undefined, undefined, undefined, (function (param) {
                              var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                                instance[/* editors */1][/* source */1].setText("a");
                                                return Promise.resolve(instance);
                                              })).then((function (param) {
                                              return partial_arg("\\", param);
                                            })).then((function (instance) {
                                            return Test__Util$AgdaMode.Keyboard[/* insert */1]("^", instance).then((function (param) {
                                                            return Test__Util$AgdaMode.Keyboard[/* insert */1]("r", instance);
                                                          })).then((function (param) {
                                                          Test__Util$AgdaMode.Assert[/* equal */0](undefined, "aʳ", instance[/* editors */1][/* source */1].getText());
                                                          return Promise.resolve(/* () */0);
                                                        }));
                                          }));
                            }));
                      return Promise$BsMocha.it("should make \"ˡ\" the first candidate")(undefined, undefined, undefined, (function (param) {
                                    var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                    return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                                      instance[/* editors */1][/* source */1].setText("a");
                                                      return Promise.resolve(instance);
                                                    })).then((function (param) {
                                                    return partial_arg("\\", param);
                                                  })).then((function (instance) {
                                                  return Test__Util$AgdaMode.Keyboard[/* insert */1]("^", instance).then((function (param) {
                                                                  return Test__Util$AgdaMode.Keyboard[/* insert */1]("l", instance);
                                                                })).then((function (param) {
                                                                Test__Util$AgdaMode.Assert[/* equal */0](undefined, "aˡ", instance[/* editors */1][/* source */1].getText());
                                                                return Promise.resolve(/* () */0);
                                                              }));
                                                }));
                                  }));
                    }));
      }));

/*  Not a pure module */
