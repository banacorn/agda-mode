// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");

var component = ReasonReact.statelessComponent("SettingsConnectionError");

function toString(param) {
  switch (param.tag | 0) {
    case 0 : 
        var match = param[0];
        if (typeof match === "number") {
          return /* tuple */[
                  "Process not responding",
                  "Please restart the process"
                ];
        } else if (match.tag) {
          return /* tuple */[
                  "Auto search failed",
                  match[0]
                ];
        } else {
          return /* tuple */[
                  "Auto search failed",
                  "currently auto path searching is not supported on " + (String(match[0]) + "")
                ];
        }
    case 1 : 
        var match$1 = param[1];
        if (typeof match$1 === "number") {
          return /* tuple */[
                  "Process hanging",
                  "The program has not been responding for more than 1 sec"
                ];
        } else {
          switch (match$1.tag | 0) {
            case 0 : 
                return /* tuple */[
                        "Path malformed",
                        match$1[0]
                      ];
            case 1 : 
                return /* tuple */[
                        "Agda not found",
                        Util$AgdaMode.JsError[/* toString */0](match$1[0])
                      ];
            case 2 : 
                return /* tuple */[
                        "Error from the shell",
                        Util$AgdaMode.JsError[/* toString */0](match$1[0])
                      ];
            case 3 : 
                return /* tuple */[
                        "Error from the stderr",
                        match$1[0]
                      ];
            case 4 : 
                return /* tuple */[
                        "This is not agda",
                        match$1[0]
                      ];
            
          }
        }
    case 2 : 
        var match$2 = param[0];
        if (typeof match$2 === "number") {
          return /* tuple */[
                  "Disconnected",
                  "Connection disconnected by ourselves"
                ];
        } else if (match$2.tag) {
          return /* tuple */[
                  "Socket closed",
                  "code: " + (String(match$2[0]) + ("\nsignal: " + (String(match$2[1]) + "")))
                ];
        } else {
          return /* tuple */[
                  "Socket error",
                  Util$AgdaMode.JsError[/* toString */0](match$2[0])
                ];
        }
    
  }
}

function make(error, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                if (error !== undefined) {
                  var match = toString(error);
                  return React.createElement(React.Fragment, undefined, React.createElement("hr", undefined), React.createElement("div", {
                                  className: "inset-panel padded text-warning error"
                                }, React.createElement("h3", undefined, match[0]), React.createElement("pre", undefined, match[1])));
                } else {
                  return null;
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.toString = toString;
exports.make = make;
/* component Not a pure module */
