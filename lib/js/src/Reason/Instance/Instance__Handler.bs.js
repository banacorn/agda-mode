// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Async$AgdaMode = require("../Util/Async.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Command$AgdaMode = require("../Command.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Response$AgdaMode = require("../Response.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Highlighting$AgdaMode = require("../Highlighting.bs.js");
var Type__Location$AgdaMode = require("../Type/Type__Location.bs.js");
var Instance__Goals$AgdaMode = require("./Instance__Goals.bs.js");
var Instance__Connections$AgdaMode = require("./Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("./Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("./Instance__Highlightings.bs.js");

function handleCommandError(instance) {
  return Async$AgdaMode.thenError((function (error) {
                if (typeof error === "number") {
                  switch (error) {
                    case 0 : 
                        View$AgdaMode.Handles[/* display */5]("Query Cancelled", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]), instance[/* view */2]);
                        break;
                    case 1 : 
                        View$AgdaMode.Handles[/* display */5]("Goal not indexed", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]), instance[/* view */2]);
                        break;
                    case 2 : 
                        View$AgdaMode.Handles[/* display */5]("Out of goal", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please place the cursor in a goal"])]), instance[/* view */2]);
                        break;
                    
                  }
                } else if (error.tag) {
                  View$AgdaMode.Handles[/* display */5]("Connection-related Error", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]), instance[/* view */2]);
                } else {
                  var match = error[0];
                  if (match.tag) {
                    var message = "when trying to parse the following text:\n" + match[0];
                    View$AgdaMode.Handles[/* display */5]("Parse Error", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [message])]), instance[/* view */2]);
                  } else {
                    var errors = match[0];
                    var intro = String(Rebase.$$Array[/* length */16](errors)) + "when trying to parse the following text responses from agda:\n\n";
                    var message$1 = Rebase.$$String[/* joinWith */11]("\n\n", Rebase.List[/* fromArray */12](errors));
                    View$AgdaMode.Handles[/* display */5]("Parse Error", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [intro + message$1])]), instance[/* view */2]);
                  }
                }
                return Async$AgdaMode.resolve(/* () */0);
              }));
}

function handleResponse(instance, response) {
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = textEditor.getPath();
  var textBuffer = textEditor.getBuffer();
  var exit = 0;
  if (typeof response === "number") {
    if (response === 2) {
      Instance__Highlightings$AgdaMode.destroyAll(instance);
      return Async$AgdaMode.resolve(/* () */0);
    } else {
      exit = 1;
    }
  } else {
    switch (response.tag | 0) {
      case 0 : 
          Rebase.$$Array[/* forEach */8]((function (annotation) {
                  return Instance__Highlightings$AgdaMode.add(annotation, instance);
                }), Rebase.$$Array[/* filter */10](Highlighting$AgdaMode.Annotation[/* shouldHighlight */3], response[1]));
          return Async$AgdaMode.resolve(/* () */0);
      case 1 : 
          var filepath = response[0];
          return Async$AgdaMode.mapError((function (param) {
                          return /* Cancelled */0;
                        }))(Async$AgdaMode.mapOk((function (param) {
                              Fs.unlink(filepath, (function (param) {
                                      return /* () */0;
                                    }));
                              return /* () */0;
                            }))(Instance__Highlightings$AgdaMode.addFromFile(filepath, instance)));
      case 2 : 
          var checked = response[1];
          var displayImplicit = response[0];
          if (displayImplicit || checked) {
            View$AgdaMode.Handles[/* display */5]("Status", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Typechecked: " + (Pervasives.string_of_bool(checked) + ("\nDisplay implicit arguments: " + Pervasives.string_of_bool(displayImplicit)))])]), instance[/* view */2]);
          }
          return Async$AgdaMode.resolve(/* () */0);
      case 3 : 
          if (response[0] === filePath) {
            var point = textBuffer.positionForCharacterIndex(response[1] - 1 | 0);
            setTimeout((function (param) {
                    textEditor.setCursorBufferPosition(point);
                    return /* () */0;
                  }), 0);
          }
          return Async$AgdaMode.resolve(/* () */0);
      case 4 : 
          Instance__Goals$AgdaMode.instantiateAll(response[0], instance);
          return Async$AgdaMode.resolve(/* () */0);
      case 5 : 
          var give = response[1];
          var index = response[0];
          var match = Instance__Goals$AgdaMode.find(index, instance);
          if (match !== undefined) {
            var goal = match;
            if (typeof give === "number") {
              if (give === 0) {
                var content = Goal$AgdaMode.getContent(goal);
                Goal$AgdaMode.setContent("(" + (content + ")"), goal);
              }
              
            } else {
              Goal$AgdaMode.setContent(give[0].replace((/\\n/g), "\n"), goal);
            }
            Goal$AgdaMode.removeBoundary(goal);
            Goal$AgdaMode.destroy(goal);
            return Async$AgdaMode.resolve(/* () */0);
          } else {
            console.log("error: cannot find goal #" + String(index));
            return Async$AgdaMode.resolve(/* () */0);
          }
      case 6 : 
          var lines = response[1];
          var pointed = Editors$AgdaMode.pointingAt(undefined, instance[/* goals */4], instance[/* editors */1]);
          if (pointed !== undefined) {
            var goal$1 = pointed;
            if (response[0]) {
              Goal$AgdaMode.writeLambda(lines, goal$1);
            } else {
              Goal$AgdaMode.writeLines(lines, goal$1);
            }
            return Curry._2(instance[/* dispatch */6], /* Load */0, instance);
          } else {
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      case 8 : 
          Event$AgdaMode.emitOk(true, instance[/* view */2][/* activatePanel */3]);
          var match$1 = Response$AgdaMode.Info[/* handle */1](response[0]);
          return View$AgdaMode.Handles[/* display */5](match$1[0], match$1[1], match$1[2], instance[/* view */2]);
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    console.log("Unhandled response:");
    console.log(response);
    return Async$AgdaMode.resolve(/* () */0);
  }
  
}

function handleResponses(instance, responses) {
  return Async$AgdaMode.mapOk((function (param) {
                  return /* () */0;
                }))(Async$AgdaMode.all(Instance__TextEditors$AgdaMode.recoverCursor((function (param) {
                        return Rebase.$$Array[/* map */0]((function (param) {
                                      return handleResponse(instance, param);
                                    }), responses);
                      }), instance)));
}

function handleLocalCommand(command, instance) {
  var buff = function (command, instance) {
    return Async$AgdaMode.mapError((function (param) {
                    return /* Cancelled */0;
                  }))(Async$AgdaMode.mapOk((function (connection) {
                        return /* record */Block.record([
                                  "connection",
                                  "filepath",
                                  "command"
                                ], [
                                  connection,
                                  instance[/* editors */1][/* source */1].getPath(),
                                  command
                                ]);
                      }))(Instance__Connections$AgdaMode.get(instance)));
  };
  if (typeof command === "number") {
    switch (command) {
      case 0 : 
          return Async$AgdaMode.thenOk((function (param) {
                          instance[/* loaded */0] = true;
                          return buff(/* Load */0, instance);
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(Async$AgdaMode.fromPromise(instance[/* editors */1][/* source */1].save())));
      case 1 : 
          Instance__Connections$AgdaMode.disconnect(instance);
          Instance__Goals$AgdaMode.destroyAll(instance);
          Instance__Highlightings$AgdaMode.destroyAll(instance);
          instance[/* loaded */0] = false;
          return Async$AgdaMode.resolve(undefined);
      case 2 : 
          Instance__Connections$AgdaMode.disconnect(instance);
          return buff(/* Load */0, instance);
      case 3 : 
          return buff(/* Abort */1, instance);
      case 4 : 
          return buff(/* Compile */2, instance);
      case 5 : 
          return buff(/* ToggleDisplayOfImplicitArguments */3, instance);
      case 6 : 
          return buff(/* SolveConstraints */4, instance);
      case 7 : 
          return buff(/* ShowConstraints */5, instance);
      case 8 : 
          return buff(/* ShowGoals */6, instance);
      case 9 : 
          var nextGoal = /* record */Block.record(["contents"], [undefined]);
          var cursor = instance[/* editors */1][/* source */1].getCursorBufferPosition();
          var positions = Rebase.$$Array[/* map */0]((function (goal) {
                  return goal[/* range */2].start.translate(new Atom.Point(0, 3));
                }), instance[/* goals */4]);
          Rebase.$$Array[/* forEach */8]((function (position) {
                  if (position.isGreaterThan(cursor) && nextGoal[0] === undefined) {
                    nextGoal[0] = Caml_option.some(position);
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }), positions);
          if (nextGoal[0] === undefined) {
            nextGoal[0] = Rebase.$$Array[/* get */17](positions, 0);
          }
          Rebase.Option[/* forEach */8]((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), nextGoal[0]);
          return Async$AgdaMode.resolve(undefined);
      case 10 : 
          var previousGoal = /* record */Block.record(["contents"], [undefined]);
          var cursor$1 = instance[/* editors */1][/* source */1].getCursorBufferPosition();
          var positions$1 = Rebase.$$Array[/* map */0]((function (goal) {
                  return goal[/* range */2].start.translate(new Atom.Point(0, 3));
                }), instance[/* goals */4]);
          Rebase.$$Array[/* forEach */8]((function (position) {
                  if (position.isLessThan(cursor$1) && previousGoal[0] === undefined) {
                    previousGoal[0] = Caml_option.some(position);
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }), positions$1);
          if (previousGoal[0] === undefined) {
            previousGoal[0] = Rebase.$$Array[/* get */17](positions$1, Rebase.$$Array[/* length */16](positions$1) - 1 | 0);
          }
          Rebase.Option[/* forEach */8]((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), previousGoal[0]);
          return Async$AgdaMode.resolve(undefined);
      case 11 : 
          View$AgdaMode.Handles[/* toggleDocking */7](instance[/* view */2]);
          return Async$AgdaMode.resolve(undefined);
      case 12 : 
          var selectedText = instance[/* editors */1][/* source */1].getSelectedText();
          if (Rebase.$$String[/* isEmpty */5](selectedText)) {
            return Async$AgdaMode.thenOk((function (expr) {
                            return Async$AgdaMode.thenOk((function (param) {
                                            return buff(/* WhyInScope */Block.variant("WhyInScope", 0, [
                                                          expr,
                                                          param[1]
                                                        ]), instance);
                                          }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
                          }))(Async$AgdaMode.mapError((function (param) {
                                return /* Cancelled */0;
                              }))(View$AgdaMode.Handles[/* inquire */6]("Scope info", "name:", "", instance[/* view */2])));
          } else {
            return buff(/* WhyInScopeGlobal */Block.variant("WhyInScopeGlobal", 1, [selectedText]), instance);
          }
      case 13 : 
          return Async$AgdaMode.thenOk((function (param) {
                          var index = param[1];
                          var goal = param[0];
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return Async$AgdaMode.thenOk((function (result) {
                                            Goal$AgdaMode.setContent(result, goal);
                                            return buff(/* Give */Block.variant("Give", 9, [
                                                          goal,
                                                          index
                                                        ]), instance);
                                          }))(Async$AgdaMode.mapError((function (param) {
                                                return /* Cancelled */0;
                                              }))(View$AgdaMode.Handles[/* inquire */6]("Give", "expression to give:", "", instance[/* view */2])));
                          } else {
                            return buff(/* Give */Block.variant("Give", 9, [
                                          goal,
                                          index
                                        ]), instance);
                          }
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 14 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Refine */Block.variant("Refine", 10, [
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 15 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Refine */Block.variant("Refine", 10, [
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 16 : 
          return Async$AgdaMode.thenOk((function (param) {
                          var index = param[1];
                          var goal = param[0];
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return Async$AgdaMode.thenOk((function (result) {
                                            Goal$AgdaMode.setContent(result, goal);
                                            return buff(/* Case */Block.variant("Case", 12, [
                                                          goal,
                                                          index
                                                        ]), instance);
                                          }))(Async$AgdaMode.mapError((function (param) {
                                                return /* Cancelled */0;
                                              }))(View$AgdaMode.Handles[/* inquire */6]("Case", "expression to case:", "", instance[/* view */2])));
                          } else {
                            return buff(/* Case */Block.variant("Case", 12, [
                                          goal,
                                          index
                                        ]), instance);
                          }
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 17 : 
          return buff(/* Load */0, instance);
      case 18 : 
          if (instance[/* loaded */0]) {
            var name = Instance__TextEditors$AgdaMode.recoverCursor((function (param) {
                    return Instance__TextEditors$AgdaMode.getSelectedTextNode(instance);
                  }), instance);
            return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                            return buff(/* GotoDefinitionGlobal */Block.variant("GotoDefinitionGlobal", 18, [name]), instance);
                          }))(Async$AgdaMode.thenOk((function (param) {
                                return buff(/* GotoDefinition */Block.variant("GotoDefinition", 17, [
                                              name,
                                              param[1]
                                            ]), instance);
                              }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
          } else {
            return Async$AgdaMode.thenOk((function (param) {
                            return handleLocalCommand(/* GotoDefinition */18, instance);
                          }))(handleCommandError(instance)(Curry._2(instance[/* dispatch */6], /* Load */0, instance)));
          }
      
    }
  } else {
    switch (command.tag | 0) {
      case 0 : 
          var normalization = command[0];
          return Async$AgdaMode.thenOk((function (expr) {
                          return buff(/* SearchAbout */Block.variant("SearchAbout", 2, [
                                        normalization,
                                        expr
                                      ]), instance);
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(View$AgdaMode.Handles[/* inquire */6]("Searching through definitions [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization) + "]"), "expression to infer:", "", instance[/* view */2])));
      case 1 : 
          var normalization$1 = command[0];
          return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                          return Async$AgdaMode.thenOk((function (expr) {
                                          return buff(/* InferTypeGlobal */Block.variant("InferTypeGlobal", 4, [
                                                        normalization$1,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.mapError((function (param) {
                                              return /* Cancelled */0;
                                            }))(View$AgdaMode.Handles[/* inquire */6]("Infer type [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$1) + "]"), "expression to infer:", "", instance[/* view */2])));
                        }))(Async$AgdaMode.thenOk((function (param) {
                              var index = param[1];
                              var goal = param[0];
                              if (Goal$AgdaMode.isEmpty(goal)) {
                                return Async$AgdaMode.thenOk((function (expr) {
                                                return buff(/* InferType */Block.variant("InferType", 3, [
                                                              normalization$1,
                                                              expr,
                                                              index
                                                            ]), instance);
                                              }))(Async$AgdaMode.mapError((function (param) {
                                                    return /* Cancelled */0;
                                                  }))(View$AgdaMode.Handles[/* inquire */6]("Infer type [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$1) + "]"), "expression to infer:", "", instance[/* view */2])));
                              } else {
                                return buff(/* Give */Block.variant("Give", 9, [
                                              goal,
                                              index
                                            ]), instance);
                              }
                            }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
      case 2 : 
          var normalization$2 = command[0];
          return Async$AgdaMode.thenOk((function (expr) {
                          return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                                          return buff(/* ModuleContentsGlobal */Block.variant("ModuleContentsGlobal", 6, [
                                                        normalization$2,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.thenOk((function (param) {
                                              return buff(/* ModuleContents */Block.variant("ModuleContents", 5, [
                                                            normalization$2,
                                                            expr,
                                                            param[1]
                                                          ]), instance);
                                            }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(View$AgdaMode.Handles[/* inquire */6]("Module contents [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$2) + "]"), "module name:", "", instance[/* view */2])));
      case 3 : 
          var computeMode = command[0];
          return Instance__TextEditors$AgdaMode.handleOutOfGoal((function (param) {
                          return Async$AgdaMode.thenOk((function (expr) {
                                          return buff(/* ComputeNormalFormGlobal */Block.variant("ComputeNormalFormGlobal", 8, [
                                                        computeMode,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.mapError((function (param) {
                                              return /* Cancelled */0;
                                            }))(View$AgdaMode.Handles[/* inquire */6]("Compute normal form", "expression to normalize:", "", instance[/* view */2])));
                        }))(Async$AgdaMode.thenOk((function (param) {
                              var index = param[1];
                              var goal = param[0];
                              if (Goal$AgdaMode.isEmpty(goal)) {
                                return Async$AgdaMode.thenOk((function (expr) {
                                                return buff(/* ComputeNormalForm */Block.variant("ComputeNormalForm", 7, [
                                                              computeMode,
                                                              expr,
                                                              index
                                                            ]), instance);
                                              }))(Async$AgdaMode.mapError((function (param) {
                                                    return /* Cancelled */0;
                                                  }))(View$AgdaMode.Handles[/* inquire */6]("Compute normal form", "expression to normalize:", "", instance[/* view */2])));
                              } else {
                                var expr = Goal$AgdaMode.getContent(goal);
                                return buff(/* ComputeNormalForm */Block.variant("ComputeNormalForm", 7, [
                                              computeMode,
                                              expr,
                                              index
                                            ]), instance);
                              }
                            }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance))));
      case 4 : 
          var normalization$3 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalType */Block.variant("GoalType", 13, [
                                        normalization$3,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 5 : 
          var normalization$4 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Context */Block.variant("Context", 14, [
                                        normalization$4,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 6 : 
          var normalization$5 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalTypeAndContext */Block.variant("GoalTypeAndContext", 15, [
                                        normalization$5,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 7 : 
          var normalization$6 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalTypeAndInferredType */Block.variant("GoalTypeAndInferredType", 16, [
                                        normalization$6,
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(Instance__TextEditors$AgdaMode.getGoalIndex)(Instance__TextEditors$AgdaMode.getPointedGoal(instance)));
      case 8 : 
          var enabled = atom.config.get("agda-mode.inputMethod");
          if (enabled) {
            switch (command[0]) {
              case 0 : 
                  Event$AgdaMode.emitOk(true, instance[/* view */2][/* activatePanel */3]);
                  Event$AgdaMode.emitOk(true, instance[/* view */2][/* activateInputMethod */13]);
                  break;
              case 1 : 
                  Event$AgdaMode.emitOk("{", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 2 : 
                  Event$AgdaMode.emitOk("[", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 3 : 
                  Event$AgdaMode.emitOk("(", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 4 : 
                  Event$AgdaMode.emitOk("\"", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 5 : 
                  Event$AgdaMode.emitOk("'", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 6 : 
                  Event$AgdaMode.emitOk("`", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              
            }
          } else {
            Editors$AgdaMode.Focus[/* get */0](instance[/* editors */1]).insertText("\\");
          }
          return Async$AgdaMode.resolve(undefined);
      case 9 : 
          var range = command[0];
          var filePath = instance[/* editors */1][/* source */1].getPath();
          var shouldJump;
          if (range) {
            var match = range[0];
            shouldJump = match !== undefined ? match === filePath : true;
          } else {
            shouldJump = false;
          }
          if (shouldJump) {
            var ranges = Type__Location$AgdaMode.Range[/* toAtomRanges */2](range);
            if (Rebase.Option[/* isSome */13](Rebase.$$Array[/* get */17](ranges, 0))) {
              setTimeout((function (param) {
                      instance[/* editors */1][/* source */1].setSelectedBufferRanges(ranges);
                      return /* () */0;
                    }), 0);
            }
            
          }
          return Async$AgdaMode.resolve(undefined);
      
    }
  }
}

function handleRemoteCommand(instance, remote) {
  if (remote !== undefined) {
    var cmd = remote;
    var serialized = Command$AgdaMode.Remote[/* serialize */0](cmd);
    return Async$AgdaMode.thenOk((function (param) {
                    return handleResponses(instance, param);
                  }))(Async$AgdaMode.thenOk((function (responses) {
                        return Async$AgdaMode.mapError((function (e) {
                                        return /* ParseError */Block.variant("ParseError", 0, [e]);
                                      }))(Async$AgdaMode.lift(Response$AgdaMode.parse, responses));
                      }))(Async$AgdaMode.mapError((function (err) {
                            return /* ConnectionError */Block.variant("ConnectionError", 1, [/* ConnectionError */Block.variant("ConnectionError", 2, [err])]);
                          }))(Connection$AgdaMode.send(serialized, cmd[/* connection */0]))));
  } else {
    return Async$AgdaMode.resolve(/* () */0);
  }
}

function dispatch(command, instance) {
  return Async$AgdaMode.thenOk((function (param) {
                  return handleRemoteCommand(instance, param);
                }))(handleLocalCommand(command, instance));
}

var Goals = 0;

var Views = 0;

var Highlightings = 0;

var Connections = 0;

var TextEditors = 0;

exports.Goals = Goals;
exports.Views = Views;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handleCommandError = handleCommandError;
exports.handleResponse = handleResponse;
exports.handleResponses = handleResponses;
exports.handleLocalCommand = handleLocalCommand;
exports.handleRemoteCommand = handleRemoteCommand;
exports.dispatch = dispatch;
/* fs Not a pure module */
