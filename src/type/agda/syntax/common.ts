import * as P from './position';

////////////////////////////////////////////////////////////////////////////////
// Induction

export type Induction = 'Inductive' | 'CoInductive';

////////////////////////////////////////////////////////////////////////////////
// Overlappable

export type Overlappable = 'YesOverlap' | 'NoOverlap';

////////////////////////////////////////////////////////////////////////////////
// Hiding

export type Hiding = Hiding_Hidden | Hiding_NotHidden | Hiding_Instance;
export type Hiding_Hidden = {
    kind: 'Hidden';
}
export type Hiding_NotHidden = {
    kind: 'NotHidden';
}
export type Hiding_Instance = {
    kind: 'Instance';
    overlappable: Overlappable;
}

////////////////////////////////////////////////////////////////////////////////
// ArgInfo

export type ArgInfo = {
    hiding: Hiding;
    modality: Modality;
    origin: Origin;
    freeVars: FreeVariables;
};


////////////////////////////////////////////////////////////////////////////////
// Modality

export type Modality = {
    relevance: Relevance;
    quantity: Quantity;
};

////////////////////////////////////////////////////////////////////////////////
// Quantity

export type Quantity = 'Quantity0' | 'QuantityÏ‰';

////////////////////////////////////////////////////////////////////////////////
// Relevance

export type Relevance = 'Relevant' | 'NonStrict' | 'Irrelevant';

////////////////////////////////////////////////////////////////////////////////
// Origin

export type Origin = 'UserWritten' | 'Inserted' | 'Reflected' |
  'CaseSplit' | 'Substitution';

////////////////////////////////////////////////////////////////////////////////
// FreeVariables

export type FreeVariables = null | number[];

////////////////////////////////////////////////////////////////////////////////
// MetaId

export type MetaId = number;

////////////////////////////////////////////////////////////////////////////////
// Arguments

export type Arg<T> = {
    argInfo: ArgInfo;
    payload: T;
};

////////////////////////////////////////////////////////////////////////////////
// Domain

export type Dom<T> = {
    argInfo: ArgInfo;
    finite: boolean;
    payload: T;
};

////////////////////////////////////////////////////////////////////////////////
// ConOrigin

export type ConOrigin = 'ConOSystem' | 'ConOCon' | 'ConORec' | 'ConOSplit';

////////////////////////////////////////////////////////////////////////////////
// ProjOrigin

export type ProjOrigin = 'ProjPrefix' | 'ProjPostfix' | 'ProjSystem';

////////////////////////////////////////////////////////////////////////////////
// NameId

export type NameId = {
    name: string;
    module: string;
};

////////////////////////////////////////////////////////////////////////////////
// Ranged

export type Ranged<T> = {
    range: P.Range;
    payload: T;
};
export type RString = Ranged<string>;


////////////////////////////////////////////////////////////////////////////////
// Named

export type Named<N, T> = {
    range: N | null;
    payload: T;
};

////////////////////////////////////////////////////////////////////////////////
// NamedArg
export type Named_<T> = Named<RString, T>;
export type NamedArg<T> = Arg<Named_<T>>;
