// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Instance$AgdaMode = require("../src/Instance.bs.js");
var Connection$AgdaMode = require("../src/Connection.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Instance__Handler$AgdaMode = require("../src/Instance/Instance__Handler.bs.js");
var Instance__Connections$AgdaMode = require("../src/Instance/Instance__Connections.bs.js");

Mocha$BsMocha.describe_skip("when loading files")(undefined, undefined, undefined, (function (param) {
        return Mocha$BsMocha.describe("when parsing responses from Agda")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("should succeed")(undefined, undefined, undefined, (function (param) {
                                    var path = Test__Util$AgdaMode.Path.asset("Algebra.agda");
                                    return Test__Util$AgdaMode.$$File.open_(path).then((function (editor) {
                                                  var instance = Instance$AgdaMode.make(editor);
                                                  return $$Promise.Js.toBsPromise($$Promise.flatMapOk($$Promise.mapError($$Promise.mapOk($$Promise.mapOk($$Promise.mapOk($$Promise.flatMapOk($$Promise.mapOk(Connection$AgdaMode.autoSearch("agda"), (function (x) {
                                                                                            return x + " --no-libraries";
                                                                                          })), Connection$AgdaMode.validateAndMake), Connection$AgdaMode.connect), Connection$AgdaMode.wire), (function (param) {
                                                                            return Instance__Connections$AgdaMode.set(instance, param);
                                                                          })), Assert$BsMocha.fail), (function (param) {
                                                                    return $$Promise.mapError($$Promise.mapOk($$Promise.flatMapOk(Instance__Handler$AgdaMode.handleLocalCommand(/* Load */0, instance), (function (param) {
                                                                                          return Instance__Handler$AgdaMode.handleRemoteCommand(instance, (function (param, param$1) {
                                                                                                        return $$Promise.resolved(/* () */0);
                                                                                                      }), param);
                                                                                        })), (function (param) {
                                                                                      return Test__Util$AgdaMode.Assert.ok(/* () */0);
                                                                                    })), (function (error) {
                                                                                  Assert$BsMocha.fail(error);
                                                                                  return /* () */0;
                                                                                }));
                                                                  })));
                                                }));
                                  }));
                    }));
      }));

/*  Not a pure module */
