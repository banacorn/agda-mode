// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Range$AgdaMode = require("./Range.bs.js");
var Context$AgdaMode = require("./Context.bs.js");
var Decoder$AgdaMode = require("./Decoder.bs.js");
var TypeError$AgdaMode = require("./TypeError.bs.js");

function typeErrorToHeader(error) {
  if (error.tag) {
    return "UnregisteredTypeError";
  } else {
    return "Unequal Terms";
  }
}

function errorToHeader(error) {
  switch (error.tag | 0) {
    case 0 : 
        return "Type Error: " + typeErrorToHeader(error[2]);
    case 1 : 
        return "Exception";
    case 2 : 
        return "IOException";
    case 3 : 
        return "PatternError";
    
  }
}

var component = ReasonReact.statelessComponent("Error");

function make(error, emacsMessage, emit, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                var decodedError = Decoder$AgdaMode.parseError(error);
                console.log(decodedError);
                switch (decodedError.tag | 0) {
                  case 0 : 
                      return ReasonReact.element(undefined, undefined, Curry._2(Context$AgdaMode.Emitter[/* Provider */1][/* make */0], emit, /* array */[React.createElement("section", {
                                            className: "error"
                                          }, ReasonReact.element(undefined, undefined, Range$AgdaMode.make(decodedError[0], undefined, /* array */[])), ReasonReact.element(undefined, undefined, TypeError$AgdaMode.make(decodedError[2], emacsMessage, /* array */[])))]));
                  case 1 : 
                  case 2 : 
                      return React.createElement("section", {
                                  className: "error"
                                }, emacsMessage);
                  case 3 : 
                      return React.createElement("section", {
                                  className: "error"
                                }, "Pattern violation (you shouldn't see this)");
                  
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.error, jsProps.emacsMessage, jsProps.emit, /* array */[]);
      }));

exports.typeErrorToHeader = typeErrorToHeader;
exports.errorToHeader = errorToHeader;
exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
