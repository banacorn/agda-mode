// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Parser$AgdaMode = require("../../src/Parser.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Test__Util$AgdaMode = require("../Test__Util.bs.js");

function parseSExpression(breakpoints, input) {
  var output = {
    contents: []
  };
  var parser = Parser$AgdaMode.SExpression.makeIncr(function (param) {
        if (!param) {
          return ;
        }
        var err = param._0;
        if (err.TAG) {
          return Curry._1(Test__Util$AgdaMode.Assert.fail, "Failed when parsing S-expression: " + Parser$AgdaMode.$$Error.toString(err._0));
        }
        output.contents.push(err._0);
        
      });
  Belt_Array.forEach(Belt_Array.concatMany(Belt_Array.map(Test__Util$AgdaMode.breakInput(input.trim(), breakpoints), Parser$AgdaMode.split)), (function (param) {
          return Parser$AgdaMode.Incr.feed(parser, param);
        }));
  return output.contents;
}

Mocha$BsMocha.describe("when parsing S-expressions wholly")(undefined, undefined, undefined, (function (param) {
        return Belt_Array.forEach(Test__Util$AgdaMode.Golden.getGoldenFilepathsSync("test/Parser/SExpression"), (function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    return Test__Util$AgdaMode.Golden.readFile(filepath).then(function (raw) {
                                                var partial_arg = [];
                                                return Test__Util$AgdaMode.Golden.compare(Test__Util$AgdaMode.Golden.map(Test__Util$AgdaMode.Golden.map(raw, (function (param) {
                                                                      return parseSExpression(partial_arg, param);
                                                                    })), (function (param) {
                                                                  return Test__Util$AgdaMode.serializeWith(Parser$AgdaMode.SExpression.toString, param);
                                                                })));
                                              });
                                  }));
                    }));
      }));

Mocha$BsMocha.describe("when parsing S-expressions incrementally")(undefined, undefined, undefined, (function (param) {
        return Belt_Array.forEach(Test__Util$AgdaMode.Golden.getGoldenFilepathsSync("test/Parser/SExpression"), (function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    return Test__Util$AgdaMode.Golden.readFile(filepath).then(function (raw) {
                                                var partial_arg = [
                                                  3,
                                                  23,
                                                  171,
                                                  217,
                                                  1234,
                                                  2342,
                                                  3453
                                                ];
                                                return Test__Util$AgdaMode.Golden.compare(Test__Util$AgdaMode.Golden.map(Test__Util$AgdaMode.Golden.map(raw, (function (param) {
                                                                      return parseSExpression(partial_arg, param);
                                                                    })), (function (param) {
                                                                  return Test__Util$AgdaMode.serializeWith(Parser$AgdaMode.SExpression.toString, param);
                                                                })));
                                              });
                                  }));
                    }));
      }));

exports.parseSExpression = parseSExpression;
/*  Not a pure module */
