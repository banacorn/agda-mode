// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Diff = require("diff");
var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Parser$AgdaMode = require("../src/Parser.bs.js");
var Response$AgdaMode = require("../src/Response.bs.js");
var Connection$AgdaMode = require("../src/Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var base = Path.join(__dirname, "../../../");

function file(path) {
  return Path.join(base, path);
}

function asset(path) {
  return Path.join(Path.join(base, "test/asset"), path);
}

function openFile(uri) {
  return atom.workspace.open(uri);
}

function closeFile(uri) {
  var pane = atom.workspace.paneForURI(uri);
  if (pane !== undefined) {
    var p = Caml_option.valFromOption(pane);
    var item = p.itemForURI(uri);
    if (item !== undefined) {
      return p.destroyItem(Caml_option.valFromOption(item), true);
    } else {
      return Promise.resolve(false);
    }
  } else {
    return Promise.resolve(false);
  }
}

function getActivePackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getActivePackages());
}

function getLoadedPackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getLoadedPackages());
}

var DispatchFailure = Caml_exceptions.create("Test__Util-AgdaMode.DispatchFailure");

function dispatch(editor, $$event) {
  var element = atom.views.getView(editor);
  var result = atom.commands.dispatch(element, $$event);
  if (result !== undefined) {
    return Promise.resolve(/* () */0);
  } else {
    return Promise.reject([
                DispatchFailure,
                $$event
              ]);
  }
}

function singleRegressionTest(fileName, param) {
  var input = Fs.readFileSync("test/TestInputs/" + (fileName + ".in"), "utf8");
  var expectedOutput = Fs.readFileSync("test/TestInputs/" + (fileName + ".out"), "utf8");
  var partial_arg = Rebase.Result[/* flatMap */6];
  var toResponse = Curry._1(Parser$AgdaMode.Incr[/* Event */0][/* map */1], (function (param) {
          return partial_arg(Response$AgdaMode.parse, param);
        }));
  var actualOutput = /* record */Caml_chrome_debugger.record(["contents"], [""]);
  var parser = Parser$AgdaMode.SExpression[/* makeIncr */5]((function (x) {
          var param = Curry._1(toResponse, x);
          if (param) {
            var match = param[0];
            if (match.tag) {
              return Assert$BsMocha.fail("Parsing failed");
            } else {
              actualOutput[0] = actualOutput[0] + (Response$AgdaMode.toString(match[0]) + "\n");
              return /* () */0;
            }
          } else {
            return /* () */0;
          }
        }));
  Connection$AgdaMode.parseAgdaOutput(parser, input);
  Rebase.$$Array[/* forEach */8]((function (diff) {
          if (diff.added) {
            Assert$BsMocha.fail("Unexpected string added: " + diff.value);
          }
          if (diff.removed) {
            return Assert$BsMocha.fail("Unexpected string missing: " + diff.value);
          } else {
            return 0;
          }
        }), Rebase.$$Array[/* filter */10]((function (diff) {
              if (diff.added) {
                return true;
              } else {
                return diff.removed;
              }
            }), Diff.diffLines(expectedOutput, actualOutput[0])));
  return Promise.resolve(/* () */0);
}

exports.base = base;
exports.file = file;
exports.asset = asset;
exports.openFile = openFile;
exports.closeFile = closeFile;
exports.getActivePackageNames = getActivePackageNames;
exports.getLoadedPackageNames = getLoadedPackageNames;
exports.DispatchFailure = DispatchFailure;
exports.dispatch = dispatch;
exports.singleRegressionTest = singleRegressionTest;
/* base Not a pure module */
