// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Log$AgdaMode = require("./Log.bs.js");
var Util$AgdaMode = require("./Util/Util.bs.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Process$AgdaMode = require("./Process.bs.js");
var Response$AgdaMode = require("./Response.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  switch (param.tag | 0) {
    case /* PathSearch */0 :
        return Curry._1(Process$AgdaMode.PathSearch.$$Error.toString, param[0]);
    case /* Validation */1 :
        return Curry._1(Process$AgdaMode.Validation.$$Error.toString, param[0]);
    case /* Process */2 :
        return Process$AgdaMode.$$Error.toString(param[0]);
    
  }
}

var $$Error = {
  toString: toString
};

function toString$1(param) {
  if (param) {
    return "Emacs / JSON";
  } else {
    return "Emacs";
  }
}

var Protocol = {
  toString: toString$1
};

function serialize(self) {
  var path = "* path: " + self.path;
  var args = "* args: " + Util$AgdaMode.Pretty.array(self.args);
  var version = "* version: " + self.version;
  var protocol = "* protocol: " + (
    self.protocol ? "Emacs / JSON" : "Emacs"
  );
  var os = "* platform: " + Os.type();
  return "## Parse Log\n" + (String(path) + ("\n" + (String(args) + ("\n" + (String(version) + ("\n" + (String(protocol) + ("\n" + (String(os) + "\n  ")))))))));
}

var Metadata = {
  Protocol: Protocol,
  serialize: serialize
};

function disconnect(error, self) {
  Curry._1(self.process.disconnect, /* () */0);
  Rebase.List.forEach((function (ev) {
          return Curry._1(ev.emit, /* Error */Caml_chrome_debugger.variant("Error", 1, [error]));
        }), self.queue);
  self.queue = /* [] */0;
  self.encountedFirstPrompt = false;
  self.log = [];
  return /* () */0;
}

function autoSearch(name) {
  return $$Promise.mapError(Process$AgdaMode.PathSearch.run(name), (function (e) {
                return /* PathSearch */Caml_chrome_debugger.variant("PathSearch", 0, [e]);
              }));
}

function validateAndMake(pathAndParams) {
  var validator = function (output) {
    var match = output.match(/Agda version (.*)/);
    if (match !== null) {
      var match$1 = Rebase.$$Array.get(match, 1);
      if (match$1 !== undefined) {
        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* tuple */[
                    match$1,
                    /--interaction-json/.test(output) ? /* EmacsAndJSON */1 : /* EmacsOnly */0
                  ]]);
      } else {
        return /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read Agda version"]);
      }
    } else {
      return /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read Agda version"]);
    }
  };
  var match = Parser$AgdaMode.commandLine(pathAndParams);
  var args = match[1];
  var path = match[0];
  return $$Promise.mapError($$Promise.mapOk(Process$AgdaMode.Validation.run(path + " -V", validator), (function (param) {
                    return {
                            path: path,
                            args: args,
                            version: param[0],
                            protocol: param[1]
                          };
                  })), (function (e) {
                return /* Validation */Caml_chrome_debugger.variant("Validation", 1, [e]);
              }));
}

function connect(metadata) {
  var args = Rebase.$$Array.concat(metadata.args, ["--interaction"]);
  var $$process = Process$AgdaMode.make(metadata.path, args);
  return {
          metadata: metadata,
          process: $$process,
          queue: /* [] */0,
          resetLogOnLoad: true,
          encountedFirstPrompt: false,
          log: []
        };
}

function wire(self) {
  var logSExpression = Curry._1(Parser$AgdaMode.Incr.$$Event.tap, (function (param) {
          return Rebase.Result.forEach((function (expr) {
                        return Log$AgdaMode.logSExpression(expr)(self.log);
                      }), param);
        }));
  var toResponse = Curry._1(Parser$AgdaMode.Incr.$$Event.flatMap, (function (param) {
          if (param.tag) {
            return /* Yield */Caml_chrome_debugger.simpleVariant("Yield", [/* Error */Caml_chrome_debugger.variant("Error", 1, [param[0]])]);
          } else {
            var tokens = param[0];
            if (tokens.tag || tokens[0] !== "Agda2>") {
              return /* Yield */Caml_chrome_debugger.simpleVariant("Yield", [Response$AgdaMode.parse(tokens)]);
            } else {
              return /* Stop */0;
            }
          }
        }));
  var logResponse = Curry._1(Parser$AgdaMode.Incr.$$Event.tap, (function (param) {
          return Rebase.Result.forEach((function (expr) {
                        return Log$AgdaMode.logResponse(expr)(self.log);
                      }), param);
        }));
  var handleResponse = function (res) {
    var match = self.queue;
    if (match) {
      var req = match[0];
      if (res) {
        return Curry._1(req.emit, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* Yield */Caml_chrome_debugger.simpleVariant("Yield", [res[0]])]));
      } else if (self.encountedFirstPrompt) {
        Curry._1(req.emit, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* Stop */0]));
        self.queue = match[1];
        Curry._1(req.destroy, /* () */0);
        return /* () */0;
      } else {
        self.encountedFirstPrompt = true;
        return /* () */0;
      }
    } else {
      return /* () */0;
    }
  };
  var pipeline = Parser$AgdaMode.SExpression.makeIncr(Curry._2(Rebase.Fn.$great$great, Curry._2(Rebase.Fn.$great$great, Curry._2(Rebase.Fn.$great$great, logSExpression, toResponse), logResponse), handleResponse));
  var onData = function (param) {
    if (param.tag) {
      var e = param[0];
      Rebase.List.forEach((function (req) {
              Curry._1(req.emit, /* Error */Caml_chrome_debugger.variant("Error", 1, [e]));
              return Curry._1(req.destroy, /* () */0);
            }), self.queue);
      self.queue = /* [] */0;
      return /* () */0;
    } else {
      var rawText = param[0];
      Log$AgdaMode.logRawText(rawText)(self.log);
      return Rebase.$$Array.forEach((function (param) {
                    return Parser$AgdaMode.Incr.feed(pipeline, param);
                  }), Curry._1(Parser$AgdaMode.split, rawText));
    }
  };
  Curry._1(self.process.emitter.on, onData);
  return self;
}

function send(request, self) {
  var reqEvent = Event$AgdaMode.make(/* () */0);
  self.queue = /* :: */Caml_chrome_debugger.simpleVariant("::", [
      reqEvent,
      self.queue
    ]);
  Curry._1(self.process.send, request);
  return reqEvent;
}

function resetLog(self) {
  self.log = [];
  return /* () */0;
}

function dump(self) {
  var serialize$1 = function (self) {
    var metadata = serialize(self.metadata);
    var log = Curry._1(Log$AgdaMode.serialize, self.log);
    return metadata + ("\n" + (log + "\n"));
  };
  var text = serialize$1(self);
  var itemOptions = {
    initialLine: 0,
    initialColumn: 0,
    split: "left",
    activatePane: true,
    activateItem: true,
    pending: false,
    searchAllPanes: true,
    location: undefined
  };
  $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(atom.workspace.open("agda-mode://log.md", itemOptions))), (function (param) {
          if (param.tag) {
            return /* () */0;
          } else {
            param[0].insertText(text);
            return /* () */0;
          }
        }));
  return /* () */0;
}

exports.$$Error = $$Error;
exports.Metadata = Metadata;
exports.disconnect = disconnect;
exports.autoSearch = autoSearch;
exports.validateAndMake = validateAndMake;
exports.connect = connect;
exports.wire = wire;
exports.send = send;
exports.resetLog = resetLog;
exports.dump = dump;
/* os Not a pure module */
