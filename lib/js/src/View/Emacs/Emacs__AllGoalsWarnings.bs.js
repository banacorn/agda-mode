// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaMode = require("../../Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Emacs__Parser$AgdaMode = require("./Emacs__Parser.bs.js");
var Emacs__Component$AgdaMode = require("./Emacs__Component.bs.js");

function toString(self) {
  return "Metas " + (self[/* title */0] + ("\n" + (Util$AgdaMode.Pretty.array($$Array.map(Emacs__Component$AgdaMode.Output.toString, self[/* interactionMetas */1])) + ("\n" + (Util$AgdaMode.Pretty.array($$Array.map(Emacs__Component$AgdaMode.Output.toString, self[/* hiddenMetas */2])) + ("\n" + (Util$AgdaMode.Pretty.array($$Array.map(Emacs__Component$AgdaMode.WarningError.toString, self[/* warnings */3])) + ("\n" + Util$AgdaMode.Pretty.array($$Array.map(Emacs__Component$AgdaMode.WarningError.toString, self[/* errors */4]))))))))));
}

function parse(title, body) {
  var partiteAllGoalsWarnings = function (title, body) {
    var lines = body.split("\n");
    var hasMetas = Rebase.$$Option.isSome(Caml_option.null_to_opt(title.match((/Goals/))));
    var hasWarnings = Rebase.$$Option.isSome(Caml_option.null_to_opt(title.match((/Warnings/))));
    var hasErrors = Rebase.$$Option.isSome(Caml_option.null_to_opt(title.match((/Errors/))));
    var markMetas = function (param) {
      var match = hasMetas && param[1] === 0;
      if (match) {
        return "metas";
      }
      
    };
    var markWarnings = function (param) {
      if (hasWarnings) {
        if (hasMetas) {
          return Rebase.$$Option.map((function (param) {
                        return "warnings";
                      }), Caml_option.null_to_opt(param[0].slice(5, 13).match((/Warnings/))));
        } else {
          var match = param[1] === 0;
          if (match) {
            return "warnings";
          } else {
            return ;
          }
        }
      }
      
    };
    var markErrors = function (param) {
      if (hasErrors) {
        var match = hasMetas || hasWarnings;
        if (match) {
          return Rebase.$$Option.map((function (param) {
                        return "errors";
                      }), Caml_option.null_to_opt(param[0].slice(5, 11).match((/Errors/))));
        } else {
          var match$1 = param[1] === 0;
          if (match$1) {
            return "errors";
          } else {
            return ;
          }
        }
      }
      
    };
    return Util$AgdaMode.Dict.partite((function (line) {
                  return Rebase.$$Option.or_(Rebase.$$Option.or_(markMetas(line), markWarnings(line)), markErrors(line));
                }), lines);
  };
  var dictionary = Emacs__Parser$AgdaMode.partiteWarningsOrErrors("errors")(Emacs__Parser$AgdaMode.partiteWarningsOrErrors("warnings")(Emacs__Parser$AgdaMode.partiteMetas(partiteAllGoalsWarnings(title, body))));
  var interactionMetas = Rebase.$$Option.mapOr((function (metas) {
          return Rebase.$$Array.filterMap((function (x) {
                        return x;
                      }), Rebase.$$Array.map(Emacs__Component$AgdaMode.Output.parseOutputWithoutRange, metas));
        }), /* array */[], Js_dict.get(dictionary, "interactionMetas"));
  var hiddenMetas = Rebase.$$Option.mapOr((function (metas) {
          return Rebase.$$Array.filterMap((function (x) {
                        return x;
                      }), Rebase.$$Array.map(Emacs__Component$AgdaMode.Output.parseOutputWithRange, metas));
        }), /* array */[], Js_dict.get(dictionary, "hiddenMetas"));
  var warnings = Rebase.$$Option.mapOr((function (entries) {
          return Rebase.$$Array.filterMap((function (x) {
                        return x;
                      }), Rebase.$$Array.map(Emacs__Component$AgdaMode.WarningError.parseWarning, entries));
        }), /* array */[], Js_dict.get(dictionary, "warnings"));
  var errors = Rebase.$$Option.mapOr((function (entries) {
          return Rebase.$$Array.filterMap((function (x) {
                        return x;
                      }), Rebase.$$Array.map(Emacs__Component$AgdaMode.WarningError.parseError, entries));
        }), /* array */[], Js_dict.get(dictionary, "errors"));
  return /* record */Caml_chrome_debugger.record([
            "title",
            "interactionMetas",
            "hiddenMetas",
            "warnings",
            "errors"
          ], [
            title,
            interactionMetas,
            hiddenMetas,
            warnings,
            errors
          ]);
}

function Emacs__AllGoalsWarnings(Props) {
  var value = Props.value;
  var partial_arg = Util$AgdaMode.React.manyIn;
  var arg = function (param) {
    return partial_arg("ul", param);
  };
  var partial_arg$1 = Util$AgdaMode.React.manyIn;
  var arg$1 = function (param) {
    return partial_arg$1("ul", param);
  };
  var partial_arg$2 = Util$AgdaMode.React.manyIn;
  var arg$2 = function (param) {
    return partial_arg$2("ul", param);
  };
  var partial_arg$3 = Util$AgdaMode.React.manyIn;
  var arg$3 = function (param) {
    return partial_arg$3("ul", param);
  };
  return React.createElement(React.Fragment, undefined, (function (eta) {
                  return Curry._2(arg, undefined, eta);
                })($$Array.map((function (value) {
                        return React.createElement(Emacs__Component$AgdaMode.Output.make, {
                                    value: value
                                  });
                      }), value[/* interactionMetas */1])), (function (eta) {
                  return Curry._2(arg$1, undefined, eta);
                })($$Array.map((function (value) {
                        return React.createElement(Emacs__Component$AgdaMode.Output.make, {
                                    value: value
                                  });
                      }), value[/* hiddenMetas */2])), (function (eta) {
                  return Curry._2(arg$2, undefined, eta);
                })($$Array.map((function (value) {
                        return React.createElement(Emacs__Component$AgdaMode.WarningError.make, {
                                    value: value
                                  });
                      }), value[/* warnings */3])), (function (eta) {
                  return Curry._2(arg$3, undefined, eta);
                })($$Array.map((function (value) {
                        return React.createElement(Emacs__Component$AgdaMode.WarningError.make, {
                                    value: value
                                  });
                      }), value[/* errors */4])));
}

var make = Emacs__AllGoalsWarnings;

exports.toString = toString;
exports.parse = parse;
exports.make = make;
/* react Not a pure module */
