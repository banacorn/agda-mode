// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Util$AgdaMode = require("../../Util.bs.js");

function unindent(lines) {
  var newLineIndices = Rebase.$$Array[/* map */0]((function (param) {
          return param[2];
        }), Rebase.$$Array[/* filter */10]((function (param) {
              var line = param[0];
              var nextLine = param[1];
              var sort = (/^Sort \S*/);
              var delimeter = (/^\u2014{4}/g);
              var completeJudgement = (/^(?:(?:[^\(\{\s]+\s+\:)|Have\:|Goal\:)\s* \S*/);
              var reallyLongTermIdentifier = (/^\S+$/);
              var restOfTheJudgement = (/^\s*\:\s* \S*/);
              if (sort.test(line) || delimeter.test(line) || reallyLongTermIdentifier.test(line) && Rebase.Option[/* exists */9]((function (line) {
                        return restOfTheJudgement.test(line);
                      }), nextLine)) {
                return true;
              } else {
                return completeJudgement.test(line);
              }
            }), Rebase.$$Array[/* mapi */28]((function (line, index) {
                  return /* tuple */[
                          line,
                          Rebase.$$Array[/* get */17](lines, index + 1 | 0),
                          index
                        ];
                }), lines)));
  return Rebase.$$Array[/* map */0]((function (param) {
                return Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](Rebase.$$Array[/* slice */25](param[0], param[1], lines)));
              }), Rebase.$$Array[/* mapi */28]((function (index, i) {
                    var match = Rebase.$$Array[/* get */17](newLineIndices, i + 1 | 0);
                    if (match !== undefined) {
                      return /* tuple */[
                              index,
                              match
                            ];
                    } else {
                      return /* tuple */[
                              index,
                              Rebase.$$Array[/* length */16](lines) + 1 | 0
                            ];
                    }
                  }), newLineIndices));
}

var filepath = /* String */Block.variant("String", 1, [(function (raw) {
        var parsed = Path.parse(raw.replace("\n", ""));
        var joined = Rebase.$$String[/* joinWith */11]("/", Rebase.List[/* fromArray */12](Path.join(parsed.dir, parsed.base).split(Path.sep)));
        if (joined.charCodeAt(0) === 8234.0) {
          return Rebase.Option[/* some */11](joined.slice(1).trim());
        } else {
          return Rebase.Option[/* some */11](joined.trim());
        }
      })]);

var expr = /* String */Block.variant("String", 1, [(function (raw) {
        var tokens = Rebase.$$String[/* trim */8](raw).split((/(\?\d+)|(\_\d+[^\}\)\s]*)/));
        return Rebase.Option[/* some */11](Rebase.$$Array[/* mapi */28]((function (token, i) {
                          var match = i % 3;
                          if (match !== 1) {
                            if (match !== 2) {
                              return /* Plain */Block.variant("Plain", 0, [token]);
                            } else {
                              return /* Underscore */Block.variant("Underscore", 2, [token]);
                            }
                          } else {
                            return /* QuestionMark */Block.variant("QuestionMark", 1, [token]);
                          }
                        }), tokens));
      })]);

var ofType_000 = (/^([^\:]*) \: ((?:\n|.)+)/);

function ofType_001(captured) {
  return Rebase.Option[/* flatMap */5]((function (type_) {
                return Rebase.Option[/* flatMap */5]((function (term) {
                              return /* OfType */Block.variant("OfType", 0, [
                                        term,
                                        type_
                                      ]);
                            }), Util$AgdaMode.Parser[/* at */3](1, expr, captured));
              }), Util$AgdaMode.Parser[/* at */3](2, expr, captured));
}

var ofType = /* Regex */Block.variant("Regex", 0, [
    ofType_000,
    ofType_001
  ]);

var justType_000 = (/^Type ((?:\n|.)+)/);

function justType_001(captured) {
  return Rebase.Option[/* map */0]((function (type_) {
                return /* JustType */Block.variant("JustType", 1, [type_]);
              }), Util$AgdaMode.Parser[/* at */3](1, expr, captured));
}

var justType = /* Regex */Block.variant("Regex", 0, [
    justType_000,
    justType_001
  ]);

var justSort_000 = (/^Sort ((?:\n|.)+)/);

function justSort_001(captured) {
  return Rebase.Option[/* map */0]((function (sort) {
                return /* JustSort */Block.variant("JustSort", 2, [sort]);
              }), Util$AgdaMode.Parser[/* at */3](1, expr, captured));
}

var justSort = /* Regex */Block.variant("Regex", 0, [
    justSort_000,
    justSort_001
  ]);

var others = /* String */Block.variant("String", 1, [(function (raw) {
        return Rebase.Option[/* map */0]((function (raw$prime) {
                      return /* Others */Block.variant("Others", 3, [raw$prime]);
                    }), Util$AgdaMode.Parser[/* parse */1](expr, raw));
      })]);

var OutputConstraint = /* module */Block.localModule([
    "ofType",
    "justType",
    "justSort",
    "others"
  ], [
    ofType,
    justType,
    justSort,
    others
  ]);

var outputConstraint = Util$AgdaMode.Parser[/* choice */4](/* array */[
      ofType,
      justType,
      justSort,
      others
    ]);

var outputWithoutRange = /* String */Block.variant("String", 1, [(function (raw) {
        return Rebase.Option[/* map */0]((function (x) {
                      return /* Output */Block.simpleVariant("Output", [
                                x,
                                undefined
                              ]);
                    }), Util$AgdaMode.Parser[/* parse */1](outputConstraint, raw));
      })]);

var outputWithRange_000 = (/((?:\n|.)*\S+)\s*\[ at (.+):(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+)) \]/);

function outputWithRange_001(captured) {
  return Rebase.Option[/* flatMap */5]((function (raw) {
                var rowStart = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 7)), Rebase.$$Array[/* get */17](captured, 3))));
                var rowEnd = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 7)), Rebase.$$Array[/* get */17](captured, 5))));
                var colStart = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 8)), Rebase.$$Array[/* get */17](captured, 4))));
                var colEnd = Caml_format.caml_int_of_string(Rebase.Option[/* getOr */16]("0", Rebase.Option[/* getOr */16](Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 9)), Rebase.$$Array[/* get */17](captured, 6))));
                var start = /* record */Block.record([
                    "pos",
                    "line",
                    "col"
                  ], [
                    undefined,
                    rowStart,
                    colStart
                  ]);
                var end_ = /* record */Block.record([
                    "pos",
                    "line",
                    "col"
                  ], [
                    undefined,
                    rowEnd,
                    colEnd
                  ]);
                return Rebase.Option[/* map */0]((function (parsed) {
                              var path = Util$AgdaMode.Parser[/* at */3](2, filepath, captured);
                              return /* Output */Block.simpleVariant("Output", [
                                        parsed,
                                        /* Range */Block.simpleVariant("Range", [
                                            path,
                                            /* :: */Block.simpleVariant("::", [
                                                /* record */Block.record([
                                                    "start",
                                                    "end_"
                                                  ], [
                                                    start,
                                                    end_
                                                  ]),
                                                /* [] */0
                                              ])
                                          ])
                                      ]);
                            }), Util$AgdaMode.Parser[/* parse */1](outputConstraint, raw));
              }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 1)));
}

var outputWithRange = /* Regex */Block.variant("Regex", 0, [
    outputWithRange_000,
    outputWithRange_001
  ]);

var Output = /* module */Block.localModule([
    "outputWithoutRange",
    "outputWithRange"
  ], [
    outputWithoutRange,
    outputWithRange
  ]);

var output = /* String */Block.variant("String", 1, [(function (raw) {
        var rangeRe = (/\[ at (.+):(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+)) \]$/);
        var hasRange = rangeRe.test(raw);
        if (hasRange) {
          return Util$AgdaMode.Parser[/* parse */1](outputWithRange, raw);
        } else {
          return Util$AgdaMode.Parser[/* parse */1](outputWithoutRange, raw);
        }
      })]);

function allGoalsWarnings(title, body) {
  var partiteAllGoalsWarnings = function (title, body) {
    var lines = body.split("\n");
    var hasMetas = Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(title.match((/Goals/))));
    var hasWarnings = Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(title.match((/Warnings/))));
    var hasErrors = Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(title.match((/Errors/))));
    var match = Rebase.Option[/* getOr */16](/* tuple */[
          0,
          ""
        ], Rebase.$$Array[/* findIndex */30]((function (s) {
                return Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(s.slice(5, 13).match((/Warnings/))));
              }), lines));
    var indexOfWarnings = match[0];
    var match$1 = Rebase.Option[/* getOr */16](/* tuple */[
          0,
          ""
        ], Rebase.$$Array[/* findIndex */30]((function (s) {
                return Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(s.slice(5, 11).match((/Errors/))));
              }), lines));
    var indexOfErrors = match$1[0];
    if (hasMetas) {
      if (hasWarnings) {
        if (hasErrors) {
          return /* record */Block.record([
                    "metas",
                    "warnings",
                    "errors"
                  ], [
                    unindent(Rebase.$$Array[/* slice */25](0, indexOfWarnings, lines)),
                    Rebase.$$Array[/* slice */25](indexOfWarnings + 1 | 0, indexOfErrors, lines),
                    Rebase.$$Array[/* sliceFrom */26](indexOfErrors + 1 | 0, lines)
                  ]);
        } else {
          return /* record */Block.record([
                    "metas",
                    "warnings",
                    "errors"
                  ], [
                    unindent(Rebase.$$Array[/* slice */25](0, indexOfWarnings, lines)),
                    Rebase.$$Array[/* sliceFrom */26](indexOfWarnings + 1 | 0, lines),
                    []
                  ]);
        }
      } else if (hasErrors) {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  unindent(Rebase.$$Array[/* slice */25](0, indexOfErrors, lines)),
                  [],
                  Rebase.$$Array[/* sliceFrom */26](indexOfErrors + 1 | 0, lines)
                ]);
      } else {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  unindent(lines),
                  [],
                  []
                ]);
      }
    } else if (hasWarnings) {
      if (hasErrors) {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  [],
                  Rebase.$$Array[/* slice */25](0, indexOfErrors, lines),
                  Rebase.$$Array[/* slice */25](indexOfErrors + 1 | 0, Rebase.$$Array[/* length */16](lines), lines)
                ]);
      } else {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  [],
                  lines,
                  []
                ]);
      }
    } else if (hasErrors) {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                [],
                [],
                lines
              ]);
    } else {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                [],
                [],
                []
              ]);
    }
  };
  var match = partiteAllGoalsWarnings(title, body);
  var metas = match[/* metas */0];
  var indexOfHiddenMetas = Rebase.Option[/* map */0]((function (prim) {
          return prim[0];
        }), Rebase.$$Array[/* findIndex */30]((function (s) {
              return Rebase.Option[/* isSome */13](Util$AgdaMode.Parser[/* parse */1](outputWithRange, s));
            }), metas));
  var interactionMetas = indexOfHiddenMetas !== undefined ? Util$AgdaMode.Parser[/* parseArray */2](outputWithoutRange, Rebase.$$Array[/* slice */25](0, indexOfHiddenMetas, metas)) : Util$AgdaMode.Parser[/* parseArray */2](outputWithoutRange, metas);
  var hiddenMetas = indexOfHiddenMetas !== undefined ? Util$AgdaMode.Parser[/* parseArray */2](outputWithRange, Rebase.$$Array[/* sliceFrom */26](indexOfHiddenMetas, metas)) : /* array */[];
  return /* record */Block.record([
            "interactionMetas",
            "hiddenMetas",
            "warnings",
            "errors"
          ], [
            interactionMetas,
            hiddenMetas,
            match[/* warnings */1],
            match[/* errors */2]
          ]);
}

function goalTypeContext(raw) {
  var partiteGoalTypeContext = function (raw) {
    var lines = raw.split("\n");
    var indexOfHave = Rebase.$$Array[/* findIndex */30]((function (s) {
            return Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(s.match((/^Have:/))));
          }), lines);
    var indexOfDelimeter = lines.findIndex((function (s) {
            return Rebase.Option[/* isSome */13](Js_primitive.null_to_opt(s.match((/\u2014{60}/g))));
          }));
    if (indexOfHave !== undefined) {
      var n = indexOfHave[0];
      return /* record */Block.record([
                "goal",
                "have",
                "metas"
              ], [
                Rebase.$$String[/* join */10](Rebase.List[/* fromArray */12](Rebase.$$Array[/* slice */25](0, n, lines))),
                Rebase.Option[/* some */11](Rebase.$$String[/* join */10](Rebase.List[/* fromArray */12](Rebase.$$Array[/* slice */25](n, indexOfDelimeter, lines)))),
                Rebase.$$Array[/* sliceFrom */26](indexOfDelimeter + 1 | 0, lines)
              ]);
    } else {
      return /* record */Block.record([
                "goal",
                "have",
                "metas"
              ], [
                Rebase.$$String[/* join */10](Rebase.List[/* fromArray */12](Rebase.$$Array[/* slice */25](0, indexOfDelimeter, lines))),
                undefined,
                Rebase.$$Array[/* sliceFrom */26](indexOfDelimeter + 1 | 0, lines)
              ]);
    }
  };
  var match = partiteGoalTypeContext(raw);
  var metas = match[/* metas */2];
  return /* record */Block.record([
            "goal",
            "have",
            "interactionMetas",
            "hiddenMetas"
          ], [
            Rebase.Option[/* map */0]((function (x) {
                    return /* Goal */Block.simpleVariant("Goal", [x]);
                  }), Util$AgdaMode.Parser[/* parse */1](expr, match[/* goal */0].slice(5))),
            Rebase.Option[/* flatMap */5]((function (line) {
                    return Rebase.Option[/* map */0]((function (x) {
                                  return /* Have */Block.simpleVariant("Have", [x]);
                                }), Util$AgdaMode.Parser[/* parse */1](expr, line.slice(5)));
                  }), match[/* have */1]),
            Util$AgdaMode.Parser[/* parseArray */2](outputWithoutRange, metas),
            Util$AgdaMode.Parser[/* parseArray */2](outputWithRange, metas)
          ]);
}

function constraints(raw) {
  var shitpile = unindent(raw.split("\n"));
  return Util$AgdaMode.Parser[/* parseArray */2](output, shitpile);
}

function body(raw) {
  var match = raw.kind;
  var kind;
  switch (match) {
    case "AllGoalsWarnings" : 
        kind = /* AllGoalsWarnings */0;
        break;
    case "GoalTypeContext" : 
        kind = /* GoalTypeContext */1;
        break;
    default:
      kind = /* PlainText */3;
  }
  return /* record */Block.record([
            "kind",
            "header",
            "body"
          ], [
            kind,
            raw.header,
            raw.body
          ]);
}

exports.unindent = unindent;
exports.filepath = filepath;
exports.expr = expr;
exports.OutputConstraint = OutputConstraint;
exports.outputConstraint = outputConstraint;
exports.Output = Output;
exports.output = output;
exports.allGoalsWarnings = allGoalsWarnings;
exports.goalTypeContext = goalTypeContext;
exports.constraints = constraints;
exports.body = body;
/* ofType Not a pure module */
