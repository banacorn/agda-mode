// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Log$AgdaMode = require("../Log.bs.js");
var Task$AgdaMode = require("./Task.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");

function handle(errors) {
  if (typeof errors === "number") {
    if (errors === /* Cancelled */0) {
      return {
              hd: {
                TAG: 2,
                _0: "Query Cancelled",
                _1: /* Error */1,
                _2: {
                  _0: {
                    TAG: 8,
                    _0: "",
                    [Symbol.for("name")]: "PlainText"
                  },
                  [Symbol.for("name")]: "Emacs"
                },
                [Symbol.for("name")]: "Display"
              },
              tl: {
                hd: {
                  TAG: 0,
                  _0: (function (instance) {
                      Editors$AgdaMode.Focus.on(/* Source */0, instance.editors);
                      return Task$AgdaMode.$$return(/* [] */0);
                    }),
                  [Symbol.for("name")]: "WithInstance"
                },
                tl: /* [] */0
              }
            };
    } else {
      return {
              hd: {
                TAG: 2,
                _0: "Out of goal",
                _1: /* Error */1,
                _2: {
                  _0: {
                    TAG: 8,
                    _0: "Please place the cursor in a goal",
                    [Symbol.for("name")]: "PlainText"
                  },
                  [Symbol.for("name")]: "Emacs"
                },
                [Symbol.for("name")]: "Display"
              },
              tl: {
                hd: {
                  TAG: 0,
                  _0: (function (instance) {
                      Editors$AgdaMode.Focus.on(/* Source */0, instance.editors);
                      return Task$AgdaMode.$$return(/* [] */0);
                    }),
                  [Symbol.for("name")]: "WithInstance"
                },
                tl: /* [] */0
              }
            };
    }
  }
  if (errors.TAG) {
    var match = Connection$AgdaMode.$$Error.toString(errors._0);
    return {
            hd: {
              TAG: 2,
              _0: "Connection-related Error: " + match[0],
              _1: /* Error */1,
              _2: {
                _0: {
                  TAG: 8,
                  _0: match[1],
                  [Symbol.for("name")]: "PlainText"
                },
                [Symbol.for("name")]: "Emacs"
              },
              [Symbol.for("name")]: "Display"
            },
            tl: {
              hd: {
                TAG: 0,
                _0: (function (instance) {
                    Editors$AgdaMode.Focus.on(/* Source */0, instance.editors);
                    return Task$AgdaMode.$$return(/* [] */0);
                  }),
                [Symbol.for("name")]: "WithInstance"
              },
              tl: /* [] */0
            }
          };
  }
  var errors$1 = errors._0;
  return {
          hd: {
            TAG: 1,
            _0: (function (conn) {
                Rebase.$$Array.forEach((function (e) {
                        return Log$AgdaMode.logError(e)(conn.log);
                      }), errors$1);
                return Task$AgdaMode.$$return({
                            hd: {
                              TAG: 2,
                              _0: "Parse Error",
                              _1: /* Error */1,
                              _2: {
                                _0: {
                                  TAG: 7,
                                  _0: conn,
                                  [Symbol.for("name")]: "ParseError"
                                },
                                [Symbol.for("name")]: "Emacs"
                              },
                              [Symbol.for("name")]: "Display"
                            },
                            tl: /* [] */0
                          });
              }),
            [Symbol.for("name")]: "WithConnection"
          },
          tl: {
            hd: {
              TAG: 0,
              _0: (function (instance) {
                  Editors$AgdaMode.Focus.on(/* Source */0, instance.editors);
                  return Task$AgdaMode.$$return(/* [] */0);
                }),
              [Symbol.for("name")]: "WithInstance"
            },
            tl: /* [] */0
          }
        };
}

exports.handle = handle;
/* Log-AgdaMode Not a pure module */
