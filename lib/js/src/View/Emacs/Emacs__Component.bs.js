// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Parser$AgdaMode = require("../../Parser.bs.js");
var Type__Location$AgdaMode = require("../../Type/Type__Location.bs.js");
var Component__Link$AgdaMode = require("../Component__Link.bs.js");
var Component__Range$AgdaMode = require("../Component__Range.bs.js");

var component = ReasonReact.statelessComponent("EmacsTerm");

function make(term, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                switch (term.tag | 0) {
                  case 0 : 
                      return React.createElement("span", {
                                  className: "expr"
                                }, term[0]);
                  case 1 : 
                      var i = term[0];
                      return ReasonReact.element(undefined, undefined, Component__Link$AgdaMode.make(/* HoleLink */Block.variant("HoleLink", 1, [i]), true, true, /* :: */Block.simpleVariant("::", [
                                        "expr",
                                        /* :: */Block.simpleVariant("::", [
                                            "question-mark",
                                            /* [] */0
                                          ])
                                      ]), /* array */["?" + String(i)]));
                  case 2 : 
                      return React.createElement("span", {
                                  className: "expr underscore"
                                }, term[0]);
                  
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var Term = /* module */Block.localModule([
    "component",
    "jump",
    "hover",
    "make"
  ], [
    component,
    true,
    true,
    make
  ]);

function parse(raw) {
  return Rebase.$$Option[/* some */11](Rebase.$$Array[/* filterMap */23]((function (x) {
                    return x;
                  }), Rebase.$$Array[/* mapi */27]((function (token, i) {
                        var match = i % 3;
                        if (match !== 1) {
                          if (match !== 2) {
                            return Rebase.$$Option[/* map */0]((function (x) {
                                          return /* Plain */Block.variant("Plain", 0, [x]);
                                        }), token);
                          } else {
                            return Rebase.$$Option[/* map */0]((function (x) {
                                          return /* Underscore */Block.variant("Underscore", 2, [x]);
                                        }), token);
                          }
                        } else {
                          return Rebase.$$Option[/* map */0]((function (x) {
                                        return /* QuestionMark */Block.variant("QuestionMark", 1, [x]);
                                      }), Rebase.$$Option[/* flatMap */5](Parser$AgdaMode.$$int, Rebase.$$Option[/* map */0]((function (param) {
                                                return param.slice(1);
                                              }), token)));
                        }
                      }), Rebase.$$String[/* trim */8](raw).split((/(\?\d+)|(\_\d+[^\}\)\s]*)/)))));
}

var component$1 = ReasonReact.statelessComponent("EmacsExpr");

function make$1(expr, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$1[/* debugName */0],
            component$1[/* reactClassInternal */1],
            component$1[/* handedOffState */2],
            component$1[/* willReceiveProps */3],
            component$1[/* didMount */4],
            component$1[/* didUpdate */5],
            component$1[/* willUnmount */6],
            component$1[/* willUpdate */7],
            component$1[/* shouldUpdate */8],
            (function (_self) {
                var terms = Rebase.$$Array[/* map */0]((function (term) {
                        return ReasonReact.element(undefined, undefined, make(term, /* array */[]));
                      }), expr);
                return ReactDOMRe.createElementVariadic("span", undefined, terms);
              }),
            component$1[/* initialState */10],
            component$1[/* retainedProps */11],
            component$1[/* reducer */12],
            component$1[/* jsElementWrapped */13]
          ]);
}

var Expr = /* module */Block.localModule([
    "parse",
    "component",
    "make"
  ], [
    parse,
    component$1,
    make$1
  ]);

var partial_arg = (/^([^\:]*) \: ((?:\n|.)+)/);

function parseOfType(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Rebase.$$Option[/* flatMap */5]((function (type_) {
                              return Rebase.$$Option[/* flatMap */5]((function (term) {
                                            return /* OfType */Block.variant("OfType", 0, [
                                                      term,
                                                      type_
                                                    ]);
                                          }), Parser$AgdaMode.at(1, parse, captured));
                            }), Parser$AgdaMode.at(2, parse, captured));
              }), partial_arg, param);
}

var partial_arg$1 = (/^Type ((?:\n|.)+)/);

function parseJustType(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Rebase.$$Option[/* map */0]((function (type_) {
                              return /* JustType */Block.variant("JustType", 1, [type_]);
                            }), Parser$AgdaMode.at(1, parse, captured));
              }), partial_arg$1, param);
}

var partial_arg$2 = (/^Sort ((?:\n|.)+)/);

function parseJustSort(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Rebase.$$Option[/* map */0]((function (sort) {
                              return /* JustSort */Block.variant("JustSort", 2, [sort]);
                            }), Parser$AgdaMode.at(1, parse, captured));
              }), partial_arg$2, param);
}

function parseOthers(raw) {
  return Rebase.$$Option[/* map */0]((function (raw$prime) {
                return /* Others */Block.variant("Others", 3, [raw$prime]);
              }), parse(raw));
}

var partial_arg$3 = /* array */[
  parseOfType,
  parseJustType,
  parseJustSort,
  parseOthers
];

function parse$1(param) {
  return Parser$AgdaMode.choice(partial_arg$3, param);
}

var component$2 = ReasonReact.statelessComponent("EmacsOutputConstraint");

function make$2(value, range, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$2[/* debugName */0],
            component$2[/* reactClassInternal */1],
            component$2[/* handedOffState */2],
            component$2[/* willReceiveProps */3],
            component$2[/* didMount */4],
            component$2[/* didUpdate */5],
            component$2[/* willUnmount */6],
            component$2[/* willUpdate */7],
            component$2[/* shouldUpdate */8],
            (function (_self) {
                switch (value.tag | 0) {
                  case 0 : 
                      return React.createElement("li", {
                                  className: "output"
                                }, ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])), " : ", ReasonReact.element(undefined, undefined, make$1(value[1], /* array */[])), Rebase.$$Option[/* mapOr */18]((function (range) {
                                        return ReasonReact.element(undefined, undefined, Component__Range$AgdaMode.make(range, true, /* array */[]));
                                      }), null, range));
                  case 1 : 
                      return React.createElement("li", {
                                  className: "output"
                                }, "Type ", ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])), Rebase.$$Option[/* mapOr */18]((function (range) {
                                        return ReasonReact.element(undefined, undefined, Component__Range$AgdaMode.make(range, true, /* array */[]));
                                      }), null, range));
                  case 2 : 
                      return React.createElement("li", {
                                  className: "output"
                                }, "Sort ", ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])), Rebase.$$Option[/* mapOr */18]((function (range) {
                                        return ReasonReact.element(undefined, undefined, Component__Range$AgdaMode.make(range, true, /* array */[]));
                                      }), null, range));
                  case 3 : 
                      return React.createElement("li", {
                                  className: "output"
                                }, ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])), Rebase.$$Option[/* mapOr */18]((function (range) {
                                        return ReasonReact.element(undefined, undefined, Component__Range$AgdaMode.make(range, true, /* array */[]));
                                      }), null, range));
                  
                }
              }),
            component$2[/* initialState */10],
            component$2[/* retainedProps */11],
            component$2[/* reducer */12],
            component$2[/* jsElementWrapped */13]
          ]);
}

var OutputConstraint = /* module */Block.localModule([
    "parseOfType",
    "parseJustType",
    "parseJustSort",
    "parseOthers",
    "parse",
    "component",
    "make"
  ], [
    parseOfType,
    parseJustType,
    parseJustSort,
    parseOthers,
    parse$1,
    component$2,
    make$2
  ]);

var component$3 = ReasonReact.statelessComponent("EmacsGoal");

function make$3(label, expr, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$3[/* debugName */0],
            component$3[/* reactClassInternal */1],
            component$3[/* handedOffState */2],
            component$3[/* willReceiveProps */3],
            component$3[/* didMount */4],
            component$3[/* didUpdate */5],
            component$3[/* willUnmount */6],
            component$3[/* willUpdate */7],
            component$3[/* shouldUpdate */8],
            (function (_self) {
                return React.createElement("li", {
                            className: "labeled"
                          }, React.createElement("span", {
                                className: "label"
                              }, label), ReasonReact.element(undefined, undefined, make$1(expr, /* array */[])));
              }),
            component$3[/* initialState */10],
            component$3[/* retainedProps */11],
            component$3[/* reducer */12],
            component$3[/* jsElementWrapped */13]
          ]);
}

var Labeled = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$3,
    make$3
  ]);

function parseOutputWithoutRange(raw) {
  return Rebase.$$Option[/* map */0]((function (x) {
                return /* Output */Block.simpleVariant("Output", [
                          x,
                          undefined
                        ]);
              }), Curry._1(parse$1, raw));
}

var partial_arg$4 = (/((?:\n|.)*\S+)\s*\[ at ([^\]]+) \]/);

function parseOutputWithRange(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Rebase.$$Option[/* map */0]((function (oc) {
                              var r = Rebase.$$Option[/* flatMap */5](Type__Location$AgdaMode.$$Range[/* parse */0], Rebase.$$Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 2)));
                              return /* Output */Block.simpleVariant("Output", [
                                        oc,
                                        r
                                      ]);
                            }), Rebase.$$Option[/* flatMap */5](parse$1, Rebase.$$Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, 1))));
              }), partial_arg$4, param);
}

function parse$2(raw) {
  var rangeRe = (/\[ at (\S+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+)) \]$/);
  var hasRange = rangeRe.test(raw);
  if (hasRange) {
    return Curry._1(parseOutputWithRange, raw);
  } else {
    return parseOutputWithoutRange(raw);
  }
}

var component$4 = ReasonReact.statelessComponent("EmacsInteractionMeta");

function make$4(value, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$4[/* debugName */0],
            component$4[/* reactClassInternal */1],
            component$4[/* handedOffState */2],
            component$4[/* willReceiveProps */3],
            component$4[/* didMount */4],
            component$4[/* didUpdate */5],
            component$4[/* willUnmount */6],
            component$4[/* willUpdate */7],
            component$4[/* shouldUpdate */8],
            (function (_self) {
                return ReasonReact.element(undefined, undefined, make$2(value[0], value[1], /* array */[]));
              }),
            component$4[/* initialState */10],
            component$4[/* retainedProps */11],
            component$4[/* reducer */12],
            component$4[/* jsElementWrapped */13]
          ]);
}

var Output = /* module */Block.localModule([
    "parseOutputWithoutRange",
    "parseOutputWithRange",
    "parse",
    "component",
    "make"
  ], [
    parseOutputWithoutRange,
    parseOutputWithRange,
    parse$2,
    component$4,
    make$4
  ]);

function parse$3(raw) {
  return Rebase.$$Option[/* some */11](Rebase.$$Array[/* mapi */27]((function (token, i) {
                    var match = i % 2;
                    if (match !== 1) {
                      return /* Text */Block.variant("Text", 0, [token]);
                    } else {
                      return Rebase.$$Option[/* mapOr */18]((function (x) {
                                    return /* Range */Block.variant("Range", 1, [x]);
                                  }), /* Text */Block.variant("Text", 0, [token]), Curry._1(Type__Location$AgdaMode.$$Range[/* parse */0], token));
                    }
                  }), Rebase.$$Array[/* filterMap */23]((function (x) {
                        return x;
                      }), raw.split((/(\S+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+))/)))));
}

var component$5 = ReasonReact.statelessComponent("PlainText");

function make$5(value, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$5[/* debugName */0],
            component$5[/* reactClassInternal */1],
            component$5[/* handedOffState */2],
            component$5[/* willReceiveProps */3],
            component$5[/* didMount */4],
            component$5[/* didUpdate */5],
            component$5[/* willUnmount */6],
            component$5[/* willUpdate */7],
            component$5[/* shouldUpdate */8],
            (function (_self) {
                return ReactDOMRe.createElementVariadic("span", undefined, Rebase.$$Array[/* map */0]((function (token) {
                                  if (token.tag) {
                                    return ReasonReact.element(undefined, undefined, Component__Range$AgdaMode.make(token[0], undefined, /* array */[]));
                                  } else {
                                    return token[0];
                                  }
                                }), value));
              }),
            component$5[/* initialState */10],
            component$5[/* retainedProps */11],
            component$5[/* reducer */12],
            component$5[/* jsElementWrapped */13]
          ]);
}

var PlainText = /* module */Block.localModule([
    "parse",
    "component",
    "make"
  ], [
    parse$3,
    component$5,
    make$5
  ]);

function parse$4(isWarning, raw) {
  return Rebase.$$Option[/* map */0]((function (body) {
                if (isWarning) {
                  return /* WarningMessage */Block.variant("WarningMessage", 0, [body]);
                } else {
                  return /* ErrorMessage */Block.variant("ErrorMessage", 1, [body]);
                }
              }), parse$3(raw));
}

function parseWarning(param) {
  return parse$4(true, param);
}

function parseError(param) {
  return parse$4(false, param);
}

var component$6 = ReasonReact.statelessComponent("WarningError");

function make$6(value, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$6[/* debugName */0],
            component$6[/* reactClassInternal */1],
            component$6[/* handedOffState */2],
            component$6[/* willReceiveProps */3],
            component$6[/* didMount */4],
            component$6[/* didUpdate */5],
            component$6[/* willUnmount */6],
            component$6[/* willUpdate */7],
            component$6[/* shouldUpdate */8],
            (function (_self) {
                if (value.tag) {
                  return React.createElement("li", {
                              className: "warning-error"
                            }, React.createElement("span", {
                                  className: "error-label"
                                }, "error"), ReasonReact.element(undefined, undefined, make$5(value[0], /* array */[])));
                } else {
                  return React.createElement("li", {
                              className: "warning-error"
                            }, React.createElement("span", {
                                  className: "warning-label"
                                }, "warning"), ReasonReact.element(undefined, undefined, make$5(value[0], /* array */[])));
                }
              }),
            component$6[/* initialState */10],
            component$6[/* retainedProps */11],
            component$6[/* reducer */12],
            component$6[/* jsElementWrapped */13]
          ]);
}

var WarningError = /* module */Block.localModule([
    "parse",
    "parseWarning",
    "parseError",
    "component",
    "make"
  ], [
    parse$4,
    parseWarning,
    parseError,
    component$6,
    make$6
  ]);

exports.Term = Term;
exports.Expr = Expr;
exports.OutputConstraint = OutputConstraint;
exports.Labeled = Labeled;
exports.Output = Output;
exports.PlainText = PlainText;
exports.WarningError = WarningError;
/* component Not a pure module */
