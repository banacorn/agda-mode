// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Hole$AgdaMode = require("../Hole.bs.js");

function destroyAll(instance) {
  Rebase.$$Array[/* forEach */8](Goal$AgdaMode.destroy, instance[/* goals */4]);
  instance[/* goals */4] = /* array */[];
  return /* () */0;
}

function find(index, instance) {
  var found = Rebase.$$Array[/* filter */10]((function (goal) {
          var match = goal[/* index */1];
          if (match !== undefined) {
            return match === index;
          } else {
            return false;
          }
        }), instance[/* goals */4]);
  return Rebase.$$Array[/* get */17](found, 0);
}

function instantiateAll(indices, instance) {
  destroyAll(instance);
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = textEditor.getPath();
  var textBuffer = textEditor.getBuffer();
  var source = textEditor.getText();
  var fileType = Goal$AgdaMode.FileType[/* parse */0](filePath);
  var result = Hole$AgdaMode.parse(source, indices, fileType);
  instance[/* goals */4] = Rebase.$$Array[/* map */0]((function (result) {
          var start = textBuffer.positionForCharacterIndex(result[/* originalRange */2][0]);
          var end_ = textBuffer.positionForCharacterIndex(result[/* originalRange */2][1]);
          var range = new Atom.Range(start, end_);
          textEditor.setTextInBufferRange(range, result[/* content */3]);
          return Goal$AgdaMode.make(instance[/* editors */1][/* source */1], result[/* index */0], result[/* modifiedRange */1]);
        }), result);
  return /* () */0;
}

exports.destroyAll = destroyAll;
exports.find = find;
exports.instantiateAll = instantiateAll;
/* atom Not a pure module */
