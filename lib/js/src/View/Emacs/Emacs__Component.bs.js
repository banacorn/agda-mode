// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Util$AgdaMode = require("../../Util/Util.bs.js");
var Parser$AgdaMode = require("../../Parser.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Type__Location$AgdaMode = require("../../Type/Type__Location.bs.js");
var Component__Link$AgdaMode = require("../Component__Link.bs.js");
var Component__Range$AgdaMode = require("../Component__Range.bs.js");

function toString(string) {
  switch (string.TAG | 0) {
    case /* Plain */0 :
        return string._0;
    case /* QuestionMark */1 :
        return "?" + String(string._0);
    case /* Underscore */2 :
        return "_" + string._0;
    
  }
}

function Emacs__Component$Term(Props) {
  var term = Props.term;
  switch (term.TAG | 0) {
    case /* Plain */0 :
        return React.createElement("span", {
                    className: "expr"
                  }, term._0);
    case /* QuestionMark */1 :
        var i = term._0;
        return React.createElement(Component__Link$AgdaMode.make, {
                    target: {
                      TAG: 1,
                      _0: i,
                      [Symbol.for("name")]: "HoleLink"
                    },
                    jump: true,
                    hover: true,
                    className: {
                      hd: "expr",
                      tl: {
                        hd: "question-mark",
                        tl: /* [] */0
                      }
                    },
                    children: "?" + String(i)
                  });
    case /* Underscore */2 :
        return React.createElement("span", {
                    className: "expr underscore"
                  }, term._0);
    
  }
}

var Term = {
  toString: toString,
  jump: true,
  hover: true,
  make: Emacs__Component$Term
};

function toString$1(xs) {
  return Caml_splice_call.spliceObjApply(" ", "concat", [Belt_Array.map(xs, toString)]);
}

function parse(raw) {
  var __x = raw.trim();
  return Belt_Array.keepMap(Belt_Array.mapWithIndex(__x.split(/(\?\d+)|(\_\d+[^\}\)\s]*)/), (function (i, token) {
                    var match = i % 3;
                    if (match !== 1) {
                      if (match !== 2) {
                        return Belt_Option.map(token, (function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "Plain"
                                            };
                                    }));
                      } else {
                        return Belt_Option.map(token, (function (x) {
                                      return {
                                              TAG: 2,
                                              _0: x,
                                              [Symbol.for("name")]: "Underscore"
                                            };
                                    }));
                      }
                    } else {
                      return Belt_Option.map(Belt_Option.flatMap(Belt_Option.map(token, (function (param) {
                                            return param.slice(1);
                                          })), Parser$AgdaMode.$$int), (function (x) {
                                    return {
                                            TAG: 1,
                                            _0: x,
                                            [Symbol.for("name")]: "QuestionMark"
                                          };
                                  }));
                    }
                  })), (function (x) {
                return x;
              }));
}

function Emacs__Component$Expr(Props) {
  var expr = Props.expr;
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(expr, (function (i, term) {
                    return React.createElement(Emacs__Component$Term, {
                                term: term,
                                key: String(i)
                              });
                  })));
}

var Expr = {
  toString: toString$1,
  parse: parse,
  make: Emacs__Component$Expr
};

function toString$2(t) {
  if (t.TAG) {
    return toString$1(t._0);
  } else {
    return toString$1(t._0) + (" : " + toString$1(t._1));
  }
}

var partial_arg = /^([^\:]*) \: ((?:\n|.)+)/;

function parseOfType(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Belt_Option.flatMap(Parser$AgdaMode.at(captured, 2, parse), (function (type_) {
                              return Belt_Option.flatMap(Parser$AgdaMode.at(captured, 1, parse), (function (term) {
                                            return {
                                                    TAG: 0,
                                                    _0: term,
                                                    _1: type_,
                                                    [Symbol.for("name")]: "OfType"
                                                  };
                                          }));
                            }));
              }), partial_arg, param);
}

var partial_arg$1 = /^Type ((?:\n|.)+)/;

function parseJustType(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Belt_Option.map(Parser$AgdaMode.at(captured, 1, parse), (function (type_) {
                              return {
                                      TAG: 1,
                                      _0: type_,
                                      [Symbol.for("name")]: "JustType"
                                    };
                            }));
              }), partial_arg$1, param);
}

var partial_arg$2 = /^Sort ((?:\n|.)+)/;

function parseJustSort(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Belt_Option.map(Parser$AgdaMode.at(captured, 1, parse), (function (sort) {
                              return {
                                      TAG: 2,
                                      _0: sort,
                                      [Symbol.for("name")]: "JustSort"
                                    };
                            }));
              }), partial_arg$2, param);
}

function parseOthers(raw) {
  return Belt_Option.map(parse(raw), (function (raw$prime) {
                return {
                        TAG: 3,
                        _0: raw$prime,
                        [Symbol.for("name")]: "Others"
                      };
              }));
}

var partial_arg$3 = [
  parseOfType,
  parseJustType,
  parseJustSort,
  parseOthers
];

function parse$1(param) {
  return Parser$AgdaMode.choice(partial_arg$3, param);
}

function Emacs__Component$OutputConstraint(Props) {
  var value = Props.value;
  var range = Props.range;
  var range$1 = Belt_Option.mapWithDefault(range, null, (function (range) {
          return React.createElement(Component__Range$AgdaMode.make, {
                      range: range,
                      abbr: true
                    });
        }));
  switch (value.TAG | 0) {
    case /* OfType */0 :
        return React.createElement("li", {
                    className: "output"
                  }, React.createElement(Emacs__Component$Expr, {
                        expr: value._0
                      }), " : ", React.createElement(Emacs__Component$Expr, {
                        expr: value._1
                      }), range$1);
    case /* JustType */1 :
        return React.createElement("li", {
                    className: "output"
                  }, "Type ", React.createElement(Emacs__Component$Expr, {
                        expr: value._0
                      }), range$1);
    case /* JustSort */2 :
        return React.createElement("li", {
                    className: "output"
                  }, "Sort ", React.createElement(Emacs__Component$Expr, {
                        expr: value._0
                      }), range$1);
    case /* Others */3 :
        return React.createElement("li", {
                    className: "output"
                  }, React.createElement(Emacs__Component$Expr, {
                        expr: value._0
                      }), range$1);
    
  }
}

var OutputConstraint = {
  toString: toString$2,
  parseOfType: parseOfType,
  parseJustType: parseJustType,
  parseJustSort: parseJustSort,
  parseOthers: parseOthers,
  parse: parse$1,
  make: Emacs__Component$OutputConstraint
};

function Emacs__Component$Labeled(Props) {
  var label = Props.label;
  var expr = Props.expr;
  return React.createElement("li", {
              className: "labeled"
            }, React.createElement("span", {
                  className: "label"
                }, label), React.createElement(Emacs__Component$Expr, {
                  expr: expr
                }));
}

var Labeled = {
  make: Emacs__Component$Labeled
};

function toString$3(param) {
  var range = param._1;
  var c = param._0;
  if (range !== undefined) {
    return "Output " + (toString$2(c) + (" " + Type__Location$AgdaMode.$$Range.toString(range)));
  } else {
    return "Output " + toString$2(c);
  }
}

function parseOutputWithoutRange(raw) {
  return Belt_Option.map(Curry._1(parse$1, raw), (function (x) {
                return {
                        _0: x,
                        _1: undefined,
                        [Symbol.for("name")]: "Output"
                      };
              }));
}

var partial_arg$4 = /((?:\n|.)*\S+)\s*\[ at ([^\]]+) \]/;

function parseOutputWithRange(param) {
  return Parser$AgdaMode.captures((function (captured) {
                return Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(captured, 1), (function (x) {
                                      return x;
                                    })), parse$1), (function (oc) {
                              var r = Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(captured, 2), (function (x) {
                                          return x;
                                        })), Type__Location$AgdaMode.$$Range.parse);
                              return {
                                      _0: oc,
                                      _1: r,
                                      [Symbol.for("name")]: "Output"
                                    };
                            }));
              }), partial_arg$4, param);
}

function parse$2(raw) {
  var rangeRe = /\[ at (\S+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+)) \]$/;
  var hasRange = rangeRe.test(raw);
  if (hasRange) {
    return Curry._1(parseOutputWithRange, raw);
  } else {
    return parseOutputWithoutRange(raw);
  }
}

function Emacs__Component$Output(Props) {
  var value = Props.value;
  return React.createElement(Emacs__Component$OutputConstraint, {
              value: value._0,
              range: value._1
            });
}

var Output = {
  toString: toString$3,
  parseOutputWithoutRange: parseOutputWithoutRange,
  parseOutputWithRange: parseOutputWithRange,
  parse: parse$2,
  make: Emacs__Component$Output
};

function toString$4(s) {
  if (s.TAG) {
    return Type__Location$AgdaMode.$$Range.toString(s._0);
  } else {
    return s._0;
  }
}

function parse$3(raw) {
  return Belt_Array.mapWithIndex(Belt_Array.keepMap(raw.split(/([^\(\)\s]+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+))/), (function (x) {
                    return x;
                  })), (function (i, token) {
                var match = i % 2;
                if (match !== 1) {
                  return {
                          TAG: 0,
                          _0: token,
                          [Symbol.for("name")]: "Text"
                        };
                } else {
                  return Belt_Option.mapWithDefault(Curry._1(Type__Location$AgdaMode.$$Range.parse, token), {
                              TAG: 0,
                              _0: token,
                              [Symbol.for("name")]: "Text"
                            }, (function (x) {
                                return {
                                        TAG: 1,
                                        _0: x,
                                        [Symbol.for("name")]: "Range"
                                      };
                              }));
                }
              }));
}

function Emacs__Component$PlainText(Props) {
  var value = Props.value;
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(value, (function (i, plainText) {
                    if (plainText.TAG) {
                      return React.createElement(Component__Range$AgdaMode.make, {
                                  range: plainText._0,
                                  key: String(i)
                                });
                    } else {
                      return plainText._0;
                    }
                  })));
}

var PlainText = {
  toString: toString$4,
  parse: parse$3,
  make: Emacs__Component$PlainText
};

function toString$5(xs) {
  return Util$AgdaMode.Pretty.array(Belt_Array.map(xs._0, toString$4));
}

function parse$4(isWarning, raw) {
  return Belt_Option.map(parse$3(raw), (function (body) {
                if (isWarning) {
                  return {
                          TAG: 0,
                          _0: body,
                          [Symbol.for("name")]: "WarningMessage"
                        };
                } else {
                  return {
                          TAG: 1,
                          _0: body,
                          [Symbol.for("name")]: "ErrorMessage"
                        };
                }
              }));
}

function parseWarning(param) {
  return parse$4(true, param);
}

function parseError(param) {
  return parse$4(false, param);
}

function Emacs__Component$WarningError(Props) {
  var value = Props.value;
  if (value.TAG) {
    return React.createElement("li", {
                className: "warning-error"
              }, React.createElement("span", {
                    className: "error-label"
                  }, "error"), React.createElement(Emacs__Component$PlainText, {
                    value: value._0
                  }));
  } else {
    return React.createElement("li", {
                className: "warning-error"
              }, React.createElement("span", {
                    className: "warning-label"
                  }, "warning"), React.createElement(Emacs__Component$PlainText, {
                    value: value._0
                  }));
  }
}

var WarningError = {
  toString: toString$5,
  parse: parse$4,
  parseWarning: parseWarning,
  parseError: parseError,
  make: Emacs__Component$WarningError
};

exports.Term = Term;
exports.Expr = Expr;
exports.OutputConstraint = OutputConstraint;
exports.Labeled = Labeled;
exports.Output = Output;
exports.PlainText = PlainText;
exports.WarningError = WarningError;
/* react Not a pure module */
