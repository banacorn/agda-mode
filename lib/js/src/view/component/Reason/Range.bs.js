// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Link$AgdaMode = require("./Link.bs.js");

var component = ReasonReact.statelessComponent("Range");

function intervalToString(interval) {
  if (interval[/* start */0][/* line */1] === interval[/* end_ */1][/* line */1]) {
    return String(interval[/* start */0][/* line */1]) + ("," + (String(interval[/* start */0][/* col */2]) + ("-" + String(interval[/* end_ */1][/* col */2]))));
  } else {
    return String(interval[/* start */0][/* line */1]) + ("," + (String(interval[/* start */0][/* col */2]) + ("-" + (String(interval[/* end_ */1][/* line */1]) + ("," + String(interval[/* end_ */1][/* col */2]))))));
  }
}

function rangeToString(range) {
  if (range) {
    var match = range[0];
    if (match !== undefined) {
      var xs = range[1];
      var filepath = match;
      if (xs) {
        return filepath + (":" + intervalToString(/* record */Block.record([
                        "start",
                        "end_"
                      ], [
                        List.hd(xs)[/* start */0],
                        List.nth(xs, List.length(xs) - 1 | 0)[/* end_ */1]
                      ])));
      } else {
        return filepath;
      }
    } else {
      var xs$1 = range[1];
      if (xs$1) {
        return intervalToString(/* record */Block.record([
                      "start",
                      "end_"
                    ], [
                      List.hd(xs$1)[/* start */0],
                      List.nth(xs$1, List.length(xs$1) - 1 | 0)[/* end_ */1]
                    ]));
      } else {
        return "";
      }
    }
  } else {
    return "";
  }
}

function make(range, emit, $staropt$star, _) {
  var abbr = $staropt$star !== undefined ? $staropt$star : false;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                if (abbr) {
                  return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range, true, undefined, emit, /* array */[React.createElement("span", {
                                        className: "text-subtle range icon icon-link"
                                      })]));
                } else {
                  return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range, true, undefined, emit, /* array */[React.createElement("span", {
                                        className: "text-subtle range icon icon-link"
                                      }, rangeToString(range))]));
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

function toAtomRange(range) {
  if (range) {
    var xs = range[1];
    if (xs) {
      var start = List.hd(xs)[/* start */0];
      var end_ = List.nth(xs, List.length(xs) - 1 | 0)[/* end_ */1];
      return new Atom.Range(new Atom.Point(start[/* line */1], start[/* col */2]), new Atom.Point(end_[/* line */1], end_[/* col */2]));
    } else {
      return ( null );
    }
  } else {
    return ( null );
  }
}

function toAtomFilepath(range) {
  var exit = 0;
  if (range) {
    var match = range[0];
    if (match !== undefined) {
      return match;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return ( null );
  }
  
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.range, jsProps.emit, undefined, /* array */[]);
      }));

exports.component = component;
exports.intervalToString = intervalToString;
exports.rangeToString = rangeToString;
exports.make = make;
exports.toAtomRange = toAtomRange;
exports.toAtomFilepath = toAtomFilepath;
exports.jsComponent = jsComponent;
/* component Not a pure module */
