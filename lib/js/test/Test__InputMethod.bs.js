// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Event$AgdaMode = require("../src/Util/Event.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Translator$AgdaMode = require("../src/View/Panel/InputMethod/Translator.bs.js");

Mocha$BsMocha.describe("Input Method")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("View")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                Promise$BsMocha.it("should not add class '.agda-mode-input-method-activated' to the editor element before triggering")(undefined, undefined, undefined, (function (param) {
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, false, atom.views.getView(instance[/* editors */1][/* source */1]).classList.contains("agda-mode-input-method-activated"));
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                Promise$BsMocha.it("should add class '.agda-mode-input-method-activated' to the editor element after triggering")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                        return partial_arg("\\", param);
                                      })).then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, true, atom.views.getView(instance[/* editors */1][/* source */1]).classList.contains("agda-mode-input-method-activated"));
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                return Promise$BsMocha.it("should display the keyboard after triggering")(undefined, undefined, undefined, (function (param) {
                              var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                                var partial_arg = Test__Util$AgdaMode.View[/* querySelector */7];
                                                return Test__Util$AgdaMode.View[/* getPanel */5](instance).then((function (param) {
                                                                return partial_arg(".input-method", param);
                                                              })).then((function (element) {
                                                              Test__Util$AgdaMode.Assert[/* equal */0](undefined, true, element.classList.contains("hidden"));
                                                              return Promise.resolve(instance);
                                                            }));
                                              })).then((function (param) {
                                              return partial_arg("\\", param);
                                            })).then((function (instance) {
                                            var partial_arg = Test__Util$AgdaMode.View[/* querySelector */7];
                                            return Test__Util$AgdaMode.View[/* getPanel */5](instance).then((function (param) {
                                                            return partial_arg(".input-method", param);
                                                          })).then((function (element) {
                                                          Test__Util$AgdaMode.Assert[/* equal */0](undefined, false, element.classList.contains("hidden"));
                                                          return Promise.resolve(/* () */0);
                                                        }));
                                          }));
                            }));
              }));
        Mocha$BsMocha.describe("Typing")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                Promise$BsMocha.it("should result in \"λ\" after typing \"Gl\"")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                        return partial_arg("\\", param);
                                      })).then((function (instance) {
                                      return Test__Util$AgdaMode.Keyboard[/* insert */2]("G", instance).then((function (param) {
                                                      return Test__Util$AgdaMode.Keyboard[/* insert */2]("l", instance);
                                                    })).then((function (param) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ", instance[/* editors */1][/* source */1].getText());
                                                    return Promise.resolve(/* () */0);
                                                  }));
                                    }));
                      }));
                Promise$BsMocha.it("should result in \"ƛ\" after typing \"lambdabar\"")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$4 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$5 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$6 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$7 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$8 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$9 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                          return partial_arg$9("\\", param);
                                                        })).then((function (param) {
                                                        return partial_arg$8("l", param);
                                                      })).then((function (param) {
                                                      return partial_arg$7("a", param);
                                                    })).then((function (param) {
                                                    return partial_arg$6("m", param);
                                                  })).then((function (param) {
                                                  return partial_arg$5("b", param);
                                                })).then((function (param) {
                                                return partial_arg$4("d", param);
                                              })).then((function (param) {
                                              return partial_arg$3("a", param);
                                            })).then((function (param) {
                                            return partial_arg$2("b", param);
                                          })).then((function (param) {
                                          return partial_arg$1("a", param);
                                        })).then((function (param) {
                                        return partial_arg("r", param);
                                      })).then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, "ƛ", instance[/* editors */1][/* source */1].getText());
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                return Promise$BsMocha.it("should result in \"lamb\" after typing \"lambda\" and then backspace twice")(undefined, undefined, undefined, (function (param) {
                              var partial_arg = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$4 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$5 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$6 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                              return partial_arg$6("\\", param);
                                                            })).then((function (param) {
                                                            return partial_arg$5("l", param);
                                                          })).then((function (param) {
                                                          return partial_arg$4("a", param);
                                                        })).then((function (param) {
                                                        return partial_arg$3("m", param);
                                                      })).then((function (param) {
                                                      return partial_arg$2("b", param);
                                                    })).then((function (param) {
                                                    return partial_arg$1("d", param);
                                                  })).then((function (param) {
                                                  return partial_arg("a", param);
                                                })).then(Test__Util$AgdaMode.Keyboard[/* backspace */3]).then(Test__Util$AgdaMode.Keyboard[/* backspace */3]).then((function (instance) {
                                            Test__Util$AgdaMode.Assert[/* equal */0](undefined, "lamb", instance[/* editors */1][/* source */1].getText());
                                            return Promise.resolve(/* () */0);
                                          }));
                            }));
              }));
        Mocha$BsMocha.describe("Activation/Deactivation")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                Promise$BsMocha.it("should be activated after typing \"\\\"")(undefined, undefined, undefined, (function (param) {
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                      var onDispatch = Async$AgdaMode.toPromise(Event$AgdaMode.once(instance[/* view */2][/* onInputMethodActivationChange */12]));
                                      return Test__Util$AgdaMode.Keyboard[/* dispatch */0]("\\", instance).then((function (param) {
                                                      return onDispatch;
                                                    })).then((function (activated) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, true, activated);
                                                    return Promise.resolve(instance);
                                                  }));
                                    }));
                      }));
                Promise$BsMocha.it("should be deactivated after typing \"\\\" twice")(undefined, undefined, undefined, (function (param) {
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (instance) {
                                        var onDispatch = Async$AgdaMode.toPromise(Event$AgdaMode.once(instance[/* view */2][/* onInputMethodActivationChange */12]));
                                        return Test__Util$AgdaMode.Keyboard[/* dispatch */0]("\\", instance).then((function (param) {
                                                        return onDispatch;
                                                      })).then((function (param) {
                                                      return Promise.resolve(instance);
                                                    }));
                                      })).then((function (instance) {
                                      var onDispatch = Async$AgdaMode.toPromise(Event$AgdaMode.once(instance[/* view */2][/* onInputMethodActivationChange */12]));
                                      return Test__Util$AgdaMode.Keyboard[/* insert */2]("\\", instance).then((function (param) {
                                                      return onDispatch;
                                                    })).then((function (activated) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, false, activated);
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "\\", instance[/* editors */1][/* source */1].getText());
                                                    return Promise.resolve(instance);
                                                  }));
                                    }));
                      }));
                Mocha$BsMocha.describe("Issue #102")(undefined, undefined, undefined, (function (param) {
                        Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                        return Promise$BsMocha.it("should be reactivated after typing \"\\\" even if the previous sequence can go further")(undefined, undefined, undefined, (function (param) {
                                      var partial_arg = Test__Util$AgdaMode.Keyboard[/* insert */2];
                                      var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                                      var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      var partial_arg$4 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                                      var partial_arg$5 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                                      var partial_arg$6 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      var partial_arg$7 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                                      var partial_arg$8 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                                      var partial_arg$9 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                                      return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                                        return partial_arg$9("\\", param);
                                                                      })).then((function (param) {
                                                                      return partial_arg$8("=", param);
                                                                    })).then((function (param) {
                                                                    return partial_arg$7("=", param);
                                                                  })).then((function (param) {
                                                                  return partial_arg$6("\\", param);
                                                                })).then((function (param) {
                                                                return partial_arg$5("=", param);
                                                              })).then((function (param) {
                                                              return partial_arg$4("=", param);
                                                            })).then((function (param) {
                                                            return partial_arg$3("\\", param);
                                                          })).then((function (param) {
                                                          return partial_arg$2("<", param);
                                                        })).then((function (param) {
                                                        return partial_arg$1("\\", param);
                                                      })).then((function (param) {
                                                      return partial_arg(">", param);
                                                    })).then((function (instance) {
                                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "≡≡⟨⟩", instance[/* editors */1][/* source */1].getText());
                                                    return Promise.resolve(/* () */0);
                                                  }));
                                    }));
                      }));
                Promise$BsMocha.it("should deactivate when stuck (\"Gll\")")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                              return partial_arg$3("\\", param);
                                            })).then((function (param) {
                                            return partial_arg$2("G", param);
                                          })).then((function (param) {
                                          return partial_arg$1("l", param);
                                        })).then((function (param) {
                                        return partial_arg("l", param);
                                      })).then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λl", instance[/* editors */1][/* source */1].getText());
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                Promise$BsMocha.it("should deactivate when stuck (\"Gl \")")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                              return partial_arg$3("\\", param);
                                            })).then((function (param) {
                                            return partial_arg$2("G", param);
                                          })).then((function (param) {
                                          return partial_arg$1("l", param);
                                        })).then((function (param) {
                                        return partial_arg(" ", param);
                                      })).then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ ", instance[/* editors */1][/* source */1].getText());
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                Promise$BsMocha.it("should deactivate after typing \"ESC\" (\"Gl\" + \"ESC\")")(undefined, undefined, undefined, (function (param) {
                        var partial_arg = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                        var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                        return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                              return partial_arg$3("\\", param);
                                            })).then((function (param) {
                                            return partial_arg$2("G", param);
                                          })).then((function (param) {
                                          return partial_arg$1("l", param);
                                        })).then((function (param) {
                                        return partial_arg("escape", param);
                                      })).then((function (instance) {
                                      Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ", instance[/* editors */1][/* source */1].getText());
                                      return Promise.resolve(/* () */0);
                                    }));
                      }));
                return Promise$BsMocha.it("should deactivate after typing \"ENTER\" (\"Gl\" + \"ENTER\")")(undefined, undefined, undefined, (function (param) {
                              var partial_arg = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$1 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$2 = Test__Util$AgdaMode.Keyboard[/* insert */2];
                              var partial_arg$3 = Test__Util$AgdaMode.Keyboard[/* dispatch */0];
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                                    return partial_arg$3("\\", param);
                                                  })).then((function (param) {
                                                  return partial_arg$2("G", param);
                                                })).then((function (param) {
                                                return partial_arg$1("l", param);
                                              })).then((function (param) {
                                              return partial_arg("\n", param);
                                            })).then((function (instance) {
                                            Test__Util$AgdaMode.Assert[/* equal */0](undefined, "λ\n", instance[/* editors */1][/* source */1].getText());
                                            return Promise.resolve(/* () */0);
                                          }));
                            }));
              }));
        return Mocha$BsMocha.describe("Issue #72")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* after_each */4]);
                      Promise$BsMocha.it("should make \"ʳ\" the first candidate")(undefined, undefined, undefined, (function (param) {
                              Test__Util$AgdaMode.Assert[/* equal */0](undefined, "ʳ", Rebase.$$Array[/* get */17](Translator$AgdaMode.translate("^r")[/* candidateSymbols */3], 0));
                              return Promise.resolve(/* () */0);
                            }));
                      return Promise$BsMocha.it("should make \"ˡ\" the first candidate")(undefined, undefined, undefined, (function (param) {
                                    Test__Util$AgdaMode.Assert[/* equal */0](undefined, "ˡ", Rebase.$$Array[/* get */17](Translator$AgdaMode.translate("^l")[/* candidateSymbols */3], 0));
                                    return Promise.resolve(/* () */0);
                                  }));
                    }));
      }));

/*  Not a pure module */
