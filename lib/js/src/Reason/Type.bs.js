// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Context$AgdaMode = require("./View/Context.bs.js");

var TypeCheckingPositivity = /* module */Block.localModule([], []);

function toAtomRange(interval) {
  var start = new Atom.Point(interval[/* start */0][/* line */1] - 1 | 0, interval[/* start */0][/* col */2] - 1 | 0);
  var end_ = new Atom.Point(interval[/* end_ */1][/* line */1] - 1 | 0, interval[/* end_ */1][/* col */2] - 1 | 0);
  return new Atom.Range(start, end_);
}

function toAtomRanges(range) {
  if (range) {
    return Rebase.$$Array[/* map */0](toAtomRange, Rebase.$$Array[/* fromList */13](range[1]));
  } else {
    return /* array */[];
  }
}

var Position = /* module */Block.localModule([
    "toAtomRange",
    "toAtomRanges"
  ], [
    toAtomRange,
    toAtomRanges
  ]);

var Parser = /* module */Block.localModule([], []);

var CommonPrim = /* module */Block.localModule([], []);

var Notation = /* module */Block.localModule([], []);

var Fixity = /* module */Block.localModule([], []);

var Name = /* module */Block.localModule([], []);

var Literal = /* module */Block.localModule([], []);

var Concrete = /* module */Block.localModule([], []);

var Common = /* module */Block.localModule([], []);

var Syntax = /* module */Block.localModule([
    "Position",
    "Parser",
    "CommonPrim",
    "Notation",
    "Fixity",
    "Name",
    "Literal",
    "Concrete",
    "Common"
  ], [
    Position,
    Parser,
    CommonPrim,
    Notation,
    Fixity,
    Name,
    Literal,
    Concrete,
    Common
  ]);

var TypeChecking = /* module */Block.localModule([], []);

var $$JSON = /* module */Block.localModule([], []);

var Emacs = /* module */Block.localModule([], []);

var Header = /* module */Block.localModule([], []);

function defaultValue(param) {
  return /* () */0;
}

var MouseEmitter = Context$AgdaMode.MakePair(/* module */Block.localModule(["defaultValue"], [defaultValue]));

var View = /* module */Block.localModule([
    "JSON",
    "Emacs",
    "Header",
    "MouseEmitter"
  ], [
    $$JSON,
    Emacs,
    Header,
    MouseEmitter
  ]);

exports.TypeCheckingPositivity = TypeCheckingPositivity;
exports.Syntax = Syntax;
exports.TypeChecking = TypeChecking;
exports.View = View;
/* MouseEmitter Not a pure module */
