// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Goal$AgdaMode = require("./Goal.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  switch (param) {
    case /* Simplified */0 :
        return "Simplified";
    case /* Instantiated */1 :
        return "Instantiated";
    case /* Normalised */2 :
        return "Normalised";
    
  }
}

var Normalization = {
  toString: toString
};

function toString$1(param) {
  switch (param) {
    case /* DefaultCompute */0 :
        return "DefaultCompute";
    case /* IgnoreAbstract */1 :
        return "IgnoreAbstract";
    case /* UseShowInstance */2 :
        return "UseShowInstance";
    
  }
}

function ignoreAbstract(param) {
  return param !== 0;
}

var ComputeMode = {
  toString: toString$1,
  ignoreAbstract: ignoreAbstract
};

function parse(param) {
  switch (param) {
    case "abort" :
        return /* Abort */3;
    case "auto" :
        return /* Auto */15;
    case "case" :
        return /* Case */16;
    case "compile" :
        return /* Compile */4;
    case "compute-normal-form[DefaultCompute]" :
        return /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 3, [/* DefaultCompute */0]);
    case "compute-normal-form[IgnoreAbstract]" :
        return /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 3, [/* IgnoreAbstract */1]);
    case "compute-normal-form[UseShowInstance]" :
        return /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 3, [/* UseShowInstance */2]);
    case "context[Instantiated]" :
        return /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Instantiated */1]);
    case "context[Normalised]" :
        return /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Normalised */2]);
    case "context[Simplified]" :
        return /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Simplified */0]);
    case "deactivate-input-symbol" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Abort */7]);
    case "give" :
        return /* Give */13;
    case "go-to-definition" :
        return /* GotoDefinition */18;
    case "goal-type-and-context[Instantiated]" :
        return /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 6, [/* Instantiated */1]);
    case "goal-type-and-context[Normalised]" :
        return /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 6, [/* Normalised */2]);
    case "goal-type-and-context[Simplified]" :
        return /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 6, [/* Simplified */0]);
    case "goal-type-and-inferred-type[Instantiated]" :
        return /* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 7, [/* Instantiated */1]);
    case "goal-type-and-inferred-type[Normalised]" :
        return /* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 7, [/* Normalised */2]);
    case "goal-type-and-inferred-type[Simplified]" :
        return /* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 7, [/* Simplified */0]);
    case "goal-type[Instantiated]" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 4, [/* Instantiated */1]);
    case "goal-type[Normalised]" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 4, [/* Normalised */2]);
    case "goal-type[Simplified]" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 4, [/* Simplified */0]);
    case "infer-type[Instantiated]" :
        return /* InferType */Caml_chrome_debugger.variant("InferType", 1, [/* Instantiated */1]);
    case "infer-type[Normalised]" :
        return /* InferType */Caml_chrome_debugger.variant("InferType", 1, [/* Normalised */2]);
    case "infer-type[Simplified]" :
        return /* InferType */Caml_chrome_debugger.variant("InferType", 1, [/* Simplified */0]);
    case "input-symbol" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Ordinary */0]);
    case "input-symbol-back-quote" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* BackQuote */6]);
    case "input-symbol-bracket" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Bracket */2]);
    case "input-symbol-curly-bracket" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* CurlyBracket */1]);
    case "input-symbol-double-quote" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* DoubleQuote */4]);
    case "input-symbol-parenthesis" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Parenthesis */3]);
    case "input-symbol-single-quote" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* SingleQuote */5]);
    case "load" :
        return /* Load */0;
    case "module-contents[Instantiated]" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 2, [/* Instantiated */1]);
    case "module-contents[Normalised]" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 2, [/* Normalised */2]);
    case "module-contents[Simplified]" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 2, [/* Simplified */0]);
    case "next-goal" :
        return /* NextGoal */9;
    case "previous-goal" :
        return /* PreviousGoal */10;
    case "query-symbol" :
        return /* QuerySymbol */17;
    case "quit" :
        return /* Quit */1;
    case "refine" :
        return /* Refine */14;
    case "restart" :
        return /* Restart */2;
    case "search-about[Instantiated]" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 0, [/* Instantiated */1]);
    case "search-about[Normalised]" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 0, [/* Normalised */2]);
    case "search-about[Simplified]" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 0, [/* Simplified */0]);
    case "show-constraints" :
        return /* ShowConstraints */7;
    case "show-goals" :
        return /* ShowGoals */8;
    case "solve-constraints" :
        return /* SolveConstraints */6;
    case "toggle-display-of-implicit-arguments" :
        return /* ToggleDisplayOfImplicitArguments */5;
    case "toggle-docking" :
        return /* ToggleDocking */11;
    case "why-in-scope" :
        return /* WhyInScope */12;
    default:
      return /* Load */0;
  }
}

var Primitive = {
  parse: parse
};

function toAgdaReadableString(cmd) {
  var command = cmd[/* command */2];
  var filepath = cmd[/* filepath */1];
  var version = cmd[/* version */0];
  var path = atom.config.get("agda-mode.libraryPath");
  path.unshift(".");
  var libraryPath = Rebase.$$String.joinWith(", ", Rebase.List.fromArray(Rebase.$$Array.map((function (x) {
                  return "\"" + (Parser$AgdaMode.filepath(x) + "\"");
                }), path)));
  var match = atom.config.get("agda-mode.highlightingMethod");
  var highlightingMethod = match === "Direct" ? "Direct" : "Indirect";
  var commonPart = function (param) {
    if (param) {
      return "IOTCM \"" + (String(filepath) + ("\" NonInteractive " + (String(highlightingMethod) + " ")));
    } else {
      return "IOTCM \"" + (String(filepath) + ("\" None " + (String(highlightingMethod) + " ")));
    }
  };
  var buildRange = function (goal) {
    if (Util$AgdaMode.Version.gte(version, "2.5.1")) {
      return Goal$AgdaMode.buildHaskellRange(false, filepath, goal);
    } else {
      return Goal$AgdaMode.buildHaskellRange(true, filepath, goal);
    }
  };
  if (typeof command === "number") {
    switch (command) {
      case /* Load */0 :
          if (Util$AgdaMode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + "\" [] )"));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + ("\" [" + (String(libraryPath) + "] )"))));
          }
      case /* Abort */1 :
          return commonPart(/* NonInteractive */1) + "( Cmd_abort )";
      case /* Compile */2 :
          var backend = atom.config.get("agda-mode.backend");
          if (Util$AgdaMode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + (String(backend) + (" \"" + (String(filepath) + "\" [] )"))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + (String(backend) + (" \"" + (String(filepath) + ("\" [" + (String(libraryPath) + "] )"))))));
          }
      case /* ToggleDisplayOfImplicitArguments */3 :
          return commonPart(/* NonInteractive */1) + "( ToggleImplicitArgs )";
      case /* SolveConstraints */4 :
          return commonPart(/* NonInteractive */1) + "( Cmd_solveAll Instantiated )";
      case /* ShowConstraints */5 :
          return commonPart(/* NonInteractive */1) + "( Cmd_constraints )";
      case /* ShowGoals */6 :
          return commonPart(/* NonInteractive */1) + "( Cmd_metas )";
      
    }
  } else {
    switch (command.tag | 0) {
      case /* WhyInScope */0 :
          var content = Parser$AgdaMode.userInput(command[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + (String(command[1]) + (" noRange \"" + (String(content) + "\" )"))));
      case /* WhyInScopeGlobal */1 :
          var content$1 = Parser$AgdaMode.userInput(command[0]);
          return commonPart(/* None */0) + ("( Cmd_why_in_scope_toplevel \"" + (String(content$1) + "\" )"));
      case /* SearchAbout */2 :
          var normalization$prime = toString(command[0]);
          var content$2 = Parser$AgdaMode.userInput(command[1]);
          return commonPart(/* None */0) + ("( Cmd_search_about_toplevel " + (String(normalization$prime) + ("  \"" + (String(content$2) + "\" )"))));
      case /* InferType */3 :
          var normalization$prime$1 = toString(command[0]);
          var content$3 = Parser$AgdaMode.userInput(command[1]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_infer " + (String(normalization$prime$1) + (" " + (String(command[2]) + (" noRange \"" + (String(content$3) + "\" )"))))));
      case /* InferTypeGlobal */4 :
          var normalization$prime$2 = toString(command[0]);
          var content$4 = Parser$AgdaMode.userInput(command[1]);
          return commonPart(/* None */0) + ("( Cmd_infer_toplevel " + (String(normalization$prime$2) + (" \"" + (String(content$4) + "\" )"))));
      case /* ModuleContents */5 :
          var normalization$prime$3 = toString(command[0]);
          var content$5 = Parser$AgdaMode.userInput(command[1]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_show_module_contents " + (String(normalization$prime$3) + (" " + (String(command[2]) + (" noRange \"" + (String(content$5) + "\" )"))))));
      case /* ModuleContentsGlobal */6 :
          var normalization$prime$4 = toString(command[0]);
          var content$6 = Parser$AgdaMode.userInput(command[1]);
          return commonPart(/* None */0) + ("( Cmd_show_module_contents_toplevel " + (String(normalization$prime$4) + (" \"" + (String(content$6) + "\" )"))));
      case /* ComputeNormalForm */7 :
          var index = command[2];
          var computeMode = command[0];
          var computeMode$prime = toString$1(computeMode);
          var ignoreAbstract = computeMode !== 0;
          var content$7 = Parser$AgdaMode.userInput(command[1]);
          if (Util$AgdaMode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + (String(computeMode$prime) + (" " + (String(index) + (" noRange \"" + (String(content$7) + "\" )"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + (String(ignoreAbstract) + (" " + (String(index) + (" noRange \"" + (String(content$7) + "\" )"))))));
          }
      case /* ComputeNormalFormGlobal */8 :
          var computeMode$1 = command[0];
          var computeMode$prime$1 = toString$1(computeMode$1);
          var ignoreAbstract$1 = computeMode$1 !== 0;
          var content$8 = Parser$AgdaMode.userInput(command[1]);
          if (Util$AgdaMode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + (String(computeMode$prime$1) + (" \"" + (String(content$8) + "\" )"))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + (String(ignoreAbstract$1) + (" \"" + (String(content$8) + "\" )"))));
          }
      case /* Give */9 :
          var index$1 = command[1];
          var goal = command[0];
          var content$9 = Goal$AgdaMode.getContent(goal);
          var range = buildRange(goal);
          if (Util$AgdaMode.Version.gte(version, "2.5.3")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give WithoutForce " + (String(index$1) + (" " + (String(range) + (" \"" + (String(content$9) + "\" )"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give " + (String(index$1) + (" " + (String(range) + (" \"" + (String(content$9) + "\" )"))))));
          }
      case /* Refine */10 :
          var goal$1 = command[0];
          var content$10 = Goal$AgdaMode.getContent(goal$1);
          var range$1 = buildRange(goal$1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_refine_or_intro False " + (String(command[1]) + (" " + (String(range$1) + (" \"" + (String(content$10) + "\" )"))))));
      case /* Auto */11 :
          var index$2 = command[1];
          var goal$2 = command[0];
          var content$11 = Goal$AgdaMode.getContent(goal$2);
          var range$2 = buildRange(goal$2);
          if (Util$AgdaMode.Version.gte(version, "2.6.0.1")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_autoOne " + (String(index$2) + (" " + (String(range$2) + (" \"" + (String(content$11) + "\" )"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_auto " + (String(index$2) + (" " + (String(range$2) + (" \"" + (String(content$11) + "\" )"))))));
          }
      case /* Case */12 :
          var goal$3 = command[0];
          var content$12 = Goal$AgdaMode.getContent(goal$3);
          var range$3 = buildRange(goal$3);
          return commonPart(/* NonInteractive */1) + ("( Cmd_make_case " + (String(command[1]) + (" " + (String(range$3) + (" \"" + (String(content$12) + "\" )"))))));
      case /* GoalType */13 :
          var normalization$prime$5 = toString(command[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type " + (String(normalization$prime$5) + (" " + (String(command[1]) + " noRange \"\" )"))));
      case /* Context */14 :
          var normalization$prime$6 = toString(command[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_context " + (String(normalization$prime$6) + (" " + (String(command[1]) + " noRange \"\" )"))));
      case /* GoalTypeAndContext */15 :
          var normalization$prime$7 = toString(command[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context " + (String(normalization$prime$7) + (" " + (String(command[1]) + " noRange \"\" )"))));
      case /* GoalTypeAndInferredType */16 :
          var content$13 = Goal$AgdaMode.getContent(command[1]);
          var normalization$prime$8 = toString(command[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context_infer " + (String(normalization$prime$8) + (" " + (String(command[2]) + (" noRange \"" + (String(content$13) + "\" )"))))));
      case /* GotoDefinition */17 :
          var content$14 = Parser$AgdaMode.userInput(command[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + (String(command[1]) + (" noRange \"" + (String(content$14) + "\" )"))));
      case /* GotoDefinitionGlobal */18 :
          var content$15 = Parser$AgdaMode.userInput(command[0]);
          return commonPart(/* None */0) + ("( Cmd_why_in_scope_toplevel \"" + (String(content$15) + "\" )"));
      
    }
  }
}

function isLoad(self) {
  var match = self[/* command */2];
  if (typeof match === "number") {
    return match === 0;
  } else {
    return false;
  }
}

function toString$2(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Load */0 :
          return "Load";
      case /* Abort */1 :
          return "Abort";
      case /* Compile */2 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */3 :
          return "ToggleDisplayOfImplicitArguments";
      case /* SolveConstraints */4 :
          return "SolveConstraints";
      case /* ShowConstraints */5 :
          return "ShowConstraints";
      case /* ShowGoals */6 :
          return "ShowGoals";
      
    }
  } else {
    switch (param.tag | 0) {
      case /* WhyInScope */0 :
          return "WhyInScope \"" + (param[0] + ("\" (Goal " + (String(param[1]) + ")")));
      case /* WhyInScopeGlobal */1 :
          return "WhyInScope \"" + (param[0] + "\" (Global)");
      case /* SearchAbout */2 :
          return "SearchAbout \"" + (param[1] + ("\" (" + (toString(param[0]) + ")")));
      case /* InferType */3 :
          return "InferType \"" + (param[1] + ("\" (Goal " + (String(param[2]) + (", " + (toString(param[0]) + ")")))));
      case /* InferTypeGlobal */4 :
          return "InferType \"" + (param[1] + ("\" (Global, " + (toString(param[0]) + ")")));
      case /* ModuleContents */5 :
          return "ModuleContents \"" + (param[1] + ("\" (Goal " + (String(param[2]) + (", " + (toString(param[0]) + ")")))));
      case /* ModuleContentsGlobal */6 :
          return "ModuleContents \"" + (param[1] + ("\" (Global, " + (toString(param[0]) + ")")));
      case /* ComputeNormalForm */7 :
          return "ComputeNormalForm \"" + (param[1] + ("\" (Goal " + (String(param[2]) + (", " + (toString$1(param[0]) + ")")))));
      case /* ComputeNormalFormGlobal */8 :
          return "ComputeNormalForm \"" + (param[1] + ("\" (Global, " + (toString$1(param[0]) + ")")));
      case /* Give */9 :
          return "Give (Goal " + (String(param[1]) + ")");
      case /* Refine */10 :
          return "Refine (Goal " + (String(param[1]) + ")");
      case /* Auto */11 :
          return "Auto (Goal " + (String(param[1]) + ")");
      case /* Case */12 :
          return "Case (Goal " + (String(param[1]) + ")");
      case /* GoalType */13 :
          return "GoalType (Goal " + (String(param[1]) + (", " + (toString(param[0]) + ")")));
      case /* Context */14 :
          return "Context (Goal " + (String(param[1]) + (", " + (toString(param[0]) + ")")));
      case /* GoalTypeAndContext */15 :
          return "GoalTypeAndContext (Goal " + (String(param[1]) + (", " + (toString(param[0]) + ")")));
      case /* GoalTypeAndInferredType */16 :
          return "GoalTypeAndInferredType (Goal " + (String(param[2]) + (", " + (toString(param[0]) + ")")));
      case /* GotoDefinition */17 :
          return "GotoDefinition \"" + (param[0] + ("\" (Goal " + (String(param[1]) + ")")));
      case /* GotoDefinitionGlobal */18 :
          return "GotoDefinition \"" + (param[0] + "\" (Global)");
      
    }
  }
}

var Remote = {
  toAgdaReadableString: toAgdaReadableString,
  isLoad: isLoad,
  toString: toString$2
};

var names = /* array */[
  "load",
  "quit",
  "restart",
  "abort",
  "compile",
  "toggle-display-of-implicit-arguments",
  "solve-constraints",
  "show-constraints",
  "show-goals",
  "next-goal",
  "previous-goal",
  "toggle-docking",
  "why-in-scope",
  "search-about[Simplified]",
  "search-about[Instantiated]",
  "search-about[Normalised]",
  "infer-type[Simplified]",
  "infer-type[Instantiated]",
  "infer-type[Normalised]",
  "module-contents[Simplified]",
  "module-contents[Instantiated]",
  "module-contents[Normalised]",
  "compute-normal-form[DefaultCompute]",
  "compute-normal-form[IgnoreAbstract]",
  "compute-normal-form[UseShowInstance]",
  "give",
  "refine",
  "auto",
  "case",
  "goal-type[Simplified]",
  "goal-type[Instantiated]",
  "goal-type[Normalised]",
  "context[Simplified]",
  "context[Instantiated]",
  "context[Normalised]",
  "goal-type-and-context[Simplified]",
  "goal-type-and-context[Instantiated]",
  "goal-type-and-context[Normalised]",
  "goal-type-and-inferred-type[Simplified]",
  "goal-type-and-inferred-type[Instantiated]",
  "goal-type-and-inferred-type[Normalised]",
  "input-symbol",
  "input-symbol-curly-bracket",
  "input-symbol-bracket",
  "input-symbol-parenthesis",
  "input-symbol-double-quote",
  "input-symbol-single-quote",
  "input-symbol-back-quote",
  "deactivate-input-symbol",
  "query-symbol",
  "go-to-definition"
];

exports.Normalization = Normalization;
exports.ComputeMode = ComputeMode;
exports.Primitive = Primitive;
exports.Remote = Remote;
exports.names = names;
/* Goal-AgdaMode Not a pure module */
