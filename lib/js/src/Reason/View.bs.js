// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Tab$AgdaMode = require("./View/Tab.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var Panel$AgdaMode = require("./View/Panel/Panel.bs.js");
var Editors$AgdaMode = require("./Editors.bs.js");
var Settings$AgdaMode = require("./View/Settings/Settings.bs.js");
var MiniEditor$AgdaMode = require("./View/MiniEditor.bs.js");

function hook(f, handle) {
  f[0] = handle;
  return /* () */0;
}

function make(param) {
  var updateHeader = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var updateRawBody = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var updateMode = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var updateActivation = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var updateMountTo = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var inquireConnection = Util$AgdaMode.Msg[/* make */0](/* () */0);
  var onInquireConnection = Util$AgdaMode.Event[/* make */1](/* () */0);
  var inquireQuery = Util$AgdaMode.Msg[/* make */0](/* () */0);
  var interceptAndInsertKey = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var activateInputMethod = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  var activateSettingsView = Util$AgdaMode.Msg[/* make */0](/* () */0);
  var onSettingsView = Util$AgdaMode.Msg[/* make */0](/* () */0);
  var navigateSettingsView = Util$AgdaMode.Msg[/* make */0](/* () */0);
  var destroy = /* record */Block.record(["contents"], [(function (param) {
          return /* () */0;
        })]);
  return /* record */Block.record([
            "updateHeader",
            "updateRawBody",
            "updateMode",
            "updateMountTo",
            "updateActivation",
            "inquireConnection",
            "onInquireConnection",
            "inquireQuery",
            "interceptAndInsertKey",
            "activateInputMethod",
            "activateSettingsView",
            "onSettingsView",
            "navigateSettingsView",
            "destroy"
          ], [
            updateHeader,
            updateRawBody,
            updateMode,
            updateMountTo,
            updateActivation,
            inquireConnection,
            onInquireConnection,
            inquireQuery,
            interceptAndInsertKey,
            activateInputMethod,
            activateSettingsView,
            onSettingsView,
            navigateSettingsView,
            destroy
          ]);
}

var Handles = /* module */Block.localModule([
    "hook",
    "make"
  ], [
    hook,
    make
  ]);

function createElement(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function initialState(textEditor, param) {
  return /* record */Block.record([
            "header",
            "body",
            "mountAt",
            "activated",
            "settingsView",
            "editors",
            "mode"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                ""
              ]),
            Block.record([
                "maxHeight",
                "raw"
              ], [
                170,
                0
              ]),
            Block.variant("Bottom", 0, [createElement(/* () */0)]),
            false,
            undefined,
            Editors$AgdaMode.make(textEditor),
            0
          ]);
}

function mountPanel(self, mountTo) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(self[/* state */1][/* editors */5][/* source */1], (function (param) {
                  return "[Agda Mode] " + self[/* state */1][/* editors */5][/* source */1].getTitle();
                }), (function (param, param$1, previousItem) {
                  var pane = atom.workspace.paneForItem(previousItem);
                  pane.activate();
                  pane.activateItem(previousItem);
                  return /* () */0;
                }), undefined, (function (param) {
                  return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 6, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */2];
  if (match.tag) {
    if (mountTo) {
      return /* () */0;
    } else {
      Curry._1(match[0][/* kill */1], /* () */0);
      return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Bottom */Block.variant("Bottom", 0, [createElement(/* () */0)])]));
    }
  } else if (mountTo) {
    return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 5, [/* Pane */Block.variant("Pane", 1, [createTab(/* () */0)])]));
  } else {
    return /* () */0;
  }
}

function reducer(handles, action, state) {
  if (typeof action === "number") {
    if (action === 0) {
      var match = state[/* mountAt */2];
      if (match.tag) {
        var tab = match[0];
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "activated",
                      "settingsView",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      true,
                      state[/* settingsView */4],
                      state[/* editors */5],
                      state[/* mode */6]
                    ]),
                  (function (param) {
                      return Curry._1(tab[/* activate */2], /* () */0);
                    })
                ]);
      } else {
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "activated",
                      "settingsView",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      true,
                      state[/* settingsView */4],
                      state[/* editors */5],
                      state[/* mode */6]
                    ])]);
      }
    } else {
      return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                    "header",
                    "body",
                    "mountAt",
                    "activated",
                    "settingsView",
                    "editors",
                    "mode"
                  ], [
                    state[/* header */0],
                    state[/* body */1],
                    state[/* mountAt */2],
                    false,
                    state[/* settingsView */4],
                    state[/* editors */5],
                    state[/* mode */6]
                  ])]);
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var sort = action[0];
          var init = state[/* editors */5];
          return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                    /* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        Block.record([
                            "focused",
                            "source",
                            "query"
                          ], [
                            sort,
                            init[/* source */1],
                            init[/* query */2]
                          ]),
                        state[/* mode */6]
                      ]),
                    (function (self) {
                        return Editors$AgdaMode.Focus[/* on */1](sort, self[/* state */1][/* editors */5]);
                      })
                  ]);
      case 1 : 
          var init$1 = state[/* editors */5];
          var init$2 = state[/* editors */5][/* query */2];
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        Block.record([
                            "focused",
                            "source",
                            "query"
                          ], [
                            init$1[/* focused */0],
                            init$1[/* source */1],
                            Block.record([
                                "value",
                                "placeholder",
                                "ref",
                                "telePromise"
                              ], [
                                init$2[/* value */0],
                                init$2[/* placeholder */1],
                                Caml_option.some(action[0]),
                                init$2[/* telePromise */3]
                              ])
                          ]),
                        state[/* mode */6]
                      ])]);
      case 2 : 
          var init$3 = state[/* editors */5];
          var init$4 = state[/* editors */5][/* query */2];
          return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                    /* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        Block.record([
                            "focused",
                            "source",
                            "query"
                          ], [
                            init$3[/* focused */0],
                            init$3[/* source */1],
                            Block.record([
                                "value",
                                "placeholder",
                                "ref",
                                "telePromise"
                              ], [
                                action[1],
                                action[0],
                                init$4[/* ref */2],
                                init$4[/* telePromise */3]
                              ])
                          ]),
                        state[/* mode */6]
                      ]),
                    (function (self) {
                        return Editors$AgdaMode.Focus[/* on */1](/* Query */1, self[/* state */1][/* editors */5]);
                      })
                  ]);
      case 3 : 
          var open_ = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                        var match = state[/* settingsView */4];
                        if (match !== undefined) {
                          if (open_) {
                            return 0;
                          } else {
                            Curry._1(match[/* kill */1], /* () */0);
                            return Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 4, [undefined]));
                          }
                        } else if (open_) {
                          var tab = Tab$AgdaMode.make(self[/* state */1][/* editors */5][/* source */1], (function (param) {
                                  return "[Settings] " + self[/* state */1][/* editors */5][/* source */1].getTitle();
                                }), (function (element, param, param$1) {
                                  ReactDom.render(ReasonReact.element(undefined, undefined, Settings$AgdaMode.make(handles[/* inquireConnection */5], handles[/* onInquireConnection */6], handles[/* navigateSettingsView */12], /* array */[])), element);
                                  return Util$AgdaMode.Msg[/* send */1](true, handles[/* onSettingsView */11]);
                                }), undefined, (function (element) {
                                  Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 3, [false]));
                                  ReactDom.unmountComponentAtNode(element);
                                  return Util$AgdaMode.Msg[/* send */1](false, handles[/* onSettingsView */11]);
                                }), undefined, /* () */0);
                          return Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 4, [tab]));
                        } else {
                          return 0;
                        }
                      })]);
      case 4 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* activated */3],
                        action[0],
                        state[/* editors */5],
                        state[/* mode */6]
                      ])]);
      case 5 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        action[0],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        state[/* editors */5],
                        state[/* mode */6]
                      ])]);
      case 6 : 
          var mountTo = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                        return mountPanel(self, mountTo);
                      })]);
      case 7 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        action[0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        state[/* editors */5],
                        state[/* mode */6]
                      ])]);
      case 8 : 
          var init$5 = state[/* body */1];
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        Block.record([
                            "maxHeight",
                            "raw"
                          ], [
                            init$5[/* maxHeight */0],
                            action[0]
                          ]),
                        state[/* mountAt */2],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        state[/* editors */5],
                        state[/* mode */6]
                      ])]);
      case 9 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "editors",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* mountAt */2],
                        state[/* activated */3],
                        state[/* settingsView */4],
                        state[/* editors */5],
                        action[0]
                      ])]);
      
    }
  }
}

var component = ReasonReact.reducerComponent("View");

function make$1(textEditor, handles, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                handles[/* updateMountTo */3][0] = (function (mountTo) {
                    return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 6, [mountTo]));
                  });
                handles[/* updateMode */2][0] = (function (mode) {
                    return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 9, [mode]));
                  });
                handles[/* updateActivation */4][0] = (function (activate) {
                    return Curry._1(self[/* send */3], activate ? /* Activate */0 : /* Deactivate */1);
                  });
                handles[/* updateHeader */0][0] = (function (header) {
                    return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 7, [header]));
                  });
                handles[/* updateRawBody */1][0] = (function (rawBody) {
                    return Curry._1(self[/* send */3], /* UpdateRawBody */Block.variant("UpdateRawBody", 8, [rawBody]));
                  });
                Util$AgdaMode.$$Promise[/* thenDrop */8]((function (param) {
                        return Curry._1(self[/* send */3], /* InquireQuery */Block.variant("InquireQuery", 2, [
                                      param[0],
                                      param[1]
                                    ]));
                      }), Util$AgdaMode.Msg[/* recv */2](self[/* onUnmount */4], handles[/* inquireQuery */7]));
                handles[/* destroy */13][0] = (function (param) {
                    console.log("destroy!");
                    return /* () */0;
                  });
                return Util$AgdaMode.$$Promise[/* thenDrop */8]((function (activate) {
                              return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 3, [activate]));
                            }), Util$AgdaMode.Msg[/* recv */2](self[/* onUnmount */4], handles[/* activateSettingsView */10]));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var editors = match[/* editors */5];
                var mountAt = match[/* mountAt */2];
                var element;
                element = mountAt.tag ? mountAt[0][/* element */0] : mountAt[0];
                var hidden;
                hidden = mountAt.tag ? false : !match[/* activated */3];
                var partial_arg = handles[/* interceptAndInsertKey */8];
                var partial_arg$1 = handles[/* activateInputMethod */9];
                return React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, Panel$AgdaMode.make(editors, element, (function (mountTo) {
                                      return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 6, [mountTo]));
                                    }), match[/* body */1], match[/* header */0], mountAt, match[/* mode */6], hidden, (function (result) {
                                      MiniEditor$AgdaMode.Model[/* answer */2](result, editors[/* query */2]);
                                      Curry._1(handles[/* activateInputMethod */9][0], false);
                                      Curry._1(self[/* send */3], /* Focus */Block.variant("Focus", 0, [/* Source */0]));
                                      return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 9, [/* Display */0]));
                                    }), (function (focused) {
                                      return Curry._1(self[/* send */3], focused ? /* Focus */Block.variant("Focus", 0, [/* Query */1]) : /* Focus */Block.variant("Focus", 0, [/* Source */0]));
                                    }), (function () {
                                      MiniEditor$AgdaMode.Model[/* reject */3](Editors$AgdaMode.QueryCancelled, editors[/* query */2]);
                                      Curry._1(handles[/* activateInputMethod */9][0], false);
                                      Curry._1(self[/* send */3], /* Focus */Block.variant("Focus", 0, [/* Source */0]));
                                      return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 9, [/* Display */0]));
                                    }), (function (ref) {
                                      return Curry._1(self[/* send */3], /* SetQueryRef */Block.variant("SetQueryRef", 1, [ref]));
                                    }), editors[/* query */2][/* placeholder */1], editors[/* query */2][/* value */0], (function (param) {
                                      partial_arg[0] = param;
                                      return /* () */0;
                                    }), (function (param) {
                                      partial_arg$1[0] = param;
                                      return /* () */0;
                                    }), handles[/* activateSettingsView */10], (function (status) {
                                      return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 3, [status]));
                                    }), /* array */[])));
              }),
            (function (param) {
                return initialState(textEditor, param);
              }),
            component[/* retainedProps */11],
            (function (param, param$1) {
                return reducer(handles, param, param$1);
              }),
            component[/* jsElementWrapped */13]
          ]);
}

function initialize(textEditor) {
  var element = document.createElement("article");
  var handles = make(/* () */0);
  ReactDom.render(ReasonReact.element(undefined, undefined, make$1(textEditor, handles, /* array */[])), element);
  return handles;
}

var Msg = 0;

var Event = 0;

exports.Msg = Msg;
exports.Event = Event;
exports.Handles = Handles;
exports.createElement = createElement;
exports.initialState = initialState;
exports.mountPanel = mountPanel;
exports.reducer = reducer;
exports.component = component;
exports.make = make$1;
exports.initialize = initialize;
/* component Not a pure module */
