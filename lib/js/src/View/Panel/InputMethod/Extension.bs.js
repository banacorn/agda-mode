// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");

function defaultKeymap(param) {
  var keymap = { };
  keymap["^r"] = /* array */["ʳ"];
  keymap["^l"] = /* array */["ˡ"];
  return keymap;
}

function readConfig(param) {
  var match = atom.config.get("agda-mode.inputMethodExtension");
  if (match !== undefined) {
    return match;
  } else {
    return "{}";
  }
}

function setConfig(keymap) {
  var encoder = function (param) {
    return Json_encode.dict((function (param) {
                  return Json_encode.array((function (prim) {
                                return prim;
                              }), param);
                }), param);
  };
  atom.config.set("agda-mode.inputMethodExtension", Json.stringify(encoder(keymap)));
  return /* () */0;
}

var partial_arg = Rebase.$$Option.map;

var parse = Curry._2(Rebase.Fn.$great$great, Json.parse, (function (param) {
        return partial_arg((function (param) {
                      return Json_decode.dict((function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), param);
                    }), param);
      }));

var partial_arg$1 = { };

var partial_arg$2 = Rebase.$$Option.getOr;

var readKeymap = Curry._2(Rebase.Fn.$great$great, Curry._2(Rebase.Fn.$great$great, readConfig, parse), (function (param) {
        return partial_arg$2(partial_arg$1, param);
      }));

function lookup(key) {
  return Rebase.$$Option.getOr(/* array */[], Js_dict.get(Curry._1(readKeymap, /* () */0), key));
}

function add(key, symbols) {
  var keymap = Curry._1(readKeymap, /* () */0);
  var match = Js_dict.get(keymap, key);
  if (match !== undefined) {
    keymap[key] = Rebase.$$Array.concat(match, symbols);
  } else {
    keymap[key] = symbols;
  }
  return setConfig(keymap);
}

function modify(key, symbols) {
  var keymap = Curry._1(readKeymap, /* () */0);
  keymap[key] = symbols;
  return setConfig(keymap);
}

function $$delete(key) {
  var keymap = Curry._1(readKeymap, /* () */0);
  var delete$prime = function (id){{delete keymap[id]}};
  delete$prime(key);
  return setConfig(keymap);
}

function resetToDefault(param) {
  return setConfig(defaultKeymap(/* () */0));
}

function extendKeySuggestions(key, origionalSuggestions) {
  var partial_arg = Rebase.$$String.length(key);
  var partial_arg$1 = Rebase.$$String.sub;
  var partial_arg$2 = Rebase.$$String.startsWith;
  var extension = Rebase.$$Array.filter((function (s) {
          return Rebase.$$String.length(s) === 1;
        }), Rebase.$$Array.map((function (param) {
              return partial_arg$1(partial_arg, 1, param);
            }), Rebase.$$Array.filter((function (param) {
                  return partial_arg$2(key, param);
                }), Object.keys(Curry._1(readKeymap, /* () */0)))));
  var union = function (xs, ys) {
    return Rebase.$$Array.concat(xs, Rebase.$$Array.filter((function (y) {
                      return !xs.includes(y);
                    }), ys));
  };
  return union(origionalSuggestions, extension).sort();
}

function extendCandidateSymbols(key, originalCandidates) {
  var extension = lookup(key);
  var removedOverlaps = Rebase.$$Array.filter((function (s) {
          return !extension.includes(s);
        }), originalCandidates);
  return Rebase.$$Array.concat(removedOverlaps, extension);
}

exports.defaultKeymap = defaultKeymap;
exports.readConfig = readConfig;
exports.setConfig = setConfig;
exports.parse = parse;
exports.readKeymap = readKeymap;
exports.lookup = lookup;
exports.add = add;
exports.modify = modify;
exports.$$delete = $$delete;
exports.resetToDefault = resetToDefault;
exports.extendKeySuggestions = extendKeySuggestions;
exports.extendCandidateSymbols = extendCandidateSymbols;
/* parse Not a pure module */
