// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function captures(handler, regex, raw) {
  return Rebase.$$Option[/* flatMap */5](handler, Rebase.$$Option[/* map */0]((function (result) {
                    return Rebase.$$Array[/* map */0]((function (prim) {
                                  if (prim == null) {
                                    return undefined;
                                  } else {
                                    return Caml_option.some(prim);
                                  }
                                }), result);
                  }), Caml_option.null_to_opt(regex.exec(raw))));
}

function agdaOutput(s) {
  return s.replace((/\\n/g), "\n");
}

function at(i, parser, captured) {
  if (i >= Rebase.$$Array[/* length */16](captured)) {
    return undefined;
  } else {
    return Rebase.$$Option[/* flatMap */5](parser, Rebase.$$Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, i)));
  }
}

function choice(res, raw) {
  return Rebase.$$Array[/* reduce */3]((function (result, parse) {
                if (result !== undefined) {
                  return Caml_option.some(Caml_option.valFromOption(result));
                } else {
                  return Curry._1(parse, raw);
                }
              }), undefined, res);
}

function $$int(s) {
  var exit = 0;
  var i;
  try {
    i = Caml_format.caml_int_of_string(s);
    exit = 1;
  }
  catch (exn){
    return undefined;
  }
  if (exit === 1) {
    return i;
  }
  
}

function userInput(s) {
  var s$1 = s.replace((/\\/g), "\\\\").replace((/\"/g), "\\\"").replace((/\n/g), "\\n");
  var match = atom.config.get("agda-mode.trimSpaces");
  if (match) {
    return Rebase.$$String[/* trim */8](s$1);
  } else {
    return s$1;
  }
}

function filepath(s) {
  var s$prime = s;
  if (s.charCodeAt(0) === 8234.0) {
    s$prime = s$prime.slice(1);
  }
  return Rebase.$$String[/* trim */8](s$prime);
}

function commandLine(s) {
  var parts = Rebase.List[/* fromArray */12](s.replace((/\s+/g), " ").split(" "));
  if (parts) {
    return /* tuple */[
            filepath(parts[0]),
            Rebase.$$Array[/* fromList */13](parts[1])
          ];
  } else {
    return /* tuple */[
            "",
            /* array */[]
          ];
  }
}

function rectifyEmacs(s) {
  var s$prime = s;
  if (s.charCodeAt(0) === 8234.0) {
    s$prime = s$prime.slice(1);
  }
  return Rebase.$$String[/* trim */8](s$prime);
}

function preprocess(string) {
  var result = string.replace((/\\\\/g), "/");
  if (result.substring(0, 13) === "cannot read: ") {
    return /* Error */Block.variant("Error", 1, [result.slice(12)]);
  } else if (Rebase.$$String[/* startsWith */3]("((last", result)) {
    var index = result.indexOf("(agda");
    return /* Ok */Block.variant("Ok", 0, [result.substring(index, Rebase.$$String[/* length */1](string) - 1 | 0)]);
  } else {
    return /* Ok */Block.variant("Ok", 0, [result]);
  }
}

function toString(param) {
  if (param.tag) {
    return "[" + (Rebase.$$Array[/* map */0](toString, param[0]).join(", ") + "]");
  } else {
    return "\"" + (param[0] + "\"");
  }
}

function flatten(param) {
  if (param.tag) {
    return Rebase.$$Array[/* flatMap */5](flatten, param[0]);
  } else {
    return /* array */[param[0]];
  }
}

function postprocess(string) {
  var stack = /* array */[/* record */Block.record(["contents"], [Block.variant("L", 1, [/* array */[]])])];
  var word = "";
  var escaped = false;
  var in_str = false;
  var pushToTheTop = function (elem) {
    var index = Rebase.$$Array[/* length */16](stack) - 1 | 0;
    var match = Rebase.$$Array[/* get */17](stack, index);
    if (match !== undefined) {
      var expr = match;
      var match$1 = expr[0];
      if (match$1.tag) {
        match$1[0].push(elem);
        return /* () */0;
      } else {
        expr[0] = /* L */Block.variant("L", 1, [/* array */[
              expr[0],
              elem
            ]]);
        return /* () */0;
      }
    } else {
      return /* () */0;
    }
  };
  var totalLength = Rebase.$$String[/* length */1](string);
  for(var i = 0 ,i_finish = totalLength - 1 | 0; i <= i_finish; ++i){
    var $$char = string.charAt(i);
    if (escaped) {
      if ($$char === "n") {
        word = word + "\\";
      }
      word = word + $$char;
      escaped = false;
    } else if (!($$char === "'" && !in_str)) {
      if ($$char === "(" && !in_str) {
        stack.push(/* record */Block.record(["contents"], [Block.variant("L", 1, [/* array */[]])]));
      } else if ($$char === ")" && !in_str) {
        if (word !== "") {
          pushToTheTop(/* A */Block.variant("A", 0, [word]));
          word = "";
        }
        var match = stack.pop();
        if (match !== undefined) {
          pushToTheTop(match[0]);
        }
        
      } else if ($$char === " " && !in_str) {
        if (word !== "") {
          pushToTheTop(/* A */Block.variant("A", 0, [word]));
          word = "";
        }
        
      } else if ($$char === "\"") {
        in_str = !in_str;
      } else if ($$char === "\\" && in_str) {
        escaped = true;
      } else {
        word = word + $$char;
      }
    }
    
  }
  var match$1 = Rebase.$$Array[/* get */17](stack, 0);
  if (match$1 !== undefined) {
    var match$2 = match$1[0];
    if (match$2.tag) {
      var match$3 = Rebase.$$Array[/* get */17](match$2[0], 0);
      if (match$3 !== undefined) {
        return /* Ok */Block.variant("Ok", 0, [match$3]);
      } else {
        return /* Error */Block.variant("Error", 1, [string]);
      }
    } else {
      return /* Error */Block.variant("Error", 1, [string]);
    }
  } else {
    return /* Error */Block.variant("Error", 1, [string]);
  }
}

function parse(string) {
  return Rebase.Result[/* flatMap */6](postprocess, preprocess(string));
}

function parseFile(content) {
  return Rebase.$$Array[/* map */0]((function (line) {
                return parse(line.trim());
              }), Rebase.$$Array[/* filterMap */23]((function (x) {
                    return x;
                  }), Rebase.$$Array[/* map */0]((function (result) {
                        if (result !== undefined) {
                          var chunk = result;
                          if (chunk === "") {
                            return undefined;
                          } else {
                            return chunk;
                          }
                        }
                        
                      }), content.split((/\r\n|\n/)))));
}

var SExpression = /* module */Block.localModule([
    "preprocess",
    "toString",
    "flatten",
    "postprocess",
    "parse",
    "parseFile"
  ], [
    preprocess,
    toString,
    flatten,
    postprocess,
    parse,
    parseFile
  ]);

exports.captures = captures;
exports.agdaOutput = agdaOutput;
exports.at = at;
exports.choice = choice;
exports.$$int = $$int;
exports.userInput = userInput;
exports.filepath = filepath;
exports.commandLine = commandLine;
exports.rectifyEmacs = rectifyEmacs;
exports.SExpression = SExpression;
/* No side effect */
