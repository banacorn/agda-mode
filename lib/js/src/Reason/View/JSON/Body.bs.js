// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Emacs$AgdaMode = require("../../Emacs.bs.js");
var Error$AgdaMode = require("./Error.bs.js");
var Context$AgdaMode = require("../Context.bs.js");
var Decoder$AgdaMode = require("../../Decoder.bs.js");
var AllGoalsWarnings$AgdaMode = require("./AllGoalsWarnings.bs.js");
var EmacsConstraints$AgdaMode = require("../Emacs/EmacsConstraints.bs.js");
var EmacsGoalTypeContext$AgdaMode = require("../Emacs/EmacsGoalTypeContext.bs.js");
var EmacsAllGoalsWarnings$AgdaMode = require("../Emacs/EmacsAllGoalsWarnings.bs.js");

var component = ReasonReact.statelessComponent("JSONBody");

function make(raw, emacs, maxBodyHeight, useJSON, hidden, mountAtBottom, emit, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                var comp;
                if (useJSON) {
                  var match = Decoder$AgdaMode.parseBody(raw);
                  switch (match.tag | 0) {
                    case 0 : 
                        comp = ReasonReact.element(undefined, undefined, AllGoalsWarnings$AgdaMode.make(match[0], /* array */[]));
                        break;
                    case 1 : 
                        comp = ReasonReact.element(undefined, undefined, Error$AgdaMode.make(match[0], match[1], /* array */[]));
                        break;
                    case 2 : 
                        comp = React.createElement("p", undefined, match[0]);
                        break;
                    
                  }
                } else {
                  var parsed = Emacs$AgdaMode.Parser[/* body */10](emacs);
                  var header = parsed[/* header */1];
                  var body = parsed[/* body */2];
                  var match$1 = parsed[/* kind */0];
                  switch (match$1) {
                    case 0 : 
                        comp = ReasonReact.element(undefined, undefined, EmacsAllGoalsWarnings$AgdaMode.make(header, body, /* array */[]));
                        break;
                    case 1 : 
                        comp = ReasonReact.element(undefined, undefined, EmacsGoalTypeContext$AgdaMode.make(body, /* array */[]));
                        break;
                    case 2 : 
                        comp = ReasonReact.element(undefined, undefined, EmacsConstraints$AgdaMode.make(body, /* array */[]));
                        break;
                    case 3 : 
                        comp = React.createElement("p", undefined, body);
                        break;
                    
                  }
                }
                var className = hidden ? $$String.concat(" ", /* :: */Block.simpleVariant("::", [
                          "agda-body",
                          /* :: */Block.simpleVariant("::", [
                              "native-key-bindings",
                              /* :: */Block.simpleVariant("::", [
                                  "hidden",
                                  /* [] */0
                                ])
                            ])
                        ])) : $$String.concat(" ", /* :: */Block.simpleVariant("::", [
                          "agda-body",
                          /* :: */Block.simpleVariant("::", [
                              "native-key-bindings",
                              /* [] */0
                            ])
                        ]));
                var style = mountAtBottom ? ({
                      maxHeight: String(maxBodyHeight) + "px"
                    }) : undefined;
                var tmp = {
                  className: className,
                  tabIndex: -1
                };
                if (style !== undefined) {
                  tmp.style = Js_primitive.valFromOption(style);
                }
                return ReasonReact.element(undefined, undefined, Curry._2(Context$AgdaMode.Emitter[/* Provider */1][/* make */0], emit, /* array */[React.createElement("section", tmp, comp)]));
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.raw, jsProps.emacs, jsProps.maxBodyHeight, jsProps.useJSON, jsProps.hidden, jsProps.mountAtBottom, jsProps.emit, /* array */[]);
      }));

exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
