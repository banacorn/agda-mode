// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Link$AgdaMode = require("../Link.bs.js");

var component = ReasonReact.statelessComponent("EmacsTerm");

function make(term, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                switch (term.tag | 0) {
                  case 0 : 
                      return React.createElement("span", {
                                  className: "expr"
                                }, term[0]);
                  case 1 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(/* NoRange */0, true, true, /* :: */Block.simpleVariant("::", [
                                        "expr",
                                        /* :: */Block.simpleVariant("::", [
                                            "question-mark",
                                            /* [] */0
                                          ])
                                      ]), /* array */[term[0]]));
                  case 2 : 
                      return React.createElement("span", {
                                  className: "expr underscore"
                                }, term[0]);
                  
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var Term = /* module */Block.localModule([
    "component",
    "jump",
    "hover",
    "make"
  ], [
    component,
    true,
    true,
    make
  ]);

var component$1 = ReasonReact.statelessComponent("EmacsExpr");

function make$1(expr, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$1[/* debugName */0],
            component$1[/* reactClassInternal */1],
            component$1[/* handedOffState */2],
            component$1[/* willReceiveProps */3],
            component$1[/* didMount */4],
            component$1[/* didUpdate */5],
            component$1[/* willUnmount */6],
            component$1[/* willUpdate */7],
            component$1[/* shouldUpdate */8],
            (function () {
                var terms = $$Array.map((function (term) {
                        return ReasonReact.element(undefined, undefined, make(term, /* array */[]));
                      }), expr);
                return ReactDOMRe.createElementVariadic("span", undefined, terms);
              }),
            component$1[/* initialState */10],
            component$1[/* retainedProps */11],
            component$1[/* reducer */12],
            component$1[/* jsElementWrapped */13]
          ]);
}

var Expr = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$1,
    make$1
  ]);

var component$2 = ReasonReact.statelessComponent("EmacsOutputConstraint");

function make$2(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$2[/* debugName */0],
            component$2[/* reactClassInternal */1],
            component$2[/* handedOffState */2],
            component$2[/* willReceiveProps */3],
            component$2[/* didMount */4],
            component$2[/* didUpdate */5],
            component$2[/* willUnmount */6],
            component$2[/* willUpdate */7],
            component$2[/* shouldUpdate */8],
            (function () {
                switch (value.tag | 0) {
                  case 0 : 
                      return React.createElement("li", undefined, ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])), " : ", ReasonReact.element(undefined, undefined, make$1(value[1], /* array */[])));
                  case 1 : 
                      return React.createElement("li", undefined, "Type ", ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])));
                  case 2 : 
                      return React.createElement("li", undefined, "Sort ", ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])));
                  case 3 : 
                      return React.createElement("li", undefined, ReasonReact.element(undefined, undefined, make$1(value[0], /* array */[])));
                  
                }
              }),
            component$2[/* initialState */10],
            component$2[/* retainedProps */11],
            component$2[/* reducer */12],
            component$2[/* jsElementWrapped */13]
          ]);
}

var OutputConstraint = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$2,
    make$2
  ]);

var component$3 = ReasonReact.statelessComponent("EmacsGoal");

function make$3(label, expr, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$3[/* debugName */0],
            component$3[/* reactClassInternal */1],
            component$3[/* handedOffState */2],
            component$3[/* willReceiveProps */3],
            component$3[/* didMount */4],
            component$3[/* didUpdate */5],
            component$3[/* willUnmount */6],
            component$3[/* willUpdate */7],
            component$3[/* shouldUpdate */8],
            (function () {
                return React.createElement("li", {
                            className: "labeled"
                          }, React.createElement("span", {
                                className: "label"
                              }, label), ReasonReact.element(undefined, undefined, make$1(expr, /* array */[])));
              }),
            component$3[/* initialState */10],
            component$3[/* retainedProps */11],
            component$3[/* reducer */12],
            component$3[/* jsElementWrapped */13]
          ]);
}

var Labeled = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$3,
    make$3
  ]);

var component$4 = ReasonReact.statelessComponent("EmacsInteractionMeta");

function make$4(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$4[/* debugName */0],
            component$4[/* reactClassInternal */1],
            component$4[/* handedOffState */2],
            component$4[/* willReceiveProps */3],
            component$4[/* didMount */4],
            component$4[/* didUpdate */5],
            component$4[/* willUnmount */6],
            component$4[/* willUpdate */7],
            component$4[/* shouldUpdate */8],
            (function () {
                return ReasonReact.element(undefined, undefined, make$2(value[0], /* array */[]));
              }),
            component$4[/* initialState */10],
            component$4[/* retainedProps */11],
            component$4[/* reducer */12],
            component$4[/* jsElementWrapped */13]
          ]);
}

var Output = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$4,
    make$4
  ]);

var component$5 = ReasonReact.statelessComponent("EmacsRawError");

function make$5(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component$5[/* debugName */0],
            component$5[/* reactClassInternal */1],
            component$5[/* handedOffState */2],
            component$5[/* willReceiveProps */3],
            component$5[/* didMount */4],
            component$5[/* didUpdate */5],
            component$5[/* willUnmount */6],
            component$5[/* willUpdate */7],
            component$5[/* shouldUpdate */8],
            (function () {
                var match = value.length === 0;
                if (match) {
                  return null;
                } else {
                  return React.createElement("p", {
                              className: "error"
                            }, $$String.concat("\n", $$Array.to_list(value)));
                }
              }),
            component$5[/* initialState */10],
            component$5[/* retainedProps */11],
            component$5[/* reducer */12],
            component$5[/* jsElementWrapped */13]
          ]);
}

var RawError = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component$5,
    make$5
  ]);

exports.Term = Term;
exports.Expr = Expr;
exports.OutputConstraint = OutputConstraint;
exports.Labeled = Labeled;
exports.Output = Output;
exports.RawError = RawError;
/* component Not a pure module */
