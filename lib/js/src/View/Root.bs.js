// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactUpdate = require("reason-react-update/lib/js/src/ReactUpdate.bs.js");
var Tab$AgdaMode = require("./Tab.bs.js");
var Hook$AgdaMode = require("./Hook.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Async$AgdaMode = require("../Util/Async.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Panel$AgdaMode = require("./Panel/Panel.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Settings$AgdaMode = require("./Settings/Settings.bs.js");
var Type__View$AgdaMode = require("../Type/Type__View.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

function getBottomPanelContainer(param) {
  var partial_arg = Rebase.$$Array[/* filterMap */23];
  var containers = Rebase.$$Array[/* filter */10]((function (elem) {
          return elem.className === "agda-mode-panel-container";
        }), Rebase.$$Array[/* flatMap */5](Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], (function (prim) {
                      return prim.childNodes;
                    }), (function (prim) {
                      return Array.prototype.slice.call(prim);
                    })), (function (param) {
                  return partial_arg(Webapi__Dom__HtmlElement.ofNode, param);
                })), Rebase.$$Array[/* map */0]((function (prim) {
                  return atom.views.getView(prim);
                }), atom.workspace.getBottomPanels())));
  var match = Rebase.$$Array[/* get */17](containers, 0);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    var panelContainer = document.createElement("article");
    panelContainer.classList.add("agda-mode-panel-container");
    atom.workspace.addBottomPanel({
          item: panelContainer,
          priority: 0,
          visible: true
        });
    return panelContainer;
  }
}

function getPanelContainerFromState(state) {
  var match = state[/* mountAt */0];
  if (match.tag) {
    return match[0][/* element */0];
  } else {
    return match[0];
  }
}

var initialState_000 = /* mountAt : Bottom */Caml_chrome_debugger.variant("Bottom", 0, [getBottomPanelContainer(/* () */0)]);

var initialState = /* record */Caml_chrome_debugger.record([
    "mountAt",
    "isActive",
    "settingsView"
  ], [
    initialState_000,
    false,
    undefined
  ]);

function mountPanel(editors, mountTo, self) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                  return "[Agda Mode] " + editors[/* source */1].getTitle();
                }), "panel", (function (param, param$1, previousItem) {
                  return Rebase.$$Option[/* forEach */8]((function (pane) {
                                pane.activate();
                                pane.activateItem(previousItem);
                                return /* () */0;
                              }), atom.workspace.paneForItem(previousItem));
                }), undefined, (function (param) {
                  return Curry._1(self[/* send */0], /* MountTo */Caml_chrome_debugger.variant("MountTo", 3, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */0];
  if (match.tag) {
    if (!mountTo) {
      Curry._1(match[0][/* kill */1], /* () */0);
      Curry._1(self[/* send */0], /* UpdateMountAt */Caml_chrome_debugger.variant("UpdateMountAt", 2, [/* Bottom */Caml_chrome_debugger.variant("Bottom", 0, [getBottomPanelContainer(/* () */0)])]));
    }
    
  } else if (mountTo) {
    Curry._1(self[/* send */0], /* UpdateMountAt */Caml_chrome_debugger.variant("UpdateMountAt", 2, [/* Pane */Caml_chrome_debugger.variant("Pane", 1, [createTab(/* () */0)])]));
  }
  return undefined;
}

function mountSettings(editors, handles, open_, self) {
  var match = self[/* state */1][/* settingsView */2];
  if (match !== undefined) {
    if (open_) {
      Event$AgdaMode.emitOk(true, handles[/* onSettingsView */11]);
    } else {
      Curry._1(match[/* kill */1], /* () */0);
      Curry._1(self[/* send */0], /* UpdateSettingsView */Caml_chrome_debugger.variant("UpdateSettingsView", 1, [undefined]));
      Event$AgdaMode.emitOk(false, handles[/* onSettingsView */11]);
    }
    return undefined;
  } else {
    if (open_) {
      var tab = Tab$AgdaMode.make(editors[/* source */1], (function (param) {
              return "[Settings] " + editors[/* source */1].getTitle();
            }), "settings", (function (param, param$1, param$2) {
              return Event$AgdaMode.emitOk(true, handles[/* onSettingsView */11]);
            }), undefined, (function (param) {
              Curry._1(self[/* send */0], /* ToggleSettingsTab */Caml_chrome_debugger.variant("ToggleSettingsTab", 0, [false]));
              return Event$AgdaMode.emitOk(false, handles[/* onSettingsView */11]);
            }), undefined, /* () */0);
      Curry._1(self[/* send */0], /* UpdateSettingsView */Caml_chrome_debugger.variant("UpdateSettingsView", 1, [tab]));
    }
    return undefined;
  }
}

function reducer(editors, handles, action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          var match = state[/* mountAt */0];
          if (match.tag) {
            return /* SideEffects */Caml_chrome_debugger.variant("SideEffects", 2, [(function (param) {
                          Curry._1(param[/* send */0], /* MountTo */Caml_chrome_debugger.variant("MountTo", 3, [/* ToBottom */0]));
                          return undefined;
                        })]);
          } else {
            return /* SideEffects */Caml_chrome_debugger.variant("SideEffects", 2, [(function (param) {
                          Curry._1(param[/* send */0], /* MountTo */Caml_chrome_debugger.variant("MountTo", 3, [/* ToPane */1]));
                          return undefined;
                        })]);
          }
      case 1 : 
          var match$1 = state[/* mountAt */0];
          if (match$1.tag) {
            var tab = match$1[0];
            return /* UpdateWithSideEffects */Caml_chrome_debugger.variant("UpdateWithSideEffects", 1, [
                      /* record */Caml_chrome_debugger.record([
                          "mountAt",
                          "isActive",
                          "settingsView"
                        ], [
                          state[/* mountAt */0],
                          true,
                          state[/* settingsView */2]
                        ]),
                      (function (param) {
                          Curry._1(tab[/* activate */2], /* () */0);
                          return undefined;
                        })
                    ]);
          } else {
            return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                          "mountAt",
                          "isActive",
                          "settingsView"
                        ], [
                          state[/* mountAt */0],
                          true,
                          state[/* settingsView */2]
                        ])]);
          }
      case 2 : 
          return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                        "mountAt",
                        "isActive",
                        "settingsView"
                      ], [
                        state[/* mountAt */0],
                        false,
                        state[/* settingsView */2]
                      ])]);
      
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var open_ = action[0];
          return /* SideEffects */Caml_chrome_debugger.variant("SideEffects", 2, [(function (param) {
                        return mountSettings(editors, handles, open_, param);
                      })]);
      case 1 : 
          return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                        "mountAt",
                        "isActive",
                        "settingsView"
                      ], [
                        state[/* mountAt */0],
                        state[/* isActive */1],
                        action[0]
                      ])]);
      case 2 : 
          return /* Update */Caml_chrome_debugger.variant("Update", 0, [/* record */Caml_chrome_debugger.record([
                        "mountAt",
                        "isActive",
                        "settingsView"
                      ], [
                        action[0],
                        state[/* isActive */1],
                        state[/* settingsView */2]
                      ])]);
      case 3 : 
          var mountTo = action[0];
          return /* SideEffects */Caml_chrome_debugger.variant("SideEffects", 2, [(function (param) {
                        return mountPanel(editors, mountTo, param);
                      })]);
      
    }
  }
}

function Root(Props) {
  var editors = Props.editors;
  var handles = Props.handles;
  var match = ReactUpdate.useReducer(initialState, (function (param, param$1) {
          return reducer(editors, handles, param, param$1);
        }));
  var send = match[1];
  var state = match[0];
  var queryRef = React.useRef(undefined);
  var match$1 = React.useReducer(Type__View$AgdaMode.Debug[/* reducer */0], Type__View$AgdaMode.Debug[/* initialState */1]);
  var match$2 = Hook$AgdaMode.useState(/* record */Caml_chrome_debugger.record([
          "text",
          "style"
        ], [
          "",
          0
        ]));
  var setHeader = match$2[1];
  var match$3 = Hook$AgdaMode.useState(/* Nothing */0);
  var setBody = match$3[1];
  var match$4 = Hook$AgdaMode.useState(/* Display */0);
  var setMode = match$4[1];
  var match$5 = Hook$AgdaMode.useState(false);
  var match$6 = Hook$AgdaMode.useState(false);
  var match$7 = Hook$AgdaMode.useState(/* tuple */[
        undefined,
        undefined
      ]);
  var match$8 = match$7[0];
  var panelRef = React.useRef(null);
  var stateRef = React.useRef(state);
  stateRef.current = state;
  React.useEffect((function () {
          editors[/* query */2] = queryRef.current;
          return undefined;
        }), /* array */[state[/* mountAt */0]]);
  var onPanelActivated = Event$AgdaMode.make(/* () */0);
  var onPanelDeactivated = Event$AgdaMode.make(/* () */0);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(send, /* Activate */1);
          var state = stateRef.current;
          if (state[/* isActive */1]) {
            return Async$AgdaMode.resolve(getPanelContainerFromState(state));
          } else {
            return Event$AgdaMode.once(onPanelActivated);
          }
        }), handles[/* activatePanel */0]);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(send, /* Deactivate */2);
          var state = stateRef.current;
          if (state[/* isActive */1]) {
            return Event$AgdaMode.once(onPanelDeactivated);
          } else {
            return Async$AgdaMode.resolve(/* () */0);
          }
        }), handles[/* deactivatePanel */1]);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(send, /* ToggleDocking */0);
          return Async$AgdaMode.resolve(/* () */0);
        }), handles[/* toggleDocking */2]);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(setMode, /* Display */0);
          Curry._1(setHeader, param[0]);
          Curry._1(setBody, param[1]);
          return Async$AgdaMode.resolve(/* () */0);
        }), handles[/* display */3]);
  var onInquireQuery = Event$AgdaMode.make(/* () */0);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(send, /* Activate */1);
          Curry._1(setMode, /* Inquire */1);
          Editors$AgdaMode.Focus[/* on */1](/* Query */1, editors);
          Curry._1(setHeader, param[0]);
          return Async$AgdaMode.pass((function (param) {
                          Curry._1(setMode, /* Display */0);
                          return Editors$AgdaMode.Focus[/* on */1](/* Source */0, editors);
                        }))(Event$AgdaMode.once(onInquireQuery));
        }), handles[/* inquire */4]);
  Hook$AgdaMode.useChannel(Curry._2(Rebase.Fn[/* >> */6], match$6[1], Async$AgdaMode.resolve), handles[/* updateIsPending */5]);
  Hook$AgdaMode.useChannel(Curry._2(Rebase.Fn[/* >> */6], match$5[1], Async$AgdaMode.resolve), handles[/* updateShouldDisplay */6]);
  Hook$AgdaMode.useDidUpdateEffect2((function (param) {
          if (state[/* isActive */1]) {
            Event$AgdaMode.emitOk(getPanelContainerFromState(state), onPanelActivated);
          } else {
            Event$AgdaMode.emitOk(/* () */0, onPanelDeactivated);
          }
          return undefined;
        }), /* tuple */[
        state[/* mountAt */0],
        state[/* isActive */1]
      ]);
  Hook$AgdaMode.useChannel((function (param) {
          var state = stateRef.current;
          var match = state[/* mountAt */0];
          if (match.tag) {
            Curry._1(match[0][/* kill */1], /* () */0);
          } else {
            var panel = panelRef.current;
            if (!(panel == null)) {
              match[0].removeChild(panel);
            }
            
          }
          return Async$AgdaMode.resolve(/* () */0);
        }), handles[/* destroy */13]);
  Hook$AgdaMode.useEventListener((function (activate) {
          return Curry._1(send, /* ToggleSettingsTab */Caml_chrome_debugger.variant("ToggleSettingsTab", 0, [activate]));
        }), handles[/* activateSettingsView */10]);
  Hook$AgdaMode.useEventListener(match$7[1], handles[/* updateConnection */7]);
  var settingsView = state[/* settingsView */2];
  var isActive = state[/* isActive */1];
  var mountAt = state[/* mountAt */0];
  var containerElement = getPanelContainerFromState(state);
  var settingsElement = settingsView !== undefined ? Caml_option.some(settingsView[/* element */0]) : undefined;
  var hidden;
  hidden = mountAt.tag ? false : !(isActive && match$5[0]);
  return React.createElement(React.Fragment, undefined, React.createElement(Type__View$AgdaMode.Mouse[/* Provider */1][/* make */0], {
                  value: (function ($$event) {
                      return Event$AgdaMode.emitOk($$event, handles[/* onMouseEvent */17]);
                    }),
                  children: React.createElement(Type__View$AgdaMode.Debug[/* Provider */3][/* make */0], {
                        value: match$1[1],
                        children: null
                      }, React.createElement(Panel$AgdaMode.make, {
                            editors: editors,
                            containerElement: containerElement,
                            onMountAtChange: (function (mountTo) {
                                return Curry._1(send, /* MountTo */Caml_chrome_debugger.variant("MountTo", 3, [mountTo]));
                              }),
                            body: match$3[0],
                            header: match$2[0],
                            mountAt: mountAt,
                            mode: match$4[0],
                            hidden: hidden,
                            settingsView: settingsView,
                            isPending: match$6[0],
                            isActive: isActive,
                            panelRef: panelRef,
                            onInquireQuery: onInquireQuery,
                            onQueryEditorRef: (function (ref) {
                                queryRef.current = Caml_option.some(ref);
                                return /* () */0;
                              }),
                            editorPlaceholder: "",
                            editorValue: "",
                            interceptAndInsertKey: handles[/* interceptAndInsertKey */15],
                            activateInputMethod: handles[/* activateInputMethod */14],
                            onInputMethodActivationChange: handles[/* onInputMethodActivationChange */16],
                            onSettingsViewToggle: (function (status) {
                                return Curry._1(send, /* ToggleSettingsTab */Caml_chrome_debugger.variant("ToggleSettingsTab", 0, [status]));
                              })
                          }), React.createElement(Settings$AgdaMode.make, {
                            inquireConnection: handles[/* inquireConnection */8],
                            onInquireConnection: handles[/* onInquireConnection */9],
                            connection: match$8[0],
                            connectionError: match$8[1],
                            navigate: handles[/* navigateSettingsView */12],
                            debug: match$1[0],
                            element: settingsElement
                          }))
                }));
}

function initialize(editors) {
  var element = document.createElement("article");
  var handles = View$AgdaMode.makeHandles(/* () */0);
  var view = View$AgdaMode.make(handles);
  var component = React.createElement(Root, {
        editors: editors,
        handles: handles
      });
  ReactDom.render(component, element);
  return view;
}

var $$Event = 0;

var make = Root;

exports.$$Event = $$Event;
exports.getBottomPanelContainer = getBottomPanelContainer;
exports.getPanelContainerFromState = getPanelContainerFromState;
exports.initialState = initialState;
exports.mountPanel = mountPanel;
exports.mountSettings = mountSettings;
exports.reducer = reducer;
exports.make = make;
exports.initialize = initialize;
/* initialState Not a pure module */
