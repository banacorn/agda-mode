// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Semver = require("semver");
var Goal$AgdaMode = require("./Goal.bs.js");

function parse(param) {
  switch (param) {
    case "abort" : 
        return /* Abort */3;
    case "auto" : 
        return /* Auto */15;
    case "case" : 
        return /* Case */16;
    case "compile" : 
        return /* Compile */4;
    case "compute-normal-form[DefaultCompute]" : 
        return /* ComputeNormalForm */Block.variant("ComputeNormalForm", 3, [/* Simplified */0]);
    case "compute-normal-form[IgnoreAbstract]" : 
        return /* ComputeNormalForm */Block.variant("ComputeNormalForm", 3, [/* Instantiated */1]);
    case "compute-normal-form[UseShowInstance]" : 
        return /* ComputeNormalForm */Block.variant("ComputeNormalForm", 3, [/* Normalised */2]);
    case "context[Instantiated]" : 
        return /* Context */Block.variant("Context", 5, [/* Instantiated */1]);
    case "context[Normalised]" : 
        return /* Context */Block.variant("Context", 5, [/* Normalised */2]);
    case "context[Simplified]" : 
        return /* Context */Block.variant("Context", 5, [/* Simplified */0]);
    case "give" : 
        return /* Give */13;
    case "go-to-definition" : 
        return /* GotoDefinition */18;
    case "goal-type-and-context[Instantiated]" : 
        return /* GoalTypeAndContext */Block.variant("GoalTypeAndContext", 6, [/* Instantiated */1]);
    case "goal-type-and-context[Normalised]" : 
        return /* GoalTypeAndContext */Block.variant("GoalTypeAndContext", 6, [/* Normalised */2]);
    case "goal-type-and-context[Simplified]" : 
        return /* GoalTypeAndContext */Block.variant("GoalTypeAndContext", 6, [/* Simplified */0]);
    case "goal-type-and-inferred-type[Instantiated]" : 
        return /* GoalTypeAndInferredType */Block.variant("GoalTypeAndInferredType", 7, [/* Instantiated */1]);
    case "goal-type-and-inferred-type[Normalised]" : 
        return /* GoalTypeAndInferredType */Block.variant("GoalTypeAndInferredType", 7, [/* Normalised */2]);
    case "goal-type-and-inferred-type[Simplified]" : 
        return /* GoalTypeAndInferredType */Block.variant("GoalTypeAndInferredType", 7, [/* Simplified */0]);
    case "goal-type[Instantiated]" : 
        return /* GoalType */Block.variant("GoalType", 4, [/* Instantiated */1]);
    case "goal-type[Normalised]" : 
        return /* GoalType */Block.variant("GoalType", 4, [/* Normalised */2]);
    case "goal-type[Simplified]" : 
        return /* GoalType */Block.variant("GoalType", 4, [/* Simplified */0]);
    case "infer-type[Instantiated]" : 
        return /* InferType */Block.variant("InferType", 1, [/* Instantiated */1]);
    case "infer-type[Normalised]" : 
        return /* InferType */Block.variant("InferType", 1, [/* Normalised */2]);
    case "infer-type[Simplified]" : 
        return /* InferType */Block.variant("InferType", 1, [/* Simplified */0]);
    case "input-symbol" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* Ordinary */0]);
    case "input-symbol-back-quote" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* BackQuote */6]);
    case "input-symbol-bracket" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* Bracket */2]);
    case "input-symbol-curly-bracket" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* CurlyBracket */1]);
    case "input-symbol-double-quote" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* DoubleQuote */4]);
    case "input-symbol-parenthesis" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* Parenthesis */3]);
    case "input-symbol-single-quote" : 
        return /* InputSymbol */Block.variant("InputSymbol", 8, [/* SingleQuote */5]);
    case "load" : 
        return /* Load */0;
    case "module-contents[Instantiated]" : 
        return /* ModuleContents */Block.variant("ModuleContents", 2, [/* Instantiated */1]);
    case "module-contents[Normalised]" : 
        return /* ModuleContents */Block.variant("ModuleContents", 2, [/* Normalised */2]);
    case "module-contents[Simplified]" : 
        return /* ModuleContents */Block.variant("ModuleContents", 2, [/* Simplified */0]);
    case "next-goal" : 
        return /* NextGoal */9;
    case "previous-goal" : 
        return /* PreviousGoal */10;
    case "query-symbol" : 
        return /* QuerySymbol */17;
    case "quit" : 
        return /* Quit */1;
    case "refine" : 
        return /* Refine */14;
    case "restart" : 
        return /* Restart */2;
    case "search-about[Instantiated]" : 
        return /* SearchAbout */Block.variant("SearchAbout", 0, [/* Instantiated */1]);
    case "search-about[Normalised]" : 
        return /* SearchAbout */Block.variant("SearchAbout", 0, [/* Normalised */2]);
    case "search-about[Simplified]" : 
        return /* SearchAbout */Block.variant("SearchAbout", 0, [/* Simplified */0]);
    case "show-constraints" : 
        return /* ShowConstraints */7;
    case "show-goals" : 
        return /* ShowGoals */8;
    case "solve-constraints" : 
        return /* SolveConstraints */6;
    case "toggle-display-of-implicit-arguments" : 
        return /* ToggleDisplayOfImplicitArguments */5;
    case "toggle-docking" : 
        return /* ToggleDocking */11;
    case "why-in-scope" : 
        return /* WhyInScope */12;
    default:
      return /* Load */0;
  }
}

function triggersConnection(param) {
  if (typeof param === "number") {
    return param > 17 || param < 1;
  } else {
    return false;
  }
}

function needsConnection(param) {
  if (typeof param === "number") {
    switch (param) {
      case 1 : 
      case 11 : 
      case 17 : 
          return false;
      default:
        return true;
    }
  } else if (param.tag === 8) {
    return false;
  } else {
    return true;
  }
}

var Primitive = /* module */Block.localModule([
    "parse",
    "triggersConnection",
    "needsConnection"
  ], [
    parse,
    triggersConnection,
    needsConnection
  ]);

function serialize(self) {
  var command = self[/* command */2];
  var filepath = self[/* filepath */1];
  var connection = self[/* connection */0];
  var match = atom.config.get("agda-mode.highlightingMethod");
  var highlightingMethod = match === "Direct" ? "Direct" : "Indirect";
  var commonPart = function (param) {
    if (param) {
      return "IOTCM \"" + (String(filepath) + ("\" NonInteractive " + (String(highlightingMethod) + " ")));
    } else {
      return "IOTCM \"" + (String(filepath) + ("\" None " + (String(highlightingMethod) + " ")));
    }
  };
  var buildRange = function (goal) {
    if (Semver.gte(connection[/* metadata */0][/* version */1], "2.5.1")) {
      return Goal$AgdaMode.buildHaskellRange(false, filepath, goal);
    } else {
      return Goal$AgdaMode.buildHaskellRange(true, filepath, goal);
    }
  };
  if (typeof command === "number") {
    return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + "\" [])"));
  } else {
    switch (command.tag | 0) {
      case 0 : 
          var index = command[1];
          var goal = command[0];
          var content = Goal$AgdaMode.getContent(goal);
          var range = buildRange(goal);
          if (Semver.gte(connection[/* metadata */0][/* version */1], "2.5.3")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give WithoutForce " + (String(index) + (" " + (String(range) + (" \"" + (String(content) + "\")"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give " + (String(index) + (" " + (String(range) + (" \"" + (String(content) + "\")"))))));
          }
      case 1 : 
          var goal$1 = command[0];
          var content$1 = Goal$AgdaMode.getContent(goal$1);
          var range$1 = buildRange(goal$1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_refine_or_intro False " + (String(command[1]) + (" " + (String(range$1) + (" \"" + (String(content$1) + "\")"))))));
      case 2 : 
          var goal$2 = command[0];
          var content$2 = Goal$AgdaMode.getContent(goal$2);
          var range$2 = buildRange(goal$2);
          return commonPart(/* NonInteractive */1) + ("( Cmd_auto " + (String(command[1]) + (" " + (String(range$2) + (" \"" + (String(content$2) + "\")"))))));
      
    }
  }
}

var Cultivated = /* module */Block.localModule(["serialize"], [serialize]);

var names = /* array */[
  "load",
  "quit",
  "restart",
  "abort",
  "compile",
  "toggle-display-of-implicit-arguments",
  "solve-constraints",
  "show-constraints",
  "show-goals",
  "next-goal",
  "previous-goal",
  "toggle-docking",
  "why-in-scope",
  "search-about[Simplified]",
  "search-about[Instantiated]",
  "search-about[Normalised]",
  "infer-type[Simplified]",
  "infer-type[Instantiated]",
  "infer-type[Normalised]",
  "module-contents[Simplified]",
  "module-contents[Instantiated]",
  "module-contents[Normalised]",
  "compute-normal-form[DefaultCompute]",
  "compute-normal-form[IgnoreAbstract]",
  "compute-normal-form[UseShowInstance]",
  "give",
  "refine",
  "auto",
  "case",
  "goal-type[Simplified]",
  "goal-type[Instantiated]",
  "goal-type[Normalised]",
  "context[Simplified]",
  "context[Instantiated]",
  "context[Normalised]",
  "goal-type-and-context[Simplified]",
  "goal-type-and-context[Instantiated]",
  "goal-type-and-context[Normalised]",
  "goal-type-and-inferred-type[Simplified]",
  "goal-type-and-inferred-type[Instantiated]",
  "goal-type-and-inferred-type[Normalised]",
  "input-symbol",
  "input-symbol-curly-bracket",
  "input-symbol-bracket",
  "input-symbol-parenthesis",
  "input-symbol-double-quote",
  "input-symbol-single-quote",
  "input-symbol-back-quote",
  "query-symbol",
  "go-to-definition"
];

exports.Primitive = Primitive;
exports.Cultivated = Cultivated;
exports.names = names;
/* semver Not a pure module */
