// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaMode = require("../Util.bs.js");

function createItemDescriptor(editor) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  var uri = "agda-mode://" + editor.getPath();
  var title = "[Agda Mode] " + editor.getTitle();
  return {
          element: element,
          getURI: (function (param) {
              return uri;
            }),
          getTitle: (function (param) {
              return title;
            }),
          getDefaultLocation: (function (param) {
              return "right";
            })
        };
}

function trigger(callback) {
  if (callback !== undefined) {
    return Curry._1(callback, /* () */0);
  } else {
    return /* () */0;
  }
}

function triggerArg(callback, arg) {
  if (callback !== undefined) {
    return Curry._1(callback, arg);
  } else {
    return /* () */0;
  }
}

function make(editor, onOpen, onKill, onClose, onDidChangeActive, param) {
  var itemResource = Util$AgdaMode.Resource[/* make */0](/* () */0);
  var closedDeliberately = /* record */Block.record(["contents"], [false]);
  var subscriptions = new Atom.CompositeDisposable();
  var itemDescriptor = createItemDescriptor(editor);
  atom.workspace.open(itemDescriptor).then((function (newItem) {
          Curry._1(itemResource[/* supply */1], newItem);
          var pane = atom.workspace.paneForItem(newItem);
          if (onOpen !== undefined) {
            Curry._2(onOpen, itemDescriptor.element, newItem);
          }
          subscriptions.add(pane.onWillDestroyItem((function ($$event) {
                      var destroyedTitle = $$event.item.getTitle();
                      var getTitle = itemDescriptor.getTitle;
                      if (destroyedTitle === Curry._1(getTitle, /* () */0)) {
                        if (closedDeliberately[0]) {
                          trigger(onKill);
                        } else {
                          trigger(onClose);
                        }
                        subscriptions.dispose();
                        return /* () */0;
                      } else {
                        return 0;
                      }
                    })));
          subscriptions.add(pane.onDidChangeActiveItem((function (item) {
                      var activatedTitle = item.getTitle();
                      var getTitle = itemDescriptor.getTitle;
                      if (activatedTitle === Curry._1(getTitle, /* () */0)) {
                        return triggerArg(onDidChangeActive, true);
                      } else {
                        return triggerArg(onDidChangeActive, false);
                      }
                    })));
          return Promise.resolve(atom.workspace.getActivePane());
        }));
  return /* record */Block.record([
            "element",
            "kill",
            "activate"
          ], [
            itemDescriptor.element,
            (function (param) {
                Curry._1(itemResource[/* acquire */0], /* () */0).then((function (item) {
                        closedDeliberately[0] = true;
                        return Promise.resolve((function (eta) {
                                        return eta.destroyItem(item, undefined);
                                      })(atom.workspace.paneForItem(item)));
                      }));
                return /* () */0;
              }),
            (function (param) {
                Curry._1(itemResource[/* acquire */0], /* () */0).then((function (item) {
                        return Promise.resolve((function (eta) {
                                        var param = undefined;
                                        var param$1 = eta;
                                        param$1.activateItem(item, param !== undefined ? Caml_option.valFromOption(param) : undefined);
                                        return /* () */0;
                                      })(atom.workspace.paneForItem(item)));
                      }));
                return /* () */0;
              })
          ]);
}

exports.createItemDescriptor = createItemDescriptor;
exports.trigger = trigger;
exports.triggerArg = triggerArg;
exports.make = make;
/* atom Not a pure module */
