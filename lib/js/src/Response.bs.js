// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Util$AgdaMode = require("./Util/Util.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Highlighting$AgdaMode = require("./Highlighting.bs.js");
var Emacs__AllGoalsWarnings$AgdaMode = require("./View/Emacs/Emacs__AllGoalsWarnings.bs.js");

function toString(warnings) {
  if (typeof warnings === "number") {
    return "CompilationOk";
  }
  switch (warnings.tag | 0) {
    case /* Constraints */0 :
        var string = warnings[0];
        if (string !== undefined) {
          return "Constraints " + string;
        } else {
          return "Constraints";
        }
    case /* AllGoalsWarnings */1 :
        return "AllGoalsWarnings " + Emacs__AllGoalsWarnings$AgdaMode.toString(warnings[0]);
    case /* Time */2 :
        return "Time " + warnings[0];
    case /* Error */3 :
        return "Error " + warnings[0];
    case /* Intro */4 :
        return "Intro " + warnings[0];
    case /* Auto */5 :
        return "Auto " + warnings[0];
    case /* ModuleContents */6 :
        return "ModuleContents " + warnings[0];
    case /* SearchAbout */7 :
        return "SearchAbout " + warnings[0];
    case /* WhyInScope */8 :
        return "WhyInScope " + warnings[0];
    case /* NormalForm */9 :
        return "NormalForm " + warnings[0];
    case /* GoalType */10 :
        return "GoalType " + warnings[0];
    case /* CurrentGoal */11 :
        return "CurrentGoal " + warnings[0];
    case /* InferredType */12 :
        return "InferredType " + warnings[0];
    case /* Context */13 :
        return "Context " + warnings[0];
    case /* HelperFunction */14 :
        return "HelperFunction " + warnings[0];
    case /* Version */15 :
        return "Version " + warnings[0];
    
  }
}

function parse(xs) {
  var match = Belt_Array.get(xs, 1);
  if (match === undefined) {
    return ;
  }
  if (match.tag) {
    return ;
  }
  var payload = match[0].replace(/\\r\\n|\\n/g, "\n");
  var match$1 = Belt_Array.get(xs, 0);
  if (match$1 === undefined) {
    return ;
  }
  if (match$1.tag) {
    return ;
  }
  var title = match$1[0];
  switch (title) {
    case "*Agda Version*" :
        return /* Version */Caml_chrome_debugger.variant("Version", 15, [payload]);
    case "*Auto*" :
        return /* Auto */Caml_chrome_debugger.variant("Auto", 5, [payload]);
    case "*Compilation result*" :
        return /* CompilationOk */0;
    case "*Constraints*" :
        if (payload === "nil") {
          return /* Constraints */Caml_chrome_debugger.variant("Constraints", 0, [undefined]);
        } else {
          return /* Constraints */Caml_chrome_debugger.variant("Constraints", 0, [payload]);
        }
    case "*Context*" :
        return /* Context */Caml_chrome_debugger.variant("Context", 13, [payload]);
    case "*Current Goal*" :
        return /* CurrentGoal */Caml_chrome_debugger.variant("CurrentGoal", 11, [payload]);
    case "*Error*" :
        return /* Error */Caml_chrome_debugger.variant("Error", 3, [payload]);
    case "*Goal type etc.*" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 10, [payload]);
    case "*Helper function*" :
        return /* HelperFunction */Caml_chrome_debugger.variant("HelperFunction", 14, [payload]);
    case "*Inferred Type*" :
        return /* InferredType */Caml_chrome_debugger.variant("InferredType", 12, [payload]);
    case "*Intro*" :
        return /* Intro */Caml_chrome_debugger.variant("Intro", 4, [payload]);
    case "*Module contents*" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 6, [payload]);
    case "*Normal Form*" :
        return /* NormalForm */Caml_chrome_debugger.variant("NormalForm", 9, [payload]);
    case "*Scope Info*" :
        return /* WhyInScope */Caml_chrome_debugger.variant("WhyInScope", 8, [payload]);
    case "*Search About*" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 7, [payload]);
    case "*Time*" :
        return /* Time */Caml_chrome_debugger.variant("Time", 2, [payload]);
    default:
      return /* AllGoalsWarnings */Caml_chrome_debugger.variant("AllGoalsWarnings", 1, [Emacs__AllGoalsWarnings$AgdaMode.parse(title, payload)]);
  }
}

var Info = {
  toString: toString,
  parse: parse
};

function toString$1(filepath) {
  if (typeof filepath === "number") {
    switch (filepath) {
      case /* NoStatus */0 :
          return "NoStatus";
      case /* ClearRunningInfo */1 :
          return "ClearRunningInfo";
      case /* ClearHighlighting */2 :
          return "ClearHighlighting";
      case /* DoneAborting */3 :
          return "DoneAborting";
      
    }
  } else {
    switch (filepath.tag | 0) {
      case /* HighlightingInfoDirect */0 :
          if (filepath[0]) {
            return "HighlightingInfoDirect Keep " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath[1], Highlighting$AgdaMode.Annotation.toString));
          } else {
            return "HighlightingInfoDirect Remove " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath[1], Highlighting$AgdaMode.Annotation.toString));
          }
      case /* HighlightingInfoIndirect */1 :
          return "HighlightingInfoIndirect " + filepath[0];
      case /* Status */2 :
          return "Status: implicit arguments " + ((
                    filepath[0] ? "displayed, " : "not displayed, "
                  ) + ("module " + (
                      filepath[1] ? "type checked" : "not type checked"
                    )));
      case /* JumpToError */3 :
          return "JumpToError " + (filepath[0] + (" " + String(filepath[1])));
      case /* InteractionPoints */4 :
          return "InteractionPoints " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath[0], (function (prim) {
                            return String(prim);
                          })));
      case /* GiveAction */5 :
          var string = filepath[1];
          var index = filepath[0];
          if (typeof string === "number") {
            if (string !== 0) {
              return "GiveAction " + (String(index) + " NoParen");
            } else {
              return "GiveAction " + (String(index) + " Paren");
            }
          } else {
            return "GiveAction " + (String(index) + (" String " + string[0]));
          }
      case /* MakeCase */6 :
          if (filepath[0]) {
            return "MakeCase ExtendedLambda " + Util$AgdaMode.Pretty.array(filepath[1]);
          } else {
            return "MakeCase Function " + Util$AgdaMode.Pretty.array(filepath[1]);
          }
      case /* SolveAll */7 :
          return "SolveAll " + Util$AgdaMode.Pretty.array(Belt_Array.map(filepath[0], (function (param) {
                            return String(param[0]) + (" " + param[1]);
                          })));
      case /* DisplayInfo */8 :
          return "DisplayInfo " + toString(filepath[0]);
      case /* RunningInfo */9 :
          return "RunningInfo " + (String(filepath[0]) + (" " + filepath[1]));
      
    }
  }
}

function parseWithPriority(_priority, tokens) {
  if (!tokens.tag) {
    return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                  0,
                  tokens
                ])]);
  }
  var xs = tokens[0];
  var match = Belt_Array.get(xs, 0);
  var exit = 0;
  if (match === undefined) {
    return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                  14,
                  tokens
                ])]);
  }
  if (match.tag) {
    return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                  14,
                  tokens
                ])]);
  }
  switch (match[0]) {
    case "agda2-abort-done" :
        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* DoneAborting */3]);
    case "agda2-give-action" :
        var match$1 = Belt_Array.get(xs, 1);
        if (match$1 !== undefined && !match$1.tag) {
          return Belt_Option.mapWithDefault(Belt_Option.flatMap(Parser$AgdaMode.$$int(match$1[0]), (function (i) {
                            var match = Belt_Array.get(xs, 2);
                            if (match === undefined) {
                              return ;
                            }
                            if (match.tag) {
                              return ;
                            }
                            var result = match[0];
                            switch (result) {
                              case "no-paren" :
                                  return /* GiveAction */Caml_chrome_debugger.variant("GiveAction", 5, [
                                            i,
                                            /* NoParen */1
                                          ]);
                              case "paren" :
                                  return /* GiveAction */Caml_chrome_debugger.variant("GiveAction", 5, [
                                            i,
                                            /* Paren */0
                                          ]);
                              default:
                                return /* GiveAction */Caml_chrome_debugger.variant("GiveAction", 5, [
                                          i,
                                          /* String */Caml_chrome_debugger.simpleVariant("String", [result])
                                        ]);
                            }
                          })), /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                            6,
                            tokens
                          ])]), (function (x) {
                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
                      }));
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        7,
                        tokens
                      ])]);
        }
    case "agda2-goals-action" :
        var xs$1 = Belt_Array.get(xs, 1);
        if (xs$1 !== undefined) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* InteractionPoints */Caml_chrome_debugger.variant("InteractionPoints", 4, [Belt_Array.keepMap(Parser$AgdaMode.SExpression.flatten(xs$1), Parser$AgdaMode.$$int)])]);
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        5,
                        tokens
                      ])]);
        }
    case "agda2-highlight-add-annotations" :
        var annotations = Highlighting$AgdaMode.Annotation.parseDirectHighlightings(xs);
        var match$2 = Belt_Array.get(xs, 1);
        if (match$2 === undefined) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* HighlightingInfoDirect */Caml_chrome_debugger.variant("HighlightingInfoDirect", 0, [
                        /* Keep */1,
                        []
                      ])]);
        }
        if (match$2.tag) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* HighlightingInfoDirect */Caml_chrome_debugger.variant("HighlightingInfoDirect", 0, [
                        /* Keep */1,
                        []
                      ])]);
        }
        switch (match$2[0]) {
          case "nil" :
              return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* HighlightingInfoDirect */Caml_chrome_debugger.variant("HighlightingInfoDirect", 0, [
                            /* Keep */1,
                            annotations
                          ])]);
          case "remove" :
              return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* HighlightingInfoDirect */Caml_chrome_debugger.variant("HighlightingInfoDirect", 0, [
                            /* Remove */0,
                            annotations
                          ])]);
          default:
            return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* HighlightingInfoDirect */Caml_chrome_debugger.variant("HighlightingInfoDirect", 0, [
                          /* Keep */1,
                          []
                        ])]);
        }
    case "agda2-highlight-clear" :
        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* ClearHighlighting */2]);
    case "agda2-highlight-load-and-delete-action" :
        var match$3 = Belt_Array.get(xs, 1);
        if (match$3 !== undefined && !match$3.tag) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* HighlightingInfoIndirect */Caml_chrome_debugger.variant("HighlightingInfoIndirect", 1, [match$3[0]])]);
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        2,
                        tokens
                      ])]);
        }
    case "agda2-info-action" :
    case "agda2-info-action-and-copy" :
        exit = 1;
        break;
    case "agda2-make-case-action" :
        var xs$2 = Belt_Array.get(xs, 1);
        if (xs$2 !== undefined) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* MakeCase */Caml_chrome_debugger.variant("MakeCase", 6, [
                        /* Function */0,
                        Parser$AgdaMode.SExpression.flatten(xs$2)
                      ])]);
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        8,
                        tokens
                      ])]);
        }
    case "agda2-make-case-action-extendlam" :
        var xs$3 = Belt_Array.get(xs, 1);
        if (xs$3 !== undefined) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* MakeCase */Caml_chrome_debugger.variant("MakeCase", 6, [
                        /* ExtendedLambda */1,
                        Parser$AgdaMode.SExpression.flatten(xs$3)
                      ])]);
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        9,
                        tokens
                      ])]);
        }
    case "agda2-maybe-goto" :
        var match$4 = Belt_Array.get(xs, 1);
        if (match$4 === undefined) {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        4,
                        tokens
                      ])]);
        }
        if (!match$4.tag) {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        4,
                        tokens
                      ])]);
        }
        var match$5 = match$4[0];
        if (match$5.length !== 3) {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        4,
                        tokens
                      ])]);
        }
        var filepath = match$5[0];
        if (filepath.tag) {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        4,
                        tokens
                      ])]);
        }
        var filepath$1 = filepath[0];
        var index$prime = match$5[2];
        if (index$prime.tag) {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        4,
                        tokens
                      ])]);
        } else {
          return Belt_Option.mapWithDefault(Belt_Option.flatMap(Parser$AgdaMode.$$int(index$prime[0]), (function (index) {
                            return /* JumpToError */Caml_chrome_debugger.variant("JumpToError", 3, [
                                      filepath$1,
                                      index
                                    ]);
                          })), /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                            3,
                            tokens
                          ])]), (function (x) {
                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
                      }));
        }
    case "agda2-solveAll-action" :
        var xs$4 = Belt_Array.get(xs, 1);
        if (xs$4 === undefined) {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        10,
                        tokens
                      ])]);
        }
        var tokens$1 = Parser$AgdaMode.SExpression.flatten(xs$4);
        var isEven = function (i) {
          return i % 2 === 0;
        };
        var i = {
          contents: 0
        };
        var solutions = Belt_Array.keepMap(tokens$1, (function (token) {
                var solution = isEven(i.contents) ? Belt_Option.flatMap(Parser$AgdaMode.$$int(token), (function (index) {
                          return Belt_Option.map(Belt_Array.get(tokens$1, i.contents + 1 | 0), (function (s) {
                                        return /* tuple */[
                                                index,
                                                s
                                              ];
                                      }));
                        })) : undefined;
                i.contents = i.contents + 1 | 0;
                return solution;
              }));
        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* SolveAll */Caml_chrome_debugger.variant("SolveAll", 7, [solutions])]);
    case "agda2-status-action" :
        var match$6 = Belt_Array.get(xs, 1);
        if (match$6 === undefined) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* NoStatus */0]);
        }
        if (match$6.tag) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* NoStatus */0]);
        }
        var pulp = match$6[0].split(",");
        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* Status */Caml_chrome_debugger.variant("Status", 2, [
                      pulp.includes("ShowImplicit"),
                      pulp.includes("Checked")
                    ])]);
    case "agda2-verbose" :
        var match$7 = Belt_Array.get(xs, 1);
        if (match$7 !== undefined && !match$7.tag) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* RunningInfo */Caml_chrome_debugger.variant("RunningInfo", 9, [
                        2,
                        match$7[0]
                      ])]);
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        13,
                        tokens
                      ])]);
        }
    default:
      return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                    14,
                    tokens
                  ])]);
  }
  if (exit === 1) {
    var match$8 = Belt_Array.get(xs, 1);
    var exit$1 = 0;
    if (match$8 !== undefined && !match$8.tag) {
      if (match$8[0] === "*Type-checking*") {
        var match$9 = Belt_Array.get(xs, 3);
        if (match$9 === undefined) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* ClearRunningInfo */1]);
        }
        if (match$9.tag) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* ClearRunningInfo */1]);
        }
        if (match$9[0] !== "t") {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* ClearRunningInfo */1]);
        }
        var match$10 = Belt_Array.get(xs, 2);
        if (match$10 !== undefined && !match$10.tag) {
          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* RunningInfo */Caml_chrome_debugger.variant("RunningInfo", 9, [
                        1,
                        match$10[0]
                      ])]);
        } else {
          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                        11,
                        tokens
                      ])]);
        }
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var info = parse(xs.slice(1));
      if (info !== undefined) {
        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* DisplayInfo */Caml_chrome_debugger.variant("DisplayInfo", 8, [info])]);
      } else {
        return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Response */Caml_chrome_debugger.variant("Response", 1, [
                      12,
                      tokens
                    ])]);
      }
    }
    
  }
  
}

function parse$1(tokens) {
  if (!tokens.tag) {
    return parseWithPriority(0, tokens);
  }
  var match = tokens[0];
  if (match.length !== 3) {
    return parseWithPriority(0, tokens);
  }
  var match$1 = match[0];
  if (!match$1.tag) {
    return parseWithPriority(0, tokens);
  }
  var match$2 = match$1[0];
  if (match$2.length !== 3) {
    return parseWithPriority(0, tokens);
  }
  var match$3 = match$2[0];
  if (match$3.tag) {
    return parseWithPriority(0, tokens);
  }
  if (match$3[0] !== "last") {
    return parseWithPriority(0, tokens);
  }
  var match$4 = match$2[1];
  if (match$4.tag) {
    return parseWithPriority(0, tokens);
  }
  if (match$4[0] !== ".") {
    return parseWithPriority(0, tokens);
  }
  var priority = match$2[2];
  if (priority.tag) {
    return parseWithPriority(0, tokens);
  }
  var match$5 = match[1];
  if (match$5.tag) {
    return parseWithPriority(0, tokens);
  }
  if (match$5[0] !== ".") {
    return parseWithPriority(0, tokens);
  }
  var xs = match[2];
  return parseWithPriority(Caml_format.caml_int_of_string(priority[0]), xs);
}

var Token;

exports.Token = Token;
exports.Info = Info;
exports.toString = toString$1;
exports.parseWithPriority = parseWithPriority;
exports.parse = parse$1;
/* Util-AgdaMode Not a pure module */
