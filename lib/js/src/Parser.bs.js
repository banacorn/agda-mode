// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function captures(handler, regex, raw) {
  return Rebase.$$Option[/* flatMap */5](handler, Rebase.$$Option[/* map */0]((function (result) {
                    return Rebase.$$Array[/* map */0]((function (prim) {
                                  if (prim == null) {
                                    return undefined;
                                  } else {
                                    return Caml_option.some(prim);
                                  }
                                }), result);
                  }), Caml_option.null_to_opt(regex.exec(raw))));
}

function agdaOutput(s) {
  return s.replace((/\\n/g), "\n");
}

function at(i, parser, captured) {
  if (i >= Rebase.$$Array[/* length */16](captured)) {
    return undefined;
  } else {
    return Rebase.$$Option[/* flatMap */5](parser, Rebase.$$Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, i)));
  }
}

function choice(res, raw) {
  return Rebase.$$Array[/* reduce */3]((function (result, parse) {
                if (result !== undefined) {
                  return Caml_option.some(Caml_option.valFromOption(result));
                } else {
                  return Curry._1(parse, raw);
                }
              }), undefined, res);
}

function $$int(s) {
  var exit = 0;
  var i;
  try {
    i = Caml_format.caml_int_of_string(s);
    exit = 1;
  }
  catch (exn){
    return undefined;
  }
  if (exit === 1) {
    return i;
  }
  
}

function userInput(s) {
  var s$1 = s.replace((/\\/g), "\\\\").replace((/\"/g), "\\\"").replace((/\n/g), "\\n");
  var match = atom.config.get("agda-mode.trimSpaces");
  if (match) {
    return Rebase.$$String[/* trim */8](s$1);
  } else {
    return s$1;
  }
}

function filepath(s) {
  var s$prime = s;
  if (s.charCodeAt(0) === 8234.0) {
    s$prime = s$prime.slice(1);
  }
  return Rebase.$$String[/* trim */8](s$prime);
}

function commandLine(s) {
  var parts = Rebase.List[/* fromArray */12](s.replace((/\s+/g), " ").split(" "));
  if (parts) {
    return /* tuple */[
            filepath(parts[0]),
            Rebase.$$Array[/* fromList */13](parts[1])
          ];
  } else {
    return /* tuple */[
            "",
            /* array */[]
          ];
  }
}

function rectifyEmacs(s) {
  var s$prime = s;
  if (s.charCodeAt(0) === 8234.0) {
    s$prime = s$prime.slice(1);
  }
  return Rebase.$$String[/* trim */8](s$prime);
}

exports.captures = captures;
exports.agdaOutput = agdaOutput;
exports.at = at;
exports.choice = choice;
exports.$$int = $$int;
exports.userInput = userInput;
exports.filepath = filepath;
exports.commandLine = commandLine;
exports.rectifyEmacs = rectifyEmacs;
/* No side effect */
