// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaMode = require("./Util.bs.js");
var View$AgdaMode = require("./View.bs.js");
var Command$AgdaMode = require("./Command.bs.js");
var Connection$AgdaMode = require("./Connection.bs.js");

function make(textEditor) {
  return /* record */Block.record([
            "textEditor",
            "view",
            "connection"
          ], [
            textEditor,
            View$AgdaMode.initialize(textEditor),
            undefined
          ]);
}

function activate(self) {
  return Curry._1(self[/* view */1][/* updateActivation */4][0], true);
}

function queryConnection(message, self) {
  activate(self);
  return Util$AgdaMode.Msg[/* send */4](true, self[/* view */1][/* activateSettingsView */9]).then((function (param) {
                return Util$AgdaMode.Msg[/* send */4](/* Connection */1, self[/* view */1][/* navigateSettingsView */10]).then((function (param) {
                              return Util$AgdaMode.Msg[/* send */4](/* tuple */[
                                          message,
                                          ""
                                        ], self[/* view */1][/* inquireConnection */5]);
                            }));
              }));
}

function connect(self) {
  queryConnection("hey", self);
  return /* () */0;
}

function deactivate(self) {
  return Curry._1(self[/* view */1][/* updateActivation */4][0], false);
}

function destroy(self) {
  deactivate(self);
  return Curry._1(self[/* view */1][/* destroy */11][0], /* () */0);
}

function dispatch(command, self) {
  connect(self);
  return Promise.resolve("");
}

function dispatchUndo(_self) {
  console.log("Undo");
  return /* () */0;
}

var Instance = /* module */Block.localModule([
    "make",
    "activate",
    "queryConnection",
    "connect",
    "deactivate",
    "destroy",
    "dispatch",
    "dispatchUndo"
  ], [
    make,
    activate,
    queryConnection,
    connect,
    deactivate,
    destroy,
    dispatch,
    dispatchUndo
  ]);

var instances = { };

function get(textEditor) {
  var id = String(textEditor.id);
  return Js_dict.get(instances, id);
}

function getThen(f, textEditor) {
  return Rebase.Option[/* forEach */8](f, get(textEditor));
}

function add(textEditor) {
  var id = String(textEditor.id);
  var match = get(textEditor);
  if (match !== undefined) {
    return /* () */0;
  } else {
    instances[id] = make(textEditor);
    return /* () */0;
  }
}

function remove(textEditor) {
  var id = String(textEditor.id);
  var match = Js_dict.get(instances, id);
  if (match !== undefined) {
    destroy(match);
    return (delete instances[id]);
  } else {
    return /* () */0;
  }
}

function contains(textEditor) {
  return get(textEditor) !== undefined;
}

var Instances = /* module */Block.localModule([
    "get",
    "getThen",
    "add",
    "remove",
    "contains"
  ], [
    get,
    getThen,
    add,
    remove,
    contains
  ]);

function isAgdaFile(textEditor) {
  var filepath = textEditor.getPath();
  var onWindows = Os.type() === "Windows_NT";
  if (onWindows) {
    return (/\.agda$|\.lagda$/i).test(filepath);
  } else {
    return (/\.agda$|\.lagda$/).test(filepath);
  }
}

var subscriptions = new Atom.CompositeDisposable();

function onEditorActivationChange(param) {
  var previous = /* record */Block.record(["contents"], [atom.workspace.getActiveTextEditor()]);
  subscriptions.add(atom.workspace.onDidChangeActiveTextEditor((function (next) {
              Rebase.Option[/* forEach */8]((function (param) {
                      return getThen(deactivate, param);
                    }), previous[0]);
              if (next !== undefined) {
                var nextEditor = Caml_option.valFromOption(next);
                getThen(activate, nextEditor);
                previous[0] = Caml_option.some(nextEditor);
                return /* () */0;
              } else {
                return /* () */0;
              }
            })));
  return /* () */0;
}

function onTriggerCommand(param) {
  return Rebase.$$Array[/* forEach */8]((function (command) {
                subscriptions.add(atom.commands.add("atom-text-editor", "agda-mode:" + command, (function (_event) {
                            return Rebase.Option[/* forEach */8]((function (self) {
                                          console.log("triggering: " + command);
                                          (Command$AgdaMode.parse(command), connect(self), Promise.resolve("")).then((function (result) {
                                                  return Promise.resolve((console.log(result), /* () */0));
                                                }));
                                          return /* () */0;
                                        }), Rebase.Option[/* flatMap */5](get, atom.workspace.getActiveTextEditor()));
                          })));
                return /* () */0;
              }), Command$AgdaMode.names);
}

function onUndo(param) {
  subscriptions.add(atom.commands.add("atom-text-editor", "core:undo", (function ($$event) {
              $$event.stopImmediatePropagation();
              var activated = atom.workspace.getActiveTextEditor();
              return Rebase.Option[/* forEach */8](dispatchUndo, activated);
            })));
  return /* () */0;
}

function activate$1(param) {
  subscriptions.add(atom.workspace.observeTextEditors((function (textEditor) {
              var textEditorSubscriptions = new Atom.CompositeDisposable();
              if (isAgdaFile(textEditor)) {
                add(textEditor);
              }
              textEditorSubscriptions.add(textEditor.onDidChangePath((function (param) {
                          if (!isAgdaFile(textEditor) && contains(textEditor)) {
                            remove(textEditor);
                          }
                          if (isAgdaFile(textEditor) && !contains(textEditor)) {
                            return add(textEditor);
                          } else {
                            return 0;
                          }
                        })));
              textEditorSubscriptions.add(textEditor.onDidDestroy((function (param) {
                          if (isAgdaFile(textEditor) && contains(textEditor)) {
                            remove(textEditor);
                          }
                          textEditorSubscriptions.dispose();
                          return /* () */0;
                        })));
              return /* () */0;
            })));
  onEditorActivationChange(/* () */0);
  onTriggerCommand(/* () */0);
  return onUndo(/* () */0);
}

function deactivate$1(param) {
  subscriptions.dispose();
  return /* () */0;
}

var config = {
  agdaPath: {
    title: "Agda",
    description: "Path to the executable of Agda, automatically inferred when possible. Overwrite to override.",
    type: "string",
    default: "",
    order: 1
  },
  enableJSONProtocol: {
    title: "Enable the JSON protocol (experimental)",
    description: "Demand Agda to output in JSON format when possible",
    type: "boolean",
    default: false,
    order: 2
  },
  libraryPath: {
    title: "Libraries",
    description: "Paths to include (such as agda-stdlib), seperate with comma. Useless after Agda 2.5.0",
    type: "array",
    default: /* array */[],
    items: {
      type: "string"
    },
    order: 5
  },
  backend: {
    title: "Backend",
    description: "The backend which is used to compile Agda programs.",
    type: "string",
    default: "GHCNoMain",
    enum: /* array */[
      "GHC",
      "GHCNoMain"
    ],
    order: 10
  },
  highlightingMethod: {
    title: "Highlighting information passing",
    description: "Receive parsed result from Agda, directly from stdio, or indirectly from temporary files (which requires frequent disk access)",
    type: "string",
    default: "Direct",
    enum: /* array */[
      "Indirect",
      "Direct"
    ],
    order: 20
  },
  maxBodyHeight: {
    title: "Max panel size",
    description: "The max height the panel could strech",
    type: "integer",
    default: 170,
    minimum: 40,
    maximum: 1010,
    order: 30
  },
  inputMethod: {
    title: "Input Method",
    description: "Enable input method",
    type: "boolean",
    default: true,
    order: 40
  },
  trimSpaces: {
    title: "Trim spaces",
    description: "Remove leading and trailing spaces of an expression in an hole, when giving it to Agda. (Default to be False in Emacs, but True in here)",
    type: "boolean",
    default: true,
    order: 50
  }
};

var Msg = 0;

exports.Msg = Msg;
exports.Instance = Instance;
exports.instances = instances;
exports.Instances = Instances;
exports.isAgdaFile = isAgdaFile;
exports.subscriptions = subscriptions;
exports.onEditorActivationChange = onEditorActivationChange;
exports.onTriggerCommand = onTriggerCommand;
exports.onUndo = onUndo;
exports.activate = activate$1;
exports.deactivate = deactivate$1;
exports.config = config;
/* subscriptions Not a pure module */
