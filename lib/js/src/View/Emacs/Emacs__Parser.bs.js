// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Type__Location$AgdaMode = require("../../Type/Type__Location.bs.js");
var Emacs__Component$AgdaMode = require("./Emacs__Component.bs.js");

function unindent(lines) {
  var newLineIndices = Rebase.$$Array[/* map */0]((function (param) {
          return param[2];
        }), Rebase.$$Array[/* filter */10]((function (param) {
              var line = param[0];
              var nextLine = param[1];
              var sort = (/^Sort \S*/);
              var delimeter = (/^\u2014{4}/g);
              var completeJudgement = (/^(?:(?:[^\(\{\s]+\s+\:)|Have\:|Goal\:)\s* \S*/);
              var reallyLongTermIdentifier = (/^\S+$/);
              var restOfTheJudgement = (/^\s*\:\s* \S*/);
              if (sort.test(line) || delimeter.test(line) || reallyLongTermIdentifier.test(line) && Rebase.$$Option[/* exists */9]((function (line) {
                        return restOfTheJudgement.test(line);
                      }), nextLine)) {
                return true;
              } else {
                return completeJudgement.test(line);
              }
            }), Rebase.$$Array[/* mapi */27]((function (line, index) {
                  return /* tuple */[
                          line,
                          Rebase.$$Array[/* get */17](lines, index + 1 | 0),
                          index
                        ];
                }), lines)));
  return Rebase.$$Array[/* map */0]((function (param) {
                return Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](Rebase.$$Array[/* slice */25](param[0], param[1], lines)));
              }), Rebase.$$Array[/* mapi */27]((function (index, i) {
                    var match = Rebase.$$Array[/* get */17](newLineIndices, i + 1 | 0);
                    if (match !== undefined) {
                      return /* tuple */[
                              index,
                              match
                            ];
                    } else {
                      return /* tuple */[
                              index,
                              Rebase.$$Array[/* length */16](lines) + 1 | 0
                            ];
                    }
                  }), newLineIndices));
}

var partial_arg = Util$AgdaMode.Dict[/* split */1];

function partiteMetas(param) {
  return partial_arg("metas", (function (rawMetas) {
                var metas = unindent(rawMetas);
                var indexOfHiddenMetas = Rebase.$$Option[/* map */0]((function (prim) {
                        return prim[0];
                      }), Rebase.$$Array[/* findIndex */29]((function (s) {
                            return Rebase.$$Option[/* isSome */13](Curry._1(Emacs__Component$AgdaMode.Output[/* parseOutputWithRange */1], s));
                          }), metas));
                return Util$AgdaMode.Dict[/* partite */0]((function (param) {
                              var i = param[1];
                              if (indexOfHiddenMetas !== undefined) {
                                if (i === indexOfHiddenMetas) {
                                  return "hiddenMetas";
                                } else if (i === 0) {
                                  return "interactionMetas";
                                } else {
                                  return undefined;
                                }
                              } else if (i === 0) {
                                return "interactionMetas";
                              } else {
                                return undefined;
                              }
                            }), metas);
              }), param);
}

function partiteWarningsOrErrors(key) {
  var partial_arg = Util$AgdaMode.Dict[/* update */2];
  return (function (param) {
      return partial_arg(key, (function (raw) {
                    var partial_arg = (/^\u2014{4}/);
                    var hasDelimeter = Rebase.$$Option[/* isSome */13](Rebase.$$Option[/* flatMap */5]((function (param) {
                                return Caml_option.null_to_opt(param.match(partial_arg));
                              }), Rebase.$$Array[/* get */17](raw, 0)));
                    var lines = hasDelimeter ? raw.slice(1) : raw;
                    var markWarningStart = function (line) {
                      return Rebase.$$Option[/* isSome */13](Curry._1(Type__Location$AgdaMode.$$Range[/* parse */0], line));
                    };
                    var glueBack = function (xs) {
                      var partial_arg = (/at$/);
                      return Rebase.$$Option[/* isSome */13](Rebase.$$Option[/* flatMap */5]((function (param) {
                                        return Caml_option.null_to_opt(param.match(partial_arg));
                                      }), Rebase.$$Array[/* get */17](xs, Rebase.$$Array[/* length */16](xs) - 1 | 0)));
                    };
                    return Rebase.$$Array[/* map */0]((function (xs) {
                                  return Rebase.$$String[/* joinWith */11]("\n", Rebase.List[/* fromArray */12](xs));
                                }), Util$AgdaMode.Array_[/* mergeWithNext */1](glueBack)(Util$AgdaMode.Array_[/* partite */0](markWarningStart, lines)));
                  }), param);
    });
}

exports.unindent = unindent;
exports.partiteMetas = partiteMetas;
exports.partiteWarningsOrErrors = partiteWarningsOrErrors;
/* Util-AgdaMode Not a pure module */
