// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Task$AgdaMode = require("./Task.bs.js");
var Command$AgdaMode = require("../Command.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Translator$AgdaMode = require("../View/Panel/InputMethod/Translator.bs.js");
var Type__Location$AgdaMode = require("../Type/Type__Location.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("../Instance/Instance__Highlightings.bs.js");

function handle(command) {
  if (typeof command === "number") {
    switch (command) {
      case /* Load */0 :
          return {
                  hd: {
                    TAG: 4,
                    _0: /* Save */0,
                    [Symbol.for("name")]: "Editor"
                  },
                  tl: {
                    hd: /* Activate */1,
                    tl: {
                      hd: {
                        TAG: 0,
                        _0: (function (instance) {
                            instance.isLoaded = true;
                            return Task$AgdaMode.$$return(/* [] */0);
                          }),
                        [Symbol.for("name")]: "WithInstance"
                      },
                      tl: {
                        hd: {
                          TAG: 2,
                          _0: "Loading ...",
                          _1: /* PlainText */0,
                          _2: {
                            _0: {
                              TAG: 8,
                              _0: "",
                              [Symbol.for("name")]: "PlainText"
                            },
                            [Symbol.for("name")]: "Emacs"
                          },
                          [Symbol.for("name")]: "Display"
                        },
                        tl: {
                          hd: {
                            TAG: 8,
                            _0: /* Load */0,
                            [Symbol.for("name")]: "SendRequest"
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                };
      case /* Quit */1 :
          return {
                  hd: /* Disconnect */0,
                  tl: {
                    hd: {
                      TAG: 0,
                      _0: (function (instance) {
                          Instance__Goals$AgdaMode.destroyAll(instance);
                          Instance__Highlightings$AgdaMode.destroyAll(instance);
                          instance.isLoaded = false;
                          return Task$AgdaMode.$$return(/* [] */0);
                        }),
                      [Symbol.for("name")]: "WithInstance"
                    },
                    tl: {
                      hd: /* Deactivate */2,
                      tl: /* [] */0
                    }
                  }
                };
      case /* Restart */2 :
          return {
                  hd: /* Disconnect */0,
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: /* Load */0,
                      [Symbol.for("name")]: "SendRequest"
                    },
                    tl: /* [] */0
                  }
                };
      case /* Abort */3 :
          return {
                  hd: {
                    TAG: 8,
                    _0: /* Abort */1,
                    [Symbol.for("name")]: "SendRequest"
                  },
                  tl: /* [] */0
                };
      case /* Compile */4 :
          return {
                  hd: {
                    TAG: 8,
                    _0: /* Compile */2,
                    [Symbol.for("name")]: "SendRequest"
                  },
                  tl: /* [] */0
                };
      case /* ToggleDisplayOfImplicitArguments */5 :
          return {
                  hd: {
                    TAG: 8,
                    _0: /* ToggleDisplayOfImplicitArguments */3,
                    [Symbol.for("name")]: "SendRequest"
                  },
                  tl: /* [] */0
                };
      case /* SolveConstraints */6 :
          return {
                  hd: {
                    TAG: 8,
                    _0: /* SolveConstraints */4,
                    [Symbol.for("name")]: "SendRequest"
                  },
                  tl: /* [] */0
                };
      case /* ShowConstraints */7 :
          return {
                  hd: {
                    TAG: 8,
                    _0: /* ShowConstraints */5,
                    [Symbol.for("name")]: "SendRequest"
                  },
                  tl: /* [] */0
                };
      case /* ShowGoals */8 :
          return {
                  hd: {
                    TAG: 8,
                    _0: /* ShowGoals */6,
                    [Symbol.for("name")]: "SendRequest"
                  },
                  tl: /* [] */0
                };
      case /* NextGoal */9 :
          return {
                  hd: {
                    TAG: 5,
                    _0: /* JumpToTheNext */0,
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* PreviousGoal */10 :
          return {
                  hd: {
                    TAG: 5,
                    _0: /* JumpToThePrevious */1,
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* ToggleDocking */11 :
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        return $$Promise.map(Curry._1(instance.view.toggleDocking, undefined), (function (param) {
                                      return {
                                              TAG: 0,
                                              _0: /* [] */0,
                                              [Symbol.for("name")]: "Ok"
                                            };
                                    }));
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* WhyInScope */12 :
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        var selectedText = instance.editors.source.getSelectedText();
                        if (Rebase.$$String.isEmpty(selectedText)) {
                          return Task$AgdaMode.$$return({
                                      hd: {
                                        TAG: 3,
                                        _0: "Scope info",
                                        _1: "name:",
                                        _2: "",
                                        _3: (function (expr) {
                                            return {
                                                    hd: {
                                                      TAG: 5,
                                                      _0: {
                                                        TAG: 0,
                                                        _0: (function (goal) {
                                                            return {
                                                                    hd: {
                                                                      TAG: 8,
                                                                      _0: {
                                                                        TAG: 0,
                                                                        _0: expr,
                                                                        _1: goal,
                                                                        [Symbol.for("name")]: "WhyInScope"
                                                                      },
                                                                      [Symbol.for("name")]: "SendRequest"
                                                                    },
                                                                    tl: /* [] */0
                                                                  };
                                                          }),
                                                        [Symbol.for("name")]: "GetPointed"
                                                      },
                                                      [Symbol.for("name")]: "Goals"
                                                    },
                                                    tl: /* [] */0
                                                  };
                                          }),
                                        [Symbol.for("name")]: "Inquire"
                                      },
                                      tl: /* [] */0
                                    });
                        } else {
                          return Task$AgdaMode.$$return({
                                      hd: {
                                        TAG: 8,
                                        _0: {
                                          TAG: 1,
                                          _0: selectedText,
                                          [Symbol.for("name")]: "WhyInScopeGlobal"
                                        },
                                        [Symbol.for("name")]: "SendRequest"
                                      },
                                      tl: /* [] */0
                                    });
                        }
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* Give */13 :
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return {
                                    hd: {
                                      TAG: 3,
                                      _0: "Give",
                                      _1: "expression to give:",
                                      _2: "",
                                      _3: (function (expr) {
                                          Goal$AgdaMode.setContent(expr, goal);
                                          return {
                                                  hd: {
                                                    TAG: 8,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: goal,
                                                      [Symbol.for("name")]: "Give"
                                                    },
                                                    [Symbol.for("name")]: "SendRequest"
                                                  },
                                                  tl: /* [] */0
                                                };
                                        }),
                                      [Symbol.for("name")]: "Inquire"
                                    },
                                    tl: /* [] */0
                                  };
                          } else {
                            return {
                                    hd: {
                                      TAG: 8,
                                      _0: {
                                        TAG: 9,
                                        _0: goal,
                                        [Symbol.for("name")]: "Give"
                                      },
                                      [Symbol.for("name")]: "SendRequest"
                                    },
                                    tl: /* [] */0
                                  };
                          }
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* Refine */14 :
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 10,
                                      _0: goal,
                                      [Symbol.for("name")]: "Refine"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* Auto */15 :
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 11,
                                      _0: goal,
                                      [Symbol.for("name")]: "Auto"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* Case */16 :
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return {
                                    hd: {
                                      TAG: 3,
                                      _0: "Case",
                                      _1: "expression to case:",
                                      _2: "",
                                      _3: (function (expr) {
                                          Goal$AgdaMode.setContent(expr, goal);
                                          return {
                                                  hd: {
                                                    TAG: 8,
                                                    _0: {
                                                      TAG: 12,
                                                      _0: goal,
                                                      [Symbol.for("name")]: "Case"
                                                    },
                                                    [Symbol.for("name")]: "SendRequest"
                                                  },
                                                  tl: /* [] */0
                                                };
                                        }),
                                      [Symbol.for("name")]: "Inquire"
                                    },
                                    tl: /* [] */0
                                  };
                          } else {
                            return {
                                    hd: {
                                      TAG: 8,
                                      _0: {
                                        TAG: 12,
                                        _0: goal,
                                        [Symbol.for("name")]: "Case"
                                      },
                                      [Symbol.for("name")]: "SendRequest"
                                    },
                                    tl: /* [] */0
                                  };
                          }
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* QuerySymbol */17 :
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        var selected = Editors$AgdaMode.$$Selection.getSymbol(instance.editors);
                        var getSymbol = Rebase.$$String.isEmpty(Rebase.$$String.trim(selected)) ? $$Promise.flatMap(Curry._1(instance.view.activate, undefined), (function (param) {
                                  return Curry._3(instance.view.inquire, "Lookup Unicode Symbol Input Sequence", "symbol to lookup:", "");
                                })) : $$Promise.resolved({
                                TAG: 0,
                                _0: selected,
                                [Symbol.for("name")]: "Ok"
                              });
                        $$Promise.getOk(getSymbol, (function (symbol) {
                                return Rebase.$$Option.forEach((function (sequences) {
                                              Curry._3(instance.view.display, "Input sequence for " + symbol, /* PlainText */0, {
                                                    _0: {
                                                      TAG: 8,
                                                      _0: Rebase.$$String.joinWith("\n", Rebase.List.fromArray(sequences)),
                                                      [Symbol.for("name")]: "PlainText"
                                                    },
                                                    [Symbol.for("name")]: "Emacs"
                                                  });
                                              
                                            }), Translator$AgdaMode.lookup(symbol));
                              }));
                        return $$Promise.resolved({
                                    TAG: 0,
                                    _0: /* [] */0,
                                    [Symbol.for("name")]: "Ok"
                                  });
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* GotoDefinition */18 :
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        if (instance.isLoaded) {
                          return $$Promise.flatMap(Instance__TextEditors$AgdaMode.restoreCursorPosition((function (param) {
                                            return $$Promise.resolved(Editors$AgdaMode.$$Selection.getTextNode(instance.editors));
                                          }), instance), (function (name) {
                                        return Task$AgdaMode.$$return({
                                                    hd: {
                                                      TAG: 5,
                                                      _0: {
                                                        TAG: 1,
                                                        _0: (function (goal) {
                                                            return {
                                                                    hd: {
                                                                      TAG: 8,
                                                                      _0: {
                                                                        TAG: 17,
                                                                        _0: name,
                                                                        _1: goal,
                                                                        [Symbol.for("name")]: "GotoDefinition"
                                                                      },
                                                                      [Symbol.for("name")]: "SendRequest"
                                                                    },
                                                                    tl: /* [] */0
                                                                  };
                                                          }),
                                                        _1: (function (param) {
                                                            return {
                                                                    hd: {
                                                                      TAG: 8,
                                                                      _0: {
                                                                        TAG: 18,
                                                                        _0: name,
                                                                        [Symbol.for("name")]: "GotoDefinitionGlobal"
                                                                      },
                                                                      [Symbol.for("name")]: "SendRequest"
                                                                    },
                                                                    tl: /* [] */0
                                                                  };
                                                          }),
                                                        [Symbol.for("name")]: "GetPointedOr"
                                                      },
                                                      [Symbol.for("name")]: "Goals"
                                                    },
                                                    tl: /* [] */0
                                                  });
                                      }));
                        } else {
                          return $$Promise.resolved({
                                      TAG: 0,
                                      _0: {
                                        hd: {
                                          TAG: 7,
                                          _0: /* Load */0,
                                          [Symbol.for("name")]: "DispatchCommand"
                                        },
                                        tl: /* [] */0
                                      },
                                      [Symbol.for("name")]: "Ok"
                                    });
                        }
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      
    }
  } else {
    switch (command.TAG | 0) {
      case /* SearchAbout */0 :
          var normalization = command._0;
          return {
                  hd: {
                    TAG: 3,
                    _0: "Searching through definitions [" + (Command$AgdaMode.Normalization.toString(normalization) + "]"),
                    _1: "expression to search:",
                    _2: "",
                    _3: (function (expr) {
                        return {
                                hd: {
                                  TAG: 8,
                                  _0: {
                                    TAG: 2,
                                    _0: normalization,
                                    _1: expr,
                                    [Symbol.for("name")]: "SearchAbout"
                                  },
                                  [Symbol.for("name")]: "SendRequest"
                                },
                                tl: /* [] */0
                              };
                      }),
                    [Symbol.for("name")]: "Inquire"
                  },
                  tl: /* [] */0
                };
      case /* InferType */1 :
          var normalization$1 = command._0;
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 1,
                      _0: (function (goal) {
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return {
                                    hd: {
                                      TAG: 3,
                                      _0: "Infer type [" + (Command$AgdaMode.Normalization.toString(normalization$1) + "]"),
                                      _1: "expression to infer:",
                                      _2: "",
                                      _3: (function (expr) {
                                          return {
                                                  hd: {
                                                    TAG: 8,
                                                    _0: {
                                                      TAG: 3,
                                                      _0: normalization$1,
                                                      _1: expr,
                                                      _2: goal,
                                                      [Symbol.for("name")]: "InferType"
                                                    },
                                                    [Symbol.for("name")]: "SendRequest"
                                                  },
                                                  tl: /* [] */0
                                                };
                                        }),
                                      [Symbol.for("name")]: "Inquire"
                                    },
                                    tl: /* [] */0
                                  };
                          }
                          var expr = Goal$AgdaMode.getContent(goal);
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 3,
                                      _0: normalization$1,
                                      _1: expr,
                                      _2: goal,
                                      [Symbol.for("name")]: "InferType"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      _1: (function (param) {
                          return {
                                  hd: {
                                    TAG: 3,
                                    _0: "Infer type [" + (Command$AgdaMode.Normalization.toString(normalization$1) + "]"),
                                    _1: "expression to infer:",
                                    _2: "",
                                    _3: (function (expr) {
                                        return {
                                                hd: {
                                                  TAG: 8,
                                                  _0: {
                                                    TAG: 4,
                                                    _0: normalization$1,
                                                    _1: expr,
                                                    [Symbol.for("name")]: "InferTypeGlobal"
                                                  },
                                                  [Symbol.for("name")]: "SendRequest"
                                                },
                                                tl: /* [] */0
                                              };
                                      }),
                                    [Symbol.for("name")]: "Inquire"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointedOr"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* ModuleContents */2 :
          var normalization$2 = command._0;
          return {
                  hd: {
                    TAG: 3,
                    _0: "Module contents [" + (Command$AgdaMode.Normalization.toString(normalization$2) + "]"),
                    _1: "module name:",
                    _2: "",
                    _3: (function (expr) {
                        return {
                                hd: {
                                  TAG: 5,
                                  _0: {
                                    TAG: 1,
                                    _0: (function (goal) {
                                        return {
                                                hd: {
                                                  TAG: 8,
                                                  _0: {
                                                    TAG: 5,
                                                    _0: normalization$2,
                                                    _1: expr,
                                                    _2: goal,
                                                    [Symbol.for("name")]: "ModuleContents"
                                                  },
                                                  [Symbol.for("name")]: "SendRequest"
                                                },
                                                tl: /* [] */0
                                              };
                                      }),
                                    _1: (function (param) {
                                        return {
                                                hd: {
                                                  TAG: 8,
                                                  _0: {
                                                    TAG: 6,
                                                    _0: normalization$2,
                                                    _1: expr,
                                                    [Symbol.for("name")]: "ModuleContentsGlobal"
                                                  },
                                                  [Symbol.for("name")]: "SendRequest"
                                                },
                                                tl: /* [] */0
                                              };
                                      }),
                                    [Symbol.for("name")]: "GetPointedOr"
                                  },
                                  [Symbol.for("name")]: "Goals"
                                },
                                tl: /* [] */0
                              };
                      }),
                    [Symbol.for("name")]: "Inquire"
                  },
                  tl: /* [] */0
                };
      case /* ComputeNormalForm */3 :
          var computeMode = command._0;
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 1,
                      _0: (function (goal) {
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return {
                                    hd: {
                                      TAG: 3,
                                      _0: "Compute normal form",
                                      _1: "expression to normalize:",
                                      _2: "",
                                      _3: (function (expr) {
                                          return {
                                                  hd: {
                                                    TAG: 8,
                                                    _0: {
                                                      TAG: 7,
                                                      _0: computeMode,
                                                      _1: expr,
                                                      _2: goal,
                                                      [Symbol.for("name")]: "ComputeNormalForm"
                                                    },
                                                    [Symbol.for("name")]: "SendRequest"
                                                  },
                                                  tl: /* [] */0
                                                };
                                        }),
                                      [Symbol.for("name")]: "Inquire"
                                    },
                                    tl: /* [] */0
                                  };
                          }
                          var expr = Goal$AgdaMode.getContent(goal);
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 7,
                                      _0: computeMode,
                                      _1: expr,
                                      _2: goal,
                                      [Symbol.for("name")]: "ComputeNormalForm"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      _1: (function (param) {
                          return {
                                  hd: {
                                    TAG: 3,
                                    _0: "Compute normal form",
                                    _1: "expression to normalize:",
                                    _2: "",
                                    _3: (function (expr) {
                                        return {
                                                hd: {
                                                  TAG: 8,
                                                  _0: {
                                                    TAG: 8,
                                                    _0: computeMode,
                                                    _1: expr,
                                                    [Symbol.for("name")]: "ComputeNormalFormGlobal"
                                                  },
                                                  [Symbol.for("name")]: "SendRequest"
                                                },
                                                tl: /* [] */0
                                              };
                                      }),
                                    [Symbol.for("name")]: "Inquire"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointedOr"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* GoalType */4 :
          var normalization$3 = command._0;
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 13,
                                      _0: normalization$3,
                                      _1: goal,
                                      [Symbol.for("name")]: "GoalType"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* Context */5 :
          var normalization$4 = command._0;
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 14,
                                      _0: normalization$4,
                                      _1: goal,
                                      [Symbol.for("name")]: "Context"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* GoalTypeAndContext */6 :
          var normalization$5 = command._0;
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 15,
                                      _0: normalization$5,
                                      _1: goal,
                                      [Symbol.for("name")]: "GoalTypeAndContext"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* GoalTypeAndInferredType */7 :
          var normalization$6 = command._0;
          return {
                  hd: {
                    TAG: 5,
                    _0: {
                      TAG: 0,
                      _0: (function (goal) {
                          return {
                                  hd: {
                                    TAG: 8,
                                    _0: {
                                      TAG: 16,
                                      _0: normalization$6,
                                      _1: goal,
                                      [Symbol.for("name")]: "GoalTypeAndInferredType"
                                    },
                                    [Symbol.for("name")]: "SendRequest"
                                  },
                                  tl: /* [] */0
                                };
                        }),
                      [Symbol.for("name")]: "GetPointed"
                    },
                    [Symbol.for("name")]: "Goals"
                  },
                  tl: /* [] */0
                };
      case /* InputSymbol */8 :
          var symbol = command._0;
          var enabled = atom.config.get("agda-mode.inputMethod");
          if (enabled) {
            return {
                    hd: /* Activate */1,
                    tl: {
                      hd: {
                        TAG: 0,
                        _0: (function (instance) {
                            var tmp;
                            switch (symbol) {
                              case /* Ordinary */0 :
                                  tmp = Curry._1(instance.view.activateInputMethod, true);
                                  break;
                              case /* CurlyBracket */1 :
                                  tmp = Curry._1(instance.view.interceptAndInsertKey, "{");
                                  break;
                              case /* Bracket */2 :
                                  tmp = Curry._1(instance.view.interceptAndInsertKey, "[");
                                  break;
                              case /* Parenthesis */3 :
                                  tmp = Curry._1(instance.view.interceptAndInsertKey, "(");
                                  break;
                              case /* DoubleQuote */4 :
                                  tmp = Curry._1(instance.view.interceptAndInsertKey, "\"");
                                  break;
                              case /* SingleQuote */5 :
                                  tmp = Curry._1(instance.view.interceptAndInsertKey, "'");
                                  break;
                              case /* BackQuote */6 :
                                  tmp = Curry._1(instance.view.interceptAndInsertKey, "`");
                                  break;
                              case /* Abort */7 :
                                  tmp = Curry._1(instance.view.activateInputMethod, false);
                                  break;
                              
                            }
                            return $$Promise.map(tmp, (function (param) {
                                          return {
                                                  TAG: 0,
                                                  _0: /* [] */0,
                                                  [Symbol.for("name")]: "Ok"
                                                };
                                        }));
                          }),
                        [Symbol.for("name")]: "WithInstance"
                      },
                      tl: /* [] */0
                    }
                  };
          } else {
            return {
                    hd: {
                      TAG: 0,
                      _0: (function (instance) {
                          Editors$AgdaMode.Focus.get(instance.editors).insertText("\\");
                          return $$Promise.resolved({
                                      TAG: 0,
                                      _0: /* [] */0,
                                      [Symbol.for("name")]: "Ok"
                                    });
                        }),
                      [Symbol.for("name")]: "WithInstance"
                    },
                    tl: /* [] */0
                  };
          }
      case /* Jump */9 :
          var index = command._0;
          if (index.TAG) {
            var index$1 = index._0;
            return {
                    hd: {
                      TAG: 0,
                      _0: (function (instance) {
                          var positions = Instance__Goals$AgdaMode.getPositions(instance);
                          Editors$AgdaMode.Focus.on(/* Source */0, instance.editors);
                          Rebase.$$Option.forEach((function (position) {
                                  instance.editors.source.setCursorBufferPosition(position);
                                  
                                }), Rebase.$$Array.get(positions, index$1));
                          return $$Promise.resolved({
                                      TAG: 0,
                                      _0: /* [] */0,
                                      [Symbol.for("name")]: "Ok"
                                    });
                        }),
                      [Symbol.for("name")]: "WithInstance"
                    },
                    tl: /* [] */0
                  };
          }
          var range = index._0;
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        var filePath = Instance__TextEditors$AgdaMode.getPath(instance);
                        var match;
                        if (range) {
                          var path = range._0;
                          match = path !== undefined ? [
                              true,
                              path === filePath ? undefined : path
                            ] : [
                              true,
                              undefined
                            ];
                        } else {
                          match = [
                            false,
                            undefined
                          ];
                        }
                        var otherFilePath = match[1];
                        if (!match[0]) {
                          return $$Promise.resolved({
                                      TAG: 0,
                                      _0: /* [] */0,
                                      [Symbol.for("name")]: "Ok"
                                    });
                        }
                        if (otherFilePath !== undefined) {
                          var match$1;
                          if (range) {
                            var i = Rebase.$$Array.get(range._1, 0);
                            match$1 = i !== undefined ? [
                                i.start.line - 1 | 0,
                                i.start.col - 1 | 0
                              ] : [
                                0,
                                0
                              ];
                          } else {
                            match$1 = [
                              0,
                              0
                            ];
                          }
                          var option = {
                            initialLine: match$1[0],
                            initialColumn: match$1[1],
                            split: "right",
                            activatePane: true,
                            activateItem: true,
                            pending: false,
                            searchAllPanes: true,
                            location: undefined
                          };
                          return $$Promise.mapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(atom.workspace.open(otherFilePath, option))), (function (param) {
                                            return /* Cancelled */0;
                                          })), (function (param) {
                                        return /* [] */0;
                                      }));
                        }
                        var ranges = Type__Location$AgdaMode.$$Range.toAtomRanges(range);
                        if (Rebase.$$Option.isSome(Rebase.$$Array.get(ranges, 0))) {
                          setTimeout((function (param) {
                                  instance.editors.source.setSelectedBufferRanges(ranges);
                                  
                                }), 0);
                        }
                        return $$Promise.resolved({
                                    TAG: 0,
                                    _0: /* [] */0,
                                    [Symbol.for("name")]: "Ok"
                                  });
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      
    }
  }
}

var Goals;

var Highlightings;

var Connections;

var TextEditors;

exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handle = handle;
/* Promise Not a pure module */
