// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");

function readConfig(param) {
  var match = atom.config.get("agda-mode.inputMethodExtension");
  if (match !== undefined) {
    return match;
  } else {
    return "{}";
  }
}

var partial_arg = Rebase.$$Option[/* map */0];

var parse = Curry._2(Rebase.Fn[/* >> */6], Json.parse, (function (param) {
        return partial_arg((function (param) {
                      return Json_decode.dict((function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), param);
                    }), param);
      }));

var partial_arg$1 = { };

var partial_arg$2 = Rebase.$$Option[/* getOr */16];

var keymap = Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], readConfig, parse), (function (param) {
        return partial_arg$2(partial_arg$1, param);
      }));

function lookup(key) {
  return Rebase.$$Option[/* getOr */16](/* array */[], Js_dict.get(Curry._1(keymap, /* () */0), key));
}

function extendKeySuggestions(key, origionalSuggestions) {
  var partial_arg = Rebase.$$String[/* length */1](key);
  var partial_arg$1 = Rebase.$$String[/* sub */9];
  var partial_arg$2 = Rebase.$$String[/* startsWith */3];
  var extension = Rebase.$$Array[/* filter */10]((function (s) {
          return Rebase.$$String[/* length */1](s) === 1;
        }), Rebase.$$Array[/* map */0]((function (param) {
              return partial_arg$1(partial_arg, 1, param);
            }), Rebase.$$Array[/* filter */10]((function (param) {
                  return partial_arg$2(key, param);
                }), Object.keys(Curry._1(keymap, /* () */0)))));
  var union = function (xs, ys) {
    return Rebase.$$Array[/* concat */11](xs, Rebase.$$Array[/* filter */10]((function (y) {
                      return !xs.includes(y);
                    }), ys));
  };
  return union(origionalSuggestions, extension).sort();
}

function extendCandidateSymbols(key, originalCandidates) {
  var extension = lookup(key);
  var removedOverlaps = Rebase.$$Array[/* filter */10]((function (s) {
          return !extension.includes(s);
        }), originalCandidates);
  return Rebase.$$Array[/* concat */11](removedOverlaps, extension);
}

exports.readConfig = readConfig;
exports.parse = parse;
exports.keymap = keymap;
exports.lookup = lookup;
exports.extendKeySuggestions = extendKeySuggestions;
exports.extendCandidateSymbols = extendCandidateSymbols;
/* parse Not a pure module */
