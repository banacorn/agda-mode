// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReactDom = require("react-dom");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Tab$AgdaMode = require("./View/Tab.bs.js");
var Panel$AgdaMode = require("./View/Panel/Panel.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var EditorNotSet = Caml_exceptions.create("View-AgdaMode.EditorNotSet");

var state_000 = /* header : record */Block.record(["contents"], [Block.record([
        "text",
        "style"
      ], [
        "",
        ""
      ])]);

var state_001 = /* body : record */Block.record(["contents"], [Block.record([
        "maxHeight",
        "raw"
      ], [
        170,
        0
      ])]);

var state_002 = /* mountAt : record */Block.record(["contents"], [0]);

var state_003 = /* mode : record */Block.record(["contents"], [0]);

var state_004 = /* query : record */Block.record(["contents"], [Block.record([
        "placeholder",
        "value"
      ], [
        "",
        ""
      ])]);

var state = /* record */Block.record([
    "header",
    "body",
    "mountAt",
    "mode",
    "query"
  ], [
    state_000,
    state_001,
    state_002,
    state_003,
    state_004
  ]);

var editorRef = /* record */Block.record(["contents"], [undefined]);

function createElement(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function renderPanel(element) {
  ReactDom.render(ReasonReact.element(undefined, undefined, Panel$AgdaMode.make(mountPanel, state_001[0], state_000[0], state_002[0], state_003[0], state_004[0], /* array */[])), element);
  return /* () */0;
}

function mountPanel(mountTo) {
  var createTab = function (param) {
    var match = editorRef[0];
    if (match !== undefined) {
      return Tab$AgdaMode.make(Js_primitive.valFromOption(match), undefined, (function (param) {
                    return /* () */0;
                  }), (function (param) {
                    return mountPanel(/* ToBottom */0);
                  }), undefined, /* () */0);
    } else {
      throw EditorNotSet;
    }
  };
  var match = state_002[0];
  if (typeof match === "number") {
    switch (mountTo) {
      case 0 : 
          var element = createElement(/* () */0);
          state_002[0] = /* Bottom */Block.variant("Bottom", 0, [element]);
          return renderPanel(element);
      case 1 : 
          var tab = createTab(/* () */0);
          state_002[0] = /* Pane */Block.variant("Pane", 1, [tab]);
          return renderPanel(tab[/* element */0]);
      case 2 : 
          return /* () */0;
      
    }
  } else if (match.tag) {
    var tab$1 = match[0];
    switch (mountTo) {
      case 0 : 
          Curry._1(tab$1[/* kill */1], /* () */0);
          var element$1 = createElement(/* () */0);
          state_002[0] = /* Bottom */Block.variant("Bottom", 0, [element$1]);
          return renderPanel(element$1);
      case 1 : 
          return renderPanel(tab$1[/* element */0]);
      case 2 : 
          console.log("hey");
          Curry._1(tab$1[/* kill */1], /* () */0);
          state_002[0] = /* Nowhere */0;
          return /* () */0;
      
    }
  } else {
    var element$2 = match[0];
    switch (mountTo) {
      case 0 : 
          return renderPanel(element$2);
      case 1 : 
          ReactDom.unmountComponentAtNode(element$2);
          var tab$2 = createTab(/* () */0);
          state_002[0] = /* Pane */Block.variant("Pane", 1, [tab$2]);
          return renderPanel(tab$2[/* element */0]);
      case 2 : 
          state_002[0] = /* Nowhere */0;
          ReactDom.unmountComponentAtNode(element$2);
          return /* () */0;
      
    }
  }
}

function rerenderPanel(param) {
  var match = state_002[0];
  if (typeof match === "number") {
    return mountPanel(/* ToNowhere */2);
  } else if (match.tag) {
    return mountPanel(/* ToPane */1);
  } else {
    return mountPanel(/* ToBottom */0);
  }
}

function initialize(editor) {
  editorRef[0] = Js_primitive.some(editor);
  return /* () */0;
}

function updateHeader(header) {
  state_000[0] = header;
  return rerenderPanel(/* () */0);
}

function updateBody(body) {
  state_001[0] = body;
  return rerenderPanel(/* () */0);
}

function updateMode(mode) {
  state_003[0] = mode;
  return rerenderPanel(/* () */0);
}

function updateQuery(query) {
  state_004[0] = query;
  return rerenderPanel(/* () */0);
}

function jsUpdateEmacsBody(raw) {
  return updateBody(/* record */Block.record([
                "maxHeight",
                "raw"
              ], [
                state_001[0][/* maxHeight */0],
                Block.variant("RawEmacs", 0, [/* record */Block.record([
                        "kind",
                        "header",
                        "body"
                      ], [
                        raw.kind,
                        raw.header,
                        raw.body
                      ])])
              ]));
}

function jsUpdateJSONBody(raw) {
  return updateBody(/* record */Block.record([
                "maxHeight",
                "raw"
              ], [
                state_001[0][/* maxHeight */0],
                Block.variant("RawJSON", 1, [/* record */Block.record([
                        "kind",
                        "rawJSON",
                        "rawString"
                      ], [
                        raw.kind,
                        raw.rawJSON,
                        raw.rawString
                      ])])
              ]));
}

function jsUpdateHeader(raw) {
  return updateHeader(/* record */Block.record([
                "text",
                "style"
              ], [
                raw.text,
                raw.style
              ]));
}

function jsMountPanel(jsMountTo) {
  var translateJSMountTo = function (jsMountTo) {
    switch (jsMountTo) {
      case "bottom" : 
          return /* ToBottom */0;
      case "pane" : 
          return /* ToPane */1;
      default:
        return /* ToNowhere */2;
    }
  };
  return mountPanel(translateJSMountTo(jsMountTo));
}

function jsUpdateMode(mode) {
  if (mode === "display") {
    return updateMode(/* Display */0);
  } else {
    return updateMode(/* Query */1);
  }
}

function jsUpdateQuery(obj) {
  return updateQuery(/* record */Block.record([
                "placeholder",
                "value"
              ], [
                obj.placeholder,
                obj.value
              ]));
}

exports.EditorNotSet = EditorNotSet;
exports.state = state;
exports.editorRef = editorRef;
exports.createElement = createElement;
exports.renderPanel = renderPanel;
exports.mountPanel = mountPanel;
exports.rerenderPanel = rerenderPanel;
exports.initialize = initialize;
exports.updateHeader = updateHeader;
exports.updateBody = updateBody;
exports.updateMode = updateMode;
exports.updateQuery = updateQuery;
exports.jsUpdateEmacsBody = jsUpdateEmacsBody;
exports.jsUpdateJSONBody = jsUpdateJSONBody;
exports.jsUpdateHeader = jsUpdateHeader;
exports.jsMountPanel = jsMountPanel;
exports.jsUpdateMode = jsUpdateMode;
exports.jsUpdateQuery = jsUpdateQuery;
/* react-dom Not a pure module */
