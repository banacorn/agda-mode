// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Body$AgdaMode = require("./Body.bs.js");
var Type$AgdaMode = require("../../Type.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Dashboard$AgdaMode = require("./Dashboard.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var InputMethod$AgdaMode = require("./InputMethod.bs.js");
var SizingHandle$AgdaMode = require("./SizingHandle.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "maxHeight",
            "isPending",
            "inputMethodActivated"
          ], [
            170,
            false,
            false
          ]);
}

function reducer(action, state) {
  switch (action.tag | 0) {
    case 0 : 
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "maxHeight",
                      "isPending",
                      "inputMethodActivated"
                    ], [
                      action[0],
                      state[/* isPending */1],
                      state[/* inputMethodActivated */2]
                    ])]);
    case 1 : 
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "maxHeight",
                      "isPending",
                      "inputMethodActivated"
                    ], [
                      state[/* maxHeight */0],
                      action[0],
                      state[/* inputMethodActivated */2]
                    ])]);
    case 2 : 
        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                      "maxHeight",
                      "isPending",
                      "inputMethodActivated"
                    ], [
                      state[/* maxHeight */0],
                      state[/* isPending */1],
                      action[0]
                    ])]);
    case 3 : 
        switch (action[0].tag | 0) {
          case 0 : 
              return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                            console.log("JumpToRange");
                            return /* () */0;
                          })]);
          case 1 : 
              return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                            console.log("MouseOver");
                            return /* () */0;
                          })]);
          case 2 : 
              return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                            console.log("MouseOut");
                            return /* () */0;
                          })]);
          
        }
    
  }
}

var component = ReasonReact.reducerComponent("Panel");

function make(editors, element, onMountAtChange, body, header, mountAt, mode, hidden, onEditorConfirm, onEditorFocused, onEditorCancel, onEditorRef, editorPlaceholder, editorValue, interceptAndInsertKey, activateInputMethod, activateSettingsView, onSettingsViewToggle, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var mountAtBottom;
                mountAtBottom = mountAt.tag ? false : true;
                var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* [] */0));
                return ReactDom.createPortal(ReasonReact.element(undefined, undefined, Curry._2(Type$AgdaMode.View[/* MouseEmitter */3][/* Provider */1][/* make */0], (function (ev) {
                                      return Curry._1(self[/* send */3], /* MouseEvent */Block.variant("MouseEvent", 3, [ev]));
                                    }), /* array */[React.createElement("section", {
                                          className: className
                                        }, React.createElement("section", {
                                              className: "panel-heading agda-header-container"
                                            }, ReasonReact.element(undefined, undefined, SizingHandle$AgdaMode.make((function (height) {
                                                        return Curry._1(self[/* send */3], /* UpdateMaxHeight */Block.variant("UpdateMaxHeight", 0, [height]));
                                                      }), (function (height) {
                                                        setTimeout((function (param) {
                                                                Curry._1(self[/* send */3], /* UpdateMaxHeight */Block.variant("UpdateMaxHeight", 0, [height]));
                                                                atom.config.set("agda-mode.maxBodyHeight", String(height));
                                                                return /* () */0;
                                                              }), 0);
                                                        return /* () */0;
                                                      }), mountAtBottom, /* array */[])), ReasonReact.element(undefined, undefined, InputMethod$AgdaMode.make(editors, interceptAndInsertKey, activateInputMethod, (function (activated) {
                                                        return Curry._1(self[/* send */3], /* UpdateInputMethodActivation */Block.variant("UpdateInputMethodActivation", 2, [activated]));
                                                      }), /* array */[])), ReasonReact.element(undefined, undefined, Dashboard$AgdaMode.make(header, match[/* inputMethodActivated */2], match[/* isPending */1], mountAt, onMountAtChange, onSettingsViewToggle, activateSettingsView, /* array */[]))), React.createElement("section", {
                                              className: "agda-body-container"
                                            }, ReasonReact.element(undefined, undefined, Body$AgdaMode.make(body, mode !== /* Display */0, mountAtBottom, /* array */[])), ReasonReact.element(undefined, undefined, MiniEditor$AgdaMode.make(editorValue, editorPlaceholder, mode !== /* Query */1, "agda", onEditorConfirm, Caml_option.some(onEditorCancel), Caml_option.some((function () {
                                                            return Curry._1(onEditorFocused, true);
                                                          })), Caml_option.some((function () {
                                                            return Curry._1(onEditorFocused, false);
                                                          })), onEditorRef, /* array */[]))))])), element);
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
/* component Not a pure module */
