// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Util$AgdaMode = require("./Util.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

function occurrence(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "GuardPos" : 
                      return /* GuardPos */4;
                  case "JustNeg" : 
                      return /* JustNeg */1;
                  case "JustPos" : 
                      return /* JustPos */2;
                  case "Mixed" : 
                      return /* Mixed */0;
                  case "StrictPos" : 
                      return /* StrictPos */3;
                  case "Unused" : 
                      return /* Unused */5;
                  default:
                    return Pervasives.failwith("unknown kind of Occurrence");
                }
              }), Json_decode.string, param);
}

var TypeCheckingPositivity = /* module */Block.localModule(["occurrence"], [occurrence]);

function position(param) {
  return Json_decode.andThen((function (tup, param) {
                return /* record */Block.record([
                          "pos",
                          "line",
                          "col"
                        ], [
                          Caml_array.caml_array_get(tup, 2),
                          Caml_array.caml_array_get(tup, 0),
                          Caml_array.caml_array_get(tup, 1)
                        ]);
              }), (function (param) {
                return Json_decode.array(Json_decode.$$int, param);
              }), param);
}

function interval(json) {
  return /* record */Block.record([
            "start",
            "end_"
          ], [
            Json_decode.field("start", position, json),
            Json_decode.field("end", position, json)
          ]);
}

function range(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "NoRange" : 
                      return /* NoRange */0;
                  case "Range" : 
                      return /* Range */Block.simpleVariant("Range", [
                                Json_decode.field("source", (function (param) {
                                        return Json_decode.optional(Json_decode.string, param);
                                      }), json),
                                Json_decode.field("intervals", (function (param) {
                                        return Json_decode.list(interval, param);
                                      }), json)
                              ]);
                  default:
                    return Pervasives.failwith("unknown kind of Range");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

var Position = /* module */Block.localModule([
    "position",
    "interval",
    "range"
  ], [
    position,
    interval,
    range
  ]);

function parseWarning(json) {
  return /* OverlappingTokensWarning */Block.simpleVariant("OverlappingTokensWarning", [Json_decode.field("range", range, json)]);
}

var Parser = /* module */Block.localModule(["parseWarning"], [parseWarning]);

function projOrigin(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "ProjPostfix" : 
                      return /* ProjPostfix */1;
                  case "ProjPrefix" : 
                      return /* ProjPrefix */0;
                  case "ProjSystem" : 
                      return /* ProjSystem */2;
                  default:
                    return Pervasives.failwith("unknown kind of ProjOrigin");
                }
              }), Json_decode.string, param);
}

function positionInName(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "Beginning" : 
                      return /* Beginning */0;
                  case "End" : 
                      return /* End */2;
                  case "Middle" : 
                      return /* Middle */1;
                  default:
                    return Pervasives.failwith("unknown kind of PositionInName");
                }
              }), Json_decode.string, param);
}

function importedName_(decoderA, decoderB) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "ImportedModule" : 
                          return /* ImportedModule */Block.variant("ImportedModule", 0, [Json_decode.field("value", decoderB, json)]);
                      case "ImportedName" : 
                          return /* ImportedName */Block.variant("ImportedName", 1, [Json_decode.field("value", decoderA, json)]);
                      default:
                        return Pervasives.failwith("unknown kind of ImportedName_");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function renaming_(decoderA, decoderB, json) {
  return /* record */Block.record([
            "from",
            "to_",
            "range"
          ], [
            Json_decode.field("from", importedName_(decoderA, decoderB), json),
            Json_decode.field("to", importedName_(decoderA, decoderB), json),
            Json_decode.field("range", range, json)
          ]);
}

function using_(decoderA, decoderB) {
  return (function (param) {
      return Json_decode.withDefault(/* UseEverything */0, (function (json) {
                    var partial_arg = importedName_(decoderA, decoderB);
                    return /* Using */Block.simpleVariant("Using", [Json_decode.field("importedNames", (function (param) {
                                      return Json_decode.list(partial_arg, param);
                                    }), json)]);
                  }), param);
    });
}

function importDirective_(decoderA, decoderB, json) {
  var partial_arg = importedName_(decoderA, decoderB);
  return /* record */Block.record([
            "range",
            "using",
            "hiding",
            "impRenaming",
            "publicOpen"
          ], [
            Json_decode.field("range", range, json),
            Json_decode.field("using", using_(decoderA, decoderB), json),
            Json_decode.field("hiding", (function (param) {
                    return Json_decode.list(partial_arg, param);
                  }), json),
            Json_decode.field("impRenaming", (function (param) {
                    return Json_decode.list((function (param) {
                                  return renaming_(decoderA, decoderB, param);
                                }), param);
                  }), json),
            Json_decode.field("publicOpen", Json_decode.bool, json)
          ]);
}

function terminationCheck(decoder) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "NoTerminationCheck" : 
                          return /* NoTerminationCheck */1;
                      case "NonTerminating" : 
                          return /* NonTerminating */2;
                      case "Terminating" : 
                          return /* Terminating */3;
                      case "TerminationCheck" : 
                          return /* TerminationCheck */0;
                      case "TerminationMeasure" : 
                          return /* TerminationMeasure */Block.simpleVariant("TerminationMeasure", [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("value", decoder, json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of TerminationCheck");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function induction(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "CoInductive" : 
                      return /* CoInductive */1;
                  case "Inductive" : 
                      return /* Inductive */0;
                  default:
                    return Pervasives.failwith("unknown kind of Induction");
                }
              }), Json_decode.string, param);
}

function isInstance(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "InstanceDef" : 
                      return /* InstanceDef */0;
                  case "NotInstanceDef" : 
                      return /* NotInstanceDef */1;
                  default:
                    return Pervasives.failwith("unknown kind of IsInstance");
                }
              }), Json_decode.string, param);
}

function hasEta(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "NoEta" : 
                      return /* NoEta */0;
                  case "YesEta" : 
                      return /* YesEta */1;
                  default:
                    return Pervasives.failwith("unknown kind of HasEta");
                }
              }), Json_decode.string, param);
}

function overlappable(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "NoOverlap" : 
                      return /* NoOverlap */1;
                  case "YesOverlap" : 
                      return /* YesOverlap */0;
                  default:
                    return Pervasives.failwith("unknown kind of Overlappable");
                }
              }), Json_decode.string, param);
}

function hiding(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "Hidden" : 
                      return /* Hidden */0;
                  case "Instance" : 
                      return /* Instance */Block.simpleVariant("Instance", [Json_decode.field("overlappable", overlappable, json)]);
                  case "NotHidden" : 
                      return /* NotHidden */1;
                  default:
                    return Pervasives.failwith("unknown kind of Hidden");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function withHiding(decoder, json) {
  return /* WithHiding */Block.simpleVariant("WithHiding", [
            Json_decode.field("hiding", hiding, json),
            Json_decode.field("value", decoder, json)
          ]);
}

function relevance(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "Irrelevant" : 
                      return /* Irrelevant */2;
                  case "NonStrict" : 
                      return /* NonStrict */1;
                  case "Relevant" : 
                      return /* Relevant */0;
                  default:
                    return Pervasives.failwith("unknown kind of Relevance");
                }
              }), Json_decode.string, param);
}

function quantity(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "Quantity0" : 
                      return /* Quantity0 */0;
                  case "QuantityOmega" : 
                      return /* QuantityOmega */1;
                  default:
                    return Pervasives.failwith("unknown kind of Quantity");
                }
              }), Json_decode.string, param);
}

function modality(json) {
  return /* record */Block.record([
            "relevance",
            "quantity"
          ], [
            Json_decode.field("relevance", relevance, json),
            Json_decode.field("quantity", quantity, json)
          ]);
}

function origin(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "CaseSplit" : 
                      return /* CaseSplit */3;
                  case "Inserted" : 
                      return /* Inserted */1;
                  case "Reflected" : 
                      return /* Reflected */2;
                  case "Substitution" : 
                      return /* Substitution */4;
                  case "UserWritten" : 
                      return /* UserWritten */0;
                  default:
                    return Pervasives.failwith("unknown kind of Origon");
                }
              }), Json_decode.string, param);
}

function hiding$1(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "Hidden" : 
                      return /* Hidden */0;
                  case "Instance" : 
                      return /* Instance */Block.simpleVariant("Instance", [Json_decode.field("overlappable", overlappable, json)]);
                  case "NotHidden" : 
                      return /* NotHidden */1;
                  default:
                    return Pervasives.failwith("unknown kind of Hiding");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function access(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "OnlyQualified" : 
                      return /* OnlyQualified */1;
                  case "PrivateAccess" : 
                      return /* PrivateAccess */Block.simpleVariant("PrivateAccess", [Json_decode.field("origin", origin, json)]);
                  case "PublicAccess" : 
                      return /* PublicAccess */0;
                  default:
                    return Pervasives.failwith("unknown kind of Access");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function freeVariables(param) {
  return Json_decode.withDefault(/* UnknownFVs */0, (function (json) {
                return /* KnownFVs */Block.simpleVariant("KnownFVs", [Json_decode.array(Json_decode.$$int, json)]);
              }), param);
}

function argInfo(json) {
  return /* record */Block.record([
            "hiding",
            "modality",
            "origin",
            "freeVariables"
          ], [
            Json_decode.field("hiding", hiding$1, json),
            Json_decode.field("modality", modality, json),
            Json_decode.field("origin", origin, json),
            Json_decode.field("freeVars", freeVariables, json)
          ]);
}

function arg(decoder, json) {
  return /* Arg */Block.simpleVariant("Arg", [
            Json_decode.field("argInfo", argInfo, json),
            Json_decode.field("value", decoder, json)
          ]);
}

function ranged(decoder, json) {
  return /* Ranged */Block.simpleVariant("Ranged", [
            Json_decode.field("range", range, json),
            Json_decode.field("value", decoder, json)
          ]);
}

function named(decoder, json) {
  return /* Named */Block.simpleVariant("Named", [
            Json_decode.field("name", (function (param) {
                    return Json_decode.optional((function (param) {
                                  return ranged(Json_decode.string, param);
                                }), param);
                  }), json),
            Json_decode.field("value", decoder, json)
          ]);
}

function namedArg(decoder) {
  return (function (param) {
      return arg((function (param) {
                    return named(decoder, param);
                  }), param);
    });
}

function dataOrRecord(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "IsData" : 
                      return /* IsData */0;
                  case "IsRecord" : 
                      return /* IsRecord */1;
                  default:
                    return Pervasives.failwith("unknown kind of DataOrRecord");
                }
              }), Json_decode.string, param);
}

var CommonPrim = /* module */Block.localModule([
    "projOrigin",
    "positionInName",
    "importedName_",
    "renaming_",
    "using_",
    "importDirective_",
    "terminationCheck",
    "induction",
    "isInstance",
    "hasEta",
    "overlappable",
    "withHiding",
    "relevance",
    "quantity",
    "modality",
    "origin",
    "hiding",
    "access",
    "freeVariables",
    "argInfo",
    "arg",
    "ranged",
    "named",
    "namedArg",
    "dataOrRecord"
  ], [
    projOrigin,
    positionInName,
    importedName_,
    renaming_,
    using_,
    importDirective_,
    terminationCheck,
    induction,
    isInstance,
    hasEta,
    overlappable,
    withHiding,
    relevance,
    quantity,
    modality,
    origin,
    hiding$1,
    access,
    freeVariables,
    argInfo,
    arg,
    ranged,
    named,
    namedArg,
    dataOrRecord
  ]);

function genPart(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "BindHole" : 
                      return /* BindHole */Block.variant("BindHole", 0, [Json_decode.field("position", Json_decode.$$int, json)]);
                  case "IdPart" : 
                      return /* IdPart */Block.variant("IdPart", 3, [Json_decode.field("rawName", Json_decode.string, json)]);
                  case "NormalHole" : 
                      return /* NormalHole */Block.variant("NormalHole", 1, [Json_decode.field("position", (function (param) {
                                        return arg((function (param) {
                                                      return named(Json_decode.$$int, param);
                                                    }), param);
                                      }), json)]);
                  case "WildHole" : 
                      return /* WildHole */Block.variant("WildHole", 2, [Json_decode.field("position", Json_decode.$$int, json)]);
                  default:
                    return Pervasives.failwith("unknown kind of GenPart");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function notation(param) {
  return Json_decode.list(genPart, param);
}

var Notation = /* module */Block.localModule([
    "genPart",
    "notation"
  ], [
    genPart,
    notation
  ]);

function precedenceLevel(param) {
  return Json_decode.withDefault(/* Unrelated */0, (function (json) {
                return /* Related */Block.simpleVariant("Related", [Json_decode.$$int(json)]);
              }), param);
}

function associativity(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "LeftAssoc" : 
                      return /* LeftAssoc */1;
                  case "NonAssoc" : 
                      return /* NonAssoc */0;
                  case "RightAssoc" : 
                      return /* RightAssoc */2;
                  default:
                    return Pervasives.failwith("unknown kind of Sssociativity");
                }
              }), Json_decode.string, param);
}

function fixity(json) {
  return /* record */Block.record([
            "range",
            "level",
            "assoc"
          ], [
            Json_decode.field("range", range, json),
            Json_decode.field("level", precedenceLevel, json),
            Json_decode.field("assoc", associativity, json)
          ]);
}

function fixity2(json) {
  return /* record */Block.record([
            "fixity",
            "notation",
            "range"
          ], [
            Json_decode.field("fixity", fixity, json),
            Json_decode.field("notation", notation, json),
            Json_decode.field("range", range, json)
          ]);
}

var Fixity = /* module */Block.localModule([
    "precedenceLevel",
    "associativity",
    "fixity",
    "fixity2"
  ], [
    precedenceLevel,
    associativity,
    fixity,
    fixity2
  ]);

function nameId(json) {
  return /* NameId */Block.simpleVariant("NameId", [
            Json_decode.field("name", Json_decode.$$int, json),
            Json_decode.field("module", Json_decode.$$int, json)
          ]);
}

function namePart(param) {
  return Json_decode.withDefault(/* Hole */0, (function (json) {
                return /* Id */Block.simpleVariant("Id", [Json_decode.string(json)]);
              }), param);
}

function name(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "Name" : 
                      return /* Name */Block.variant("Name", 0, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("parts", (function (param) {
                                        return Json_decode.list(namePart, param);
                                      }), json)
                              ]);
                  case "NoName" : 
                      return /* NoName */Block.variant("NoName", 1, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", nameId, json)
                              ]);
                  default:
                    return Pervasives.failwith("unknown kind of Name");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function qname(param) {
  return Json_decode.andThen((function (names, param) {
                return /* QName */Block.simpleVariant("QName", [
                          Util$AgdaMode.List_[/* init */1](names),
                          Util$AgdaMode.List_[/* last */2](names)
                        ]);
              }), (function (param) {
                return Json_decode.list(name, param);
              }), param);
}

function boundName(json) {
  return /* record */Block.record([
            "name",
            "label",
            "fixity"
          ], [
            Json_decode.field("name", name, json),
            Json_decode.field("label", name, json),
            Json_decode.field("fixity", fixity2, json)
          ]);
}

var Name = /* module */Block.localModule([
    "nameId",
    "namePart",
    "name",
    "qname",
    "boundName"
  ], [
    nameId,
    namePart,
    name,
    qname,
    boundName
  ]);

function literal(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "LitChar" : 
                      return /* LitChar */Block.variant("LitChar", 4, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.$$char, json)
                              ]);
                  case "LitFloat" : 
                      return /* LitFloat */Block.variant("LitFloat", 2, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.$$float, json)
                              ]);
                  case "LitMeta" : 
                      return /* LitMeta */Block.variant("LitMeta", 6, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.string, json),
                                Json_decode.field("value", Json_decode.$$int, json)
                              ]);
                  case "LitNat" : 
                      return /* LitNat */Block.variant("LitNat", 0, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.$$int, json)
                              ]);
                  case "LitQName" : 
                      return /* LitQName */Block.variant("LitQName", 5, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.string, json)
                              ]);
                  case "LitString" : 
                      return /* LitString */Block.variant("LitString", 3, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.string, json)
                              ]);
                  case "LitWord64" : 
                      return /* LitWord64 */Block.variant("LitWord64", 1, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("value", Json_decode.$$int, json)
                              ]);
                  default:
                    return Pervasives.failwith("unknown kind of Literal");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

var Literal = /* module */Block.localModule(["literal"], [literal]);

function declarationWarning(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "EmptyAbstract" : 
                      return /* EmptyAbstract */Block.variant("EmptyAbstract", 0, [Json_decode.field("range", range, json)]);
                  case "EmptyInstance" : 
                      return /* EmptyInstance */Block.variant("EmptyInstance", 1, [Json_decode.field("range", range, json)]);
                  case "EmptyMacro" : 
                      return /* EmptyMacro */Block.variant("EmptyMacro", 2, [Json_decode.field("range", range, json)]);
                  case "EmptyMutual" : 
                      return /* EmptyMutual */Block.variant("EmptyMutual", 3, [Json_decode.field("range", range, json)]);
                  case "EmptyPostulate" : 
                      return /* EmptyPostulate */Block.variant("EmptyPostulate", 4, [Json_decode.field("range", range, json)]);
                  case "EmptyPrivate" : 
                      return /* EmptyPrivate */Block.variant("EmptyPrivate", 5, [Json_decode.field("range", range, json)]);
                  case "InvalidCatchallPragma" : 
                      return /* InvalidCatchallPragma */Block.variant("InvalidCatchallPragma", 6, [Json_decode.field("range", range, json)]);
                  case "InvalidNoPositivityCheckPragma" : 
                      return /* InvalidNoPositivityCheckPragma */Block.variant("InvalidNoPositivityCheckPragma", 7, [Json_decode.field("range", range, json)]);
                  case "InvalidNoUniverseCheckPragma" : 
                      return /* InvalidNoUniverseCheckPragma */Block.variant("InvalidNoUniverseCheckPragma", 8, [Json_decode.field("range", range, json)]);
                  case "InvalidTerminationCheckPragma" : 
                      return /* InvalidTerminationCheckPragma */Block.variant("InvalidTerminationCheckPragma", 9, [Json_decode.field("range", range, json)]);
                  case "MissingDefinitions" : 
                      return /* MissingDefinitions */Block.variant("MissingDefinitions", 10, [Json_decode.field("names", (function (param) {
                                        return Json_decode.list(name, param);
                                      }), json)]);
                  case "NotAllowedInMutual" : 
                      return /* NotAllowedInMutual */Block.variant("NotAllowedInMutual", 11, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", Json_decode.string, json)
                              ]);
                  case "PolarityPragmasButNotPostulates" : 
                      return /* PolarityPragmasButNotPostulates */Block.variant("PolarityPragmasButNotPostulates", 12, [Json_decode.field("names", (function (param) {
                                        return Json_decode.list(name, param);
                                      }), json)]);
                  case "PragmaNoTerminationCheck" : 
                      return /* PragmaNoTerminationCheck */Block.variant("PragmaNoTerminationCheck", 13, [Json_decode.field("range", range, json)]);
                  case "UnknownFixityInMixfixDecl" : 
                      return /* UnknownFixityInMixfixDecl */Block.variant("UnknownFixityInMixfixDecl", 14, [Json_decode.field("names", (function (param) {
                                        return Json_decode.list(name, param);
                                      }), json)]);
                  case "UnknownNamesInFixityDecl" : 
                      return /* UnknownNamesInFixityDecl */Block.variant("UnknownNamesInFixityDecl", 15, [Json_decode.field("names", (function (param) {
                                        return Json_decode.list(name, param);
                                      }), json)]);
                  case "UnknownNamesInPolarityPragmas" : 
                      return /* UnknownNamesInPolarityPragmas */Block.variant("UnknownNamesInPolarityPragmas", 16, [Json_decode.field("names", (function (param) {
                                        return Json_decode.list(name, param);
                                      }), json)]);
                  case "UselessAbstract" : 
                      return /* UselessAbstract */Block.variant("UselessAbstract", 17, [Json_decode.field("range", range, json)]);
                  case "UselessInstance" : 
                      return /* UselessInstance */Block.variant("UselessInstance", 18, [Json_decode.field("range", range, json)]);
                  case "UselessPrivate" : 
                      return /* UselessPrivate */Block.variant("UselessPrivate", 19, [Json_decode.field("range", range, json)]);
                  default:
                    return Pervasives.failwith("unknown kind of DeclarationWarning");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function importDirective(param) {
  return importDirective_(name, name, param);
}

function asName(json) {
  return /* record */Block.record([
            "name",
            "range"
          ], [
            Json_decode.field("name", name, json),
            Json_decode.field("range", range, json)
          ]);
}

function openShortHand(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "DoOpen" : 
                      return /* DoOpen */0;
                  case "DontOpen" : 
                      return /* DontOpen */1;
                  default:
                    return Pervasives.failwith("unknown kind of OpenShortHand");
                }
              }), Json_decode.string, param);
}

function expr(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "AbsurdLam" : 
                          return /* AbsurdLam */Block.variant("AbsurdLam", 11, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("hiding", hiding$1, json)
                                  ]);
                      case "App" : 
                          var decoder = expr(/* () */0);
                          return /* App */Block.variant("App", 5, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", expr(/* () */0), json),
                                    Json_decode.field("args", (function (param) {
                                            return arg((function (param) {
                                                          return named(decoder, param);
                                                        }), param);
                                          }), json)
                                  ]);
                      case "DoBlock" : 
                          var partial_arg = doStmt(/* () */0);
                          return /* DoBlock */Block.variant("DoBlock", 24, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("dostmts", (function (param) {
                                            return Json_decode.list(partial_arg, param);
                                          }), json)
                                  ]);
                      case "ExtendedLam" : 
                          var partial_arg$1 = lamBinding(/* () */0);
                          return /* ExtendedLam */Block.variant("ExtendedLam", 12, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("clauses", (function (param) {
                                            return Json_decode.list(partial_arg$1, param);
                                          }), json)
                                  ]);
                      case "Fun" : 
                          var partial_arg$2 = expr(/* () */0);
                          return /* Fun */Block.variant("Fun", 13, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("arg", (function (param) {
                                            return arg(partial_arg$2, param);
                                          }), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "HiddenArg" : 
                          var partial_arg$3 = expr(/* () */0);
                          return /* HiddenArg */Block.variant("HiddenArg", 8, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", (function (param) {
                                            return named(partial_arg$3, param);
                                          }), json)
                                  ]);
                      case "Ident" : 
                          return /* Ident */Block.variant("Ident", 0, [Json_decode.field("name", qname, json)]);
                      case "IdiomBrackets" : 
                          return /* IdiomBrackets */Block.variant("IdiomBrackets", 23, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "InstanceArg" : 
                          var partial_arg$4 = expr(/* () */0);
                          return /* InstanceArg */Block.variant("InstanceArg", 9, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", (function (param) {
                                            return named(partial_arg$4, param);
                                          }), json)
                                  ]);
                      case "Lam" : 
                          var partial_arg$5 = lamBinding(/* () */0);
                          return /* Lam */Block.variant("Lam", 10, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("bindings", (function (param) {
                                            return Json_decode.list(partial_arg$5, param);
                                          }), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "Let" : 
                          var partial_arg$6 = declaration(/* () */0);
                          var partial_arg$7 = expr(/* () */0);
                          return /* Let */Block.variant("Let", 21, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$6, param);
                                          }), json),
                                    Json_decode.field("expr", (function (param) {
                                            return Json_decode.optional(partial_arg$7, param);
                                          }), json)
                                  ]);
                      case "Lit" : 
                          return /* Lit */Block.variant("Lit", 1, [Json_decode.field("literal", literal, json)]);
                      case "OpApp" : 
                          var decoder$1 = opApp(/* () */0);
                          var partial_arg$8 = function (param) {
                            return arg((function (param) {
                                          return named(decoder$1, param);
                                        }), param);
                          };
                          return /* OpApp */Block.variant("OpApp", 6, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("args", (function (param) {
                                            return Json_decode.list(partial_arg$8, param);
                                          }), json)
                                  ]);
                      case "Paren" : 
                          return /* Paren */Block.variant("Paren", 22, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "Pi" : 
                          return /* Pi */Block.variant("Pi", 14, [
                                    Json_decode.field("telescope", telescope, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "Prop" : 
                          return /* Prop */Block.variant("Prop", 16, [Json_decode.field("range", range, json)]);
                      case "PropN" : 
                          return /* PropN */Block.variant("PropN", 18, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("level", Json_decode.$$int, json)
                                  ]);
                      case "QuestionMark" : 
                          return /* QuestionMark */Block.variant("QuestionMark", 2, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("index", (function (param) {
                                            return Json_decode.optional(Json_decode.$$int, param);
                                          }), json)
                                  ]);
                      case "RawApp" : 
                          var partial_arg$9 = expr(/* () */0);
                          return /* RawApp */Block.variant("RawApp", 4, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("exprs", (function (param) {
                                            return Json_decode.list(partial_arg$9, param);
                                          }), json)
                                  ]);
                      case "Rec" : 
                          var partial_arg$10 = recordAssignment(/* () */0);
                          return /* Rec */Block.variant("Rec", 19, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("assignments", (function (param) {
                                            return Json_decode.list(partial_arg$10, param);
                                          }), json)
                                  ]);
                      case "RecUpdate" : 
                          return /* RecUpdate */Block.variant("RecUpdate", 20, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", expr(/* () */0), json),
                                    Json_decode.field("assignments", (function (param) {
                                            return Json_decode.list(fieldAssignmentExpr, param);
                                          }), json)
                                  ]);
                      case "Set" : 
                          return /* Set */Block.variant("Set", 15, [Json_decode.field("range", range, json)]);
                      case "SetN" : 
                          return /* SetN */Block.variant("SetN", 17, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("level", Json_decode.$$int, json)
                                  ]);
                      case "Underscore" : 
                          return /* Underscore */Block.variant("Underscore", 3, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", (function (param) {
                                            return Json_decode.optional(Json_decode.string, param);
                                          }), json)
                                  ]);
                      case "WithApp" : 
                          var partial_arg$11 = expr(/* () */0);
                          return /* WithApp */Block.variant("WithApp", 7, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", expr(/* () */0), json),
                                    Json_decode.field("exprs", (function (param) {
                                            return Json_decode.list(partial_arg$11, param);
                                          }), json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of Expr");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function declaration(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "Abstract" : 
                          var partial_arg = declaration(/* () */0);
                          return /* Abstract */Block.variant("Abstract", 12, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg, param);
                                          }), json)
                                  ]);
                      case "Data" : 
                          var partial_arg$1 = lamBinding(/* () */0);
                          var partial_arg$2 = expr(/* () */0);
                          var partial_arg$3 = declaration(/* () */0);
                          return /* Data */Block.variant("Data", 5, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("induction", induction, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("bindings", (function (param) {
                                            return Json_decode.list(partial_arg$1, param);
                                          }), json),
                                    Json_decode.field("expr", (function (param) {
                                            return Json_decode.optional(partial_arg$2, param);
                                          }), json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$3, param);
                                          }), json)
                                  ]);
                      case "DataSig" : 
                          var partial_arg$4 = lamBinding(/* () */0);
                          return /* DataSig */Block.variant("DataSig", 4, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("induction", induction, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("bindings", (function (param) {
                                            return Json_decode.list(partial_arg$4, param);
                                          }), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "Field" : 
                          var partial_arg$5 = expr(/* () */0);
                          return /* Field */Block.variant("Field", 2, [
                                    Json_decode.field("isInstance", isInstance, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("arg", (function (param) {
                                            return arg(partial_arg$5, param);
                                          }), json)
                                  ]);
                      case "FunClause" : 
                          var partial_arg$6 = declaration(/* () */0);
                          return /* FunClause */Block.variant("FunClause", 3, [
                                    Json_decode.field("LHS", lhs, json),
                                    Json_decode.field("RHS", rhs_(expr(/* () */0)), json),
                                    Json_decode.field("whereClause", whereClause_((function (param) {
                                                return Json_decode.list(partial_arg$6, param);
                                              })), json),
                                    Json_decode.field("catchAll", Json_decode.bool, json)
                                  ]);
                      case "Generalize" : 
                          return /* Generalize */Block.variant("Generalize", 1, [
                                    Json_decode.field("argInfo", argInfo, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "Import" : 
                          return /* Import */Block.variant("Import", 19, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("asName", (function (param) {
                                            return Json_decode.optional(asName, param);
                                          }), json),
                                    Json_decode.field("openShortHand", openShortHand, json),
                                    Json_decode.field("importDirective", importDirective, json)
                                  ]);
                      case "Infix" : 
                          return /* Infix */Block.variant("Infix", 8, [
                                    Json_decode.field("fixity", fixity, json),
                                    Json_decode.field("names", (function (param) {
                                            return Json_decode.list(name, param);
                                          }), json)
                                  ]);
                      case "InstanceB" : 
                          var partial_arg$7 = declaration(/* () */0);
                          return /* InstanceB */Block.variant("InstanceB", 14, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$7, param);
                                          }), json)
                                  ]);
                      case "Macro" : 
                          var partial_arg$8 = declaration(/* () */0);
                          return /* Macro */Block.variant("Macro", 15, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$8, param);
                                          }), json)
                                  ]);
                      case "Module" : 
                          var partial_arg$9 = declaration(/* () */0);
                          return /* Module */Block.variant("Module", 21, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("bindings", telescope, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$9, param);
                                          }), json)
                                  ]);
                      case "ModuleMacro" : 
                          return /* ModuleMacro */Block.variant("ModuleMacro", 20, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("moduleApp", moduleApplication(/* () */0), json),
                                    Json_decode.field("openShortHand", openShortHand, json),
                                    Json_decode.field("importDirective", importDirective, json)
                                  ]);
                      case "Mutual" : 
                          var partial_arg$10 = declaration(/* () */0);
                          return /* Mutual */Block.variant("Mutual", 11, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$10, param);
                                          }), json)
                                  ]);
                      case "Open" : 
                          return /* Open */Block.variant("Open", 18, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("importDirective", importDirective, json)
                                  ]);
                      case "PatternSyn" : 
                          return /* PatternSyn */Block.variant("PatternSyn", 10, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("args", (function (param) {
                                            return Json_decode.list((function (param) {
                                                          return arg(name, param);
                                                        }), param);
                                          }), json),
                                    Json_decode.field("pattern", pattern(/* () */0), json)
                                  ]);
                      case "Postulate" : 
                          var partial_arg$11 = declaration(/* () */0);
                          return /* Postulate */Block.variant("Postulate", 16, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$11, param);
                                          }), json)
                                  ]);
                      case "Pragma" : 
                          return /* Pragma */Block.variant("Pragma", 24, [Json_decode.field("pragma", pragma(/* () */0), json)]);
                      case "Primitive" : 
                          var partial_arg$12 = declaration(/* () */0);
                          return /* Primitive */Block.variant("Primitive", 17, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$12, param);
                                          }), json)
                                  ]);
                      case "Private" : 
                          var partial_arg$13 = declaration(/* () */0);
                          return /* Private */Block.variant("Private", 13, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("origin", origin, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$13, param);
                                          }), json)
                                  ]);
                      case "Record" : 
                          var partial_arg$14 = lamBinding(/* () */0);
                          var partial_arg$15 = expr(/* () */0);
                          var partial_arg$16 = declaration(/* () */0);
                          return /* Record */Block.variant("Record", 7, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("induction", (function (param) {
                                            return Json_decode.optional((function (param) {
                                                          return ranged(induction, param);
                                                        }), param);
                                          }), json),
                                    Json_decode.field("hasEta", (function (param) {
                                            return Json_decode.optional(hasEta, param);
                                          }), json),
                                    Json_decode.field("instancePairs", (function (param) {
                                            return Json_decode.optional((function (param) {
                                                          return Json_decode.pair(name, isInstance, param);
                                                        }), param);
                                          }), json),
                                    Json_decode.field("bindings", (function (param) {
                                            return Json_decode.list(partial_arg$14, param);
                                          }), json),
                                    Json_decode.field("expr", (function (param) {
                                            return Json_decode.optional(partial_arg$15, param);
                                          }), json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$16, param);
                                          }), json)
                                  ]);
                      case "RecordSig" : 
                          var partial_arg$17 = lamBinding(/* () */0);
                          return /* RecordSig */Block.variant("RecordSig", 6, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("bindings", (function (param) {
                                            return Json_decode.list(partial_arg$17, param);
                                          }), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "Syntax" : 
                          return /* Syntax */Block.variant("Syntax", 9, [
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("notation", notation, json)
                                  ]);
                      case "TypeSig" : 
                          return /* TypeSig */Block.variant("TypeSig", 0, [
                                    Json_decode.field("argInfo", argInfo, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "UnquoteDecl" : 
                          return /* UnquoteDecl */Block.variant("UnquoteDecl", 22, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("names", (function (param) {
                                            return Json_decode.list(name, param);
                                          }), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "UnquoteUnquoteDefDecl" : 
                          return /* UnquoteUnquoteDefDecl */Block.variant("UnquoteUnquoteDefDecl", 23, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("names", (function (param) {
                                            return Json_decode.list(name, param);
                                          }), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of Declaration");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function lamBinding(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "DomainFree" : 
                          return /* DomainFree */Block.variant("DomainFree", 0, [
                                    Json_decode.field("argInfo", argInfo, json),
                                    Json_decode.field("name", boundName, json)
                                  ]);
                      case "DomainFull" : 
                          return /* DomainFull */Block.variant("DomainFull", 1, [Json_decode.field("value", typedBindings, json)]);
                      default:
                        return Pervasives.failwith("unknown kind of LamBinding_");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function pattern(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "AbsurdP" : 
                          return /* AbsurdP */Block.variant("AbsurdP", 9, [Json_decode.field("range", range, json)]);
                      case "AppP" : 
                          var decoder = pattern(/* () */0);
                          return /* AppP */Block.variant("AppP", 2, [
                                    Json_decode.field("pattern", pattern(/* () */0), json),
                                    Json_decode.field("arg", (function (param) {
                                            return arg((function (param) {
                                                          return named(decoder, param);
                                                        }), param);
                                          }), json)
                                  ]);
                      case "AsP" : 
                          return /* AsP */Block.variant("AsP", 10, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("pattern", pattern(/* () */0), json)
                                  ]);
                      case "DotP" : 
                          return /* DotP */Block.variant("DotP", 11, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "EllipsisP" : 
                          return /* EllipsisP */Block.variant("EllipsisP", 15, [Json_decode.field("range", range, json)]);
                      case "EqualP" : 
                          var partial_arg = expr(/* () */0);
                          var partial_arg$1 = expr(/* () */0);
                          var partial_arg$2 = function (param) {
                            return Json_decode.pair(partial_arg$1, partial_arg, param);
                          };
                          return /* EqualP */Block.variant("EqualP", 14, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pairs", (function (param) {
                                            return Json_decode.list(partial_arg$2, param);
                                          }), json)
                                  ]);
                      case "HiddenP" : 
                          var partial_arg$3 = pattern(/* () */0);
                          return /* HiddenP */Block.variant("HiddenP", 5, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pattern", (function (param) {
                                            return named(partial_arg$3, param);
                                          }), json)
                                  ]);
                      case "IdentP" : 
                          return /* IdentP */Block.variant("IdentP", 0, [Json_decode.field("name", qname, json)]);
                      case "InstanceP" : 
                          var partial_arg$4 = pattern(/* () */0);
                          return /* InstanceP */Block.variant("InstanceP", 6, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pattern", (function (param) {
                                            return named(partial_arg$4, param);
                                          }), json)
                                  ]);
                      case "LitP" : 
                          return /* LitP */Block.variant("LitP", 12, [Json_decode.field("literal", literal, json)]);
                      case "OpAppP" : 
                          var decoder$1 = pattern(/* () */0);
                          var partial_arg$5 = function (param) {
                            return arg((function (param) {
                                          return named(decoder$1, param);
                                        }), param);
                          };
                          return /* OpAppP */Block.variant("OpAppP", 4, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("args", (function (param) {
                                            return Json_decode.list(partial_arg$5, param);
                                          }), json)
                                  ]);
                      case "ParenP" : 
                          return /* ParenP */Block.variant("ParenP", 7, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pattern", pattern(/* () */0), json)
                                  ]);
                      case "QuoteP" : 
                          return /* QuoteP */Block.variant("QuoteP", 1, [Json_decode.field("range", range, json)]);
                      case "RawAppP" : 
                          var partial_arg$6 = pattern(/* () */0);
                          return /* RawAppP */Block.variant("RawAppP", 3, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("patterns", (function (param) {
                                            return Json_decode.list(partial_arg$6, param);
                                          }), json)
                                  ]);
                      case "RecP" : 
                          return /* RecP */Block.variant("RecP", 13, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("assignments", (function (param) {
                                            return Json_decode.list(fieldAssignmentPattern, param);
                                          }), json)
                                  ]);
                      case "WildP" : 
                          return /* WildP */Block.variant("WildP", 8, [Json_decode.field("range", range, json)]);
                      case "WithP" : 
                          return /* WithP */Block.variant("WithP", 16, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pattern", pattern(/* () */0), json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of Pattern");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function rhs_(decoder) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "AbsurdRHS" : 
                          return /* AbsurdRHS */0;
                      case "RHS" : 
                          return /* RHS */Block.simpleVariant("RHS", [Json_decode.field("value", decoder, json)]);
                      default:
                        return Pervasives.failwith("unknown kind of RHS");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function typedBindings(json) {
  var partial_arg = typedBinding(/* () */0);
  return /* TypedBindings */Block.simpleVariant("TypedBindings", [
            Json_decode.field("range", range, json),
            Json_decode.field("arg", (function (param) {
                    return arg(partial_arg, param);
                  }), json)
          ]);
}

function lamClause(json) {
  var partial_arg = declaration(/* () */0);
  return /* record */Block.record([
            "lhs",
            "rhs",
            "whereClause",
            "catchAll"
          ], [
            Json_decode.field("LHS", lhs, json),
            Json_decode.field("RHS", rhs_(expr(/* () */0)), json),
            Json_decode.field("whereClause", whereClause_((function (param) {
                        return Json_decode.list(partial_arg, param);
                      })), json),
            Json_decode.field("catchAll", Json_decode.bool, json)
          ]);
}

function fieldAssignmentPattern(json) {
  return /* record */Block.record([
            "name",
            "value"
          ], [
            Json_decode.field("name", name, json),
            Json_decode.field("value", pattern(/* () */0), json)
          ]);
}

function fieldAssignmentExpr(json) {
  return /* record */Block.record([
            "name",
            "value"
          ], [
            Json_decode.field("name", name, json),
            Json_decode.field("value", expr(/* () */0), json)
          ]);
}

function moduleAssignment(json) {
  var partial_arg = expr(/* () */0);
  return /* record */Block.record([
            "name",
            "exprs",
            "importDirective"
          ], [
            Json_decode.field("name", qname, json),
            Json_decode.field("exprs", (function (param) {
                    return Json_decode.list(partial_arg, param);
                  }), json),
            Json_decode.field("importDirective", importDirective, json)
          ]);
}

function whereClause_(decoder) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "AnyWhere" : 
                          return /* AnyWhere */Block.variant("AnyWhere", 0, [Json_decode.field("declarations", decoder, json)]);
                      case "NoWhere" : 
                          return /* NoWhere */0;
                      case "SomeWhere" : 
                          return /* SomeWhere */Block.variant("SomeWhere", 1, [
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("access", access, json),
                                    Json_decode.field("declarations", decoder, json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of OpApp");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function lhs(json) {
  var partial_arg = expr(/* () */0);
  var partial_arg$1 = expr(/* () */0);
  return /* record */Block.record([
            "originalPattern",
            "rewriteEqn",
            "withExpr"
          ], [
            Json_decode.field("originalPattern", pattern(/* () */0), json),
            Json_decode.field("rewriteEqn", (function (param) {
                    return Json_decode.list(partial_arg, param);
                  }), json),
            Json_decode.field("withExpr", (function (param) {
                    return Json_decode.list(partial_arg$1, param);
                  }), json)
          ]);
}

function moduleApplication(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "RecordModuleIFS" : 
                          return /* RecordModuleIFS */Block.variant("RecordModuleIFS", 1, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json)
                                  ]);
                      case "SectionApp" : 
                          return /* SectionApp */Block.variant("SectionApp", 0, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("bindings", telescope, json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of ModuleApplication");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function pragma(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "BuiltinPragma" : 
                          return /* BuiltinPragma */Block.variant("BuiltinPragma", 1, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("entity", Json_decode.string, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("fixity", fixity2, json)
                                  ]);
                      case "CatchallPragma" : 
                          return /* CatchallPragma */Block.variant("CatchallPragma", 22, [Json_decode.field("range", range, json)]);
                      case "CompilePragma" : 
                          return /* CompilePragma */Block.variant("CompilePragma", 12, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("backend", Json_decode.string, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("code", Json_decode.string, json)
                                  ]);
                      case "CompiledDataPragma" : 
                          return /* CompiledDataPragma */Block.variant("CompiledDataPragma", 3, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("data", Json_decode.string, json),
                                    Json_decode.field("constructors", (function (param) {
                                            return Json_decode.list(Json_decode.string, param);
                                          }), json)
                                  ]);
                      case "CompiledDataUHCPragma" : 
                          return /* CompiledDataUHCPragma */Block.variant("CompiledDataUHCPragma", 9, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("data", Json_decode.string, json),
                                    Json_decode.field("constructors", (function (param) {
                                            return Json_decode.list(Json_decode.string, param);
                                          }), json)
                                  ]);
                      case "CompiledExportPragma" : 
                          return /* CompiledExportPragma */Block.variant("CompiledExportPragma", 6, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("export", Json_decode.string, json)
                                  ]);
                      case "CompiledJSPragma" : 
                          return /* CompiledJSPragma */Block.variant("CompiledJSPragma", 7, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("js", Json_decode.string, json)
                                  ]);
                      case "CompiledPragma" : 
                          return /* CompiledPragma */Block.variant("CompiledPragma", 5, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("haskell", Json_decode.string, json)
                                  ]);
                      case "CompiledTypePragma" : 
                          return /* CompiledTypePragma */Block.variant("CompiledTypePragma", 4, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("type", Json_decode.string, json)
                                  ]);
                      case "CompiledUHCPragma" : 
                          return /* CompiledUHCPragma */Block.variant("CompiledUHCPragma", 8, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("uhc", Json_decode.string, json)
                                  ]);
                      case "DisplayPragma" : 
                          return /* DisplayPragma */Block.variant("DisplayPragma", 23, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pattern", pattern(/* () */0), json),
                                    Json_decode.field("expr", expr(/* () */0), json)
                                  ]);
                      case "EtaPragma" : 
                          return /* EtaPragma */Block.variant("EtaPragma", 19, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json)
                                  ]);
                      case "ForeignPragma" : 
                          return /* ForeignPragma */Block.variant("ForeignPragma", 11, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("backend", Json_decode.string, json),
                                    Json_decode.field("code", Json_decode.string, json)
                                  ]);
                      case "HaskellCodePragma" : 
                          return /* HaskellCodePragma */Block.variant("HaskellCodePragma", 10, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("code", Json_decode.string, json)
                                  ]);
                      case "ImportPragma" : 
                          return /* ImportPragma */Block.variant("ImportPragma", 16, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("module", Json_decode.string, json)
                                  ]);
                      case "ImportUHCPragma" : 
                          return /* ImportUHCPragma */Block.variant("ImportUHCPragma", 17, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("module", Json_decode.string, json)
                                  ]);
                      case "ImpossiblePragma" : 
                          return /* ImpossiblePragma */Block.variant("ImpossiblePragma", 18, [Json_decode.field("range", range, json)]);
                      case "InjectivePragma" : 
                          return /* InjectivePragma */Block.variant("InjectivePragma", 14, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json)
                                  ]);
                      case "InlinePragma" : 
                          return /* InlinePragma */Block.variant("InlinePragma", 15, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("inline", Json_decode.bool, json),
                                    Json_decode.field("name", qname, json)
                                  ]);
                      case "NoPositivityCheckPragma" : 
                          return /* NoPositivityCheckPragma */Block.variant("NoPositivityCheckPragma", 24, [Json_decode.field("range", range, json)]);
                      case "NoUniverseCheckPragma" : 
                          return /* NoUniverseCheckPragma */Block.variant("NoUniverseCheckPragma", 26, [Json_decode.field("range", range, json)]);
                      case "OptionsPragma" : 
                          return /* OptionsPragma */Block.variant("OptionsPragma", 0, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("options", (function (param) {
                                            return Json_decode.list(Json_decode.string, param);
                                          }), json)
                                  ]);
                      case "PolarityPragma" : 
                          return /* PolarityPragma */Block.variant("PolarityPragma", 25, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", name, json),
                                    Json_decode.field("occurrences", (function (param) {
                                            return Json_decode.list(occurrence, param);
                                          }), json)
                                  ]);
                      case "RewritePragma" : 
                          return /* RewritePragma */Block.variant("RewritePragma", 2, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("names", (function (param) {
                                            return Json_decode.list(qname, param);
                                          }), json)
                                  ]);
                      case "StaticPragma" : 
                          return /* StaticPragma */Block.variant("StaticPragma", 13, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json)
                                  ]);
                      case "TerminationCheckPragma" : 
                          return /* TerminationCheckPragma */Block.variant("TerminationCheckPragma", 20, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", terminationCheck(name), json)
                                  ]);
                      case "WarningOnUsage" : 
                          return /* WarningOnUsage */Block.variant("WarningOnUsage", 21, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("warning", Json_decode.string, json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of Pragma");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function telescope(json) {
  return /* Telescope */Block.simpleVariant("Telescope", [Json_decode.list(typedBindings, json)]);
}

function opApp(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "NoPlaceholder" : 
                          var position = Json_decode.field("position", (function (param) {
                                  return Json_decode.optional(positionInName, param);
                                }), json);
                          var kind$1 = Json_decode.at(/* :: */Block.simpleVariant("::", [
                                    "value",
                                    /* :: */Block.simpleVariant("::", [
                                        "kind",
                                        /* [] */0
                                      ])
                                  ]), Json_decode.string)(json);
                          switch (kind$1) {
                            case "Ordinary" : 
                                return /* Ordinary */Block.variant("Ordinary", 2, [
                                          position,
                                          Json_decode.at(/* :: */Block.simpleVariant("::", [
                                                    "value",
                                                    /* :: */Block.simpleVariant("::", [
                                                        "value",
                                                        /* [] */0
                                                      ])
                                                  ]), expr(/* () */0))(json)
                                        ]);
                            case "SyntaxBindingLambda" : 
                                var partial_arg = lamBinding(/* () */0);
                                return /* SyntaxBindingLambda */Block.variant("SyntaxBindingLambda", 1, [
                                          position,
                                          Json_decode.at(/* :: */Block.simpleVariant("::", [
                                                    "value",
                                                    /* :: */Block.simpleVariant("::", [
                                                        "range",
                                                        /* [] */0
                                                      ])
                                                  ]), range)(json),
                                          Json_decode.at(/* :: */Block.simpleVariant("::", [
                                                    "value",
                                                    /* :: */Block.simpleVariant("::", [
                                                        "binding",
                                                        /* [] */0
                                                      ])
                                                  ]), (function (param) {
                                                    return Json_decode.list(partial_arg, param);
                                                  }))(json),
                                          Json_decode.at(/* :: */Block.simpleVariant("::", [
                                                    "value",
                                                    /* :: */Block.simpleVariant("::", [
                                                        "value",
                                                        /* [] */0
                                                      ])
                                                  ]), expr(/* () */0))(json)
                                        ]);
                            default:
                              return Pervasives.failwith("unknown kind of OpApp");
                          }
                      case "Placeholder" : 
                          return /* Placeholder */Block.variant("Placeholder", 0, [Json_decode.field("position", positionInName, json)]);
                      default:
                        return Pervasives.failwith("unknown kind of OpApp");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function doStmt(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "DoBind" : 
                          return /* DoBind */Block.variant("DoBind", 0, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("pattern", pattern(/* () */0), json),
                                    Json_decode.field("expr", expr(/* () */0), json),
                                    Json_decode.field("clauses", (function (param) {
                                            return Json_decode.list(lamClause, param);
                                          }), json)
                                  ]);
                      case "DoLet" : 
                          var partial_arg = declaration(/* () */0);
                          return /* DoLet */Block.variant("DoLet", 2, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg, param);
                                          }), json)
                                  ]);
                      case "DoThen" : 
                          return /* DoThen */Block.variant("DoThen", 1, [Json_decode.field("expr", expr(/* () */0), json)]);
                      default:
                        return Pervasives.failwith("unknown kind of DoStmt");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function recordAssignment(param) {
  return Json_decode.either((function (json) {
                return /* Left */Block.variant("Left", 0, [Json_decode.field("Left", fieldAssignmentExpr, json)]);
              }), (function (json) {
                return /* Right */Block.variant("Right", 1, [Json_decode.field("Right", moduleAssignment, json)]);
              }));
}

function typedBinding(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "TBind" : 
                          return /* TBind */Block.variant("TBind", 0, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("bindings", (function (param) {
                                            return Json_decode.list((function (param) {
                                                          return withHiding(boundName, param);
                                                        }), param);
                                          }), json),
                                    Json_decode.field("value", expr(/* () */0), json)
                                  ]);
                      case "TLet" : 
                          var partial_arg = declaration(/* () */0);
                          return /* TLet */Block.variant("TLet", 1, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg, param);
                                          }), json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of TypedBinding_");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function whereClause(param) {
  var partial_arg = declaration(/* () */0);
  return whereClause_((function (param) {
                return Json_decode.list(partial_arg, param);
              }));
}

function rhs(param) {
  return rhs_(expr(/* () */0));
}

function elimTerm(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "Apply" : 
                          var partial_arg = expr(/* () */0);
                          return /* Apply */Block.variant("Apply", 0, [Json_decode.field("arg", (function (param) {
                                            return arg(partial_arg, param);
                                          }), json)]);
                      case "IApply" : 
                          return /* IApply */Block.variant("IApply", 2, [
                                    Json_decode.field("endpoint1", expr(/* () */0), json),
                                    Json_decode.field("endpoint2", expr(/* () */0), json),
                                    Json_decode.field("endpoint3", expr(/* () */0), json)
                                  ]);
                      case "Proj" : 
                          return /* Proj */Block.variant("Proj", 1, [
                                    Json_decode.field("projOrigin", projOrigin, json),
                                    Json_decode.field("name", qname, json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of Elim(Term)");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

var Concrete = /* module */Block.localModule([
    "declarationWarning",
    "importDirective",
    "asName",
    "openShortHand",
    "expr",
    "declaration",
    "pragma",
    "moduleApplication",
    "fieldAssignmentExpr",
    "fieldAssignmentPattern",
    "moduleAssignment",
    "recordAssignment",
    "whereClause_",
    "whereClause",
    "opApp",
    "typedBinding",
    "typedBindings",
    "lamBinding",
    "telescope",
    "pattern",
    "doStmt",
    "lhs",
    "rhs_",
    "rhs",
    "lamClause",
    "elimTerm"
  ], [
    declarationWarning,
    importDirective,
    asName,
    openShortHand,
    expr,
    declaration,
    pragma,
    moduleApplication,
    fieldAssignmentExpr,
    fieldAssignmentPattern,
    moduleAssignment,
    recordAssignment,
    whereClause_,
    whereClause,
    opApp,
    typedBinding,
    typedBindings,
    lamBinding,
    telescope,
    pattern,
    doStmt,
    lhs,
    rhs_,
    rhs,
    lamClause,
    elimTerm
  ]);

function conOrigin(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "ConOCon" : 
                      return /* ConOCon */1;
                  case "ConORec" : 
                      return /* ConORec */2;
                  case "ConOSplit" : 
                      return /* ConOSplit */3;
                  case "ConOSystem" : 
                      return /* ConOSystem */0;
                  default:
                    return Pervasives.failwith("unknown kind of ConOrigin");
                }
              }), Json_decode.string, param);
}

function induction$1(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "CoInductive" : 
                      return /* CoInductive */1;
                  case "Inductive" : 
                      return /* Inductive */0;
                  default:
                    return Pervasives.failwith("unknown kind of Induction");
                }
              }), Json_decode.string, param);
}

function dom(decoder, json) {
  return /* record */Block.record([
            "argInfo",
            "finite",
            "value"
          ], [
            Json_decode.field("argInfo", argInfo, json),
            Json_decode.field("finite", Json_decode.bool, json),
            Json_decode.field("value", decoder, json)
          ]);
}

var Common = /* module */Block.localModule([
    "conOrigin",
    "induction",
    "dom"
  ], [
    conOrigin,
    induction$1,
    dom
  ]);

var Syntax = /* module */Block.localModule([
    "Position",
    "Parser",
    "CommonPrim",
    "Notation",
    "Fixity",
    "Name",
    "Literal",
    "Concrete",
    "Common"
  ], [
    Position,
    Parser,
    CommonPrim,
    Notation,
    Fixity,
    Name,
    Literal,
    Concrete,
    Common
  ]);

function comparison(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "CmpEq" : 
                      return /* CmpEq */1;
                  case "CmpLeq" : 
                      return /* CmpLeq */0;
                  default:
                    return Pervasives.failwith("unknown kind of Comparison");
                }
              }), Json_decode.string, param);
}

function call(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "CheckArguments" : 
                      var decoder = expr(/* () */0);
                      var partial_arg = function (param) {
                        return arg((function (param) {
                                      return named(decoder, param);
                                    }), param);
                      };
                      return /* CheckArguments */Block.variant("CheckArguments", 12, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("arguments", (function (param) {
                                        return Json_decode.list(partial_arg, param);
                                      }), json),
                                Json_decode.field("type1", expr(/* () */0), json)
                              ]);
                  case "CheckClause" : 
                      var partial_arg$1 = declaration(/* () */0);
                      return /* CheckClause */Block.variant("CheckClause", 0, [
                                Json_decode.field("type", expr(/* () */0), json),
                                Json_decode.field("clause", (function (param) {
                                        return Json_decode.list(partial_arg$1, param);
                                      }), json)
                              ]);
                  case "CheckConstructor" : 
                      return /* CheckConstructor */Block.variant("CheckConstructor", 16, [
                                Json_decode.field("declarationName", qname, json),
                                Json_decode.field("constructorName", qname, json)
                              ]);
                  case "CheckDataDef" : 
                      return /* CheckDataDef */Block.variant("CheckDataDef", 14, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", name, json)
                              ]);
                  case "CheckDotPattern" : 
                      return /* CheckDotPattern */Block.variant("CheckDotPattern", 5, [
                                Json_decode.field("expr", expr(/* () */0), json),
                                Json_decode.field("type", expr(/* () */0), json)
                              ]);
                  case "CheckExprCall" : 
                      return /* CheckExprCall */Block.variant("CheckExprCall", 4, [
                                Json_decode.field("comparison", comparison, json),
                                Json_decode.field("expr", expr(/* () */0), json),
                                Json_decode.field("type", expr(/* () */0), json)
                              ]);
                  case "CheckFunDefCall" : 
                      return /* CheckFunDefCall */Block.variant("CheckFunDefCall", 17, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", name, json)
                              ]);
                  case "CheckIsEmpty" : 
                      return /* CheckIsEmpty */Block.variant("CheckIsEmpty", 20, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("type", expr(/* () */0), json)
                              ]);
                  case "CheckLetBinding" : 
                      var partial_arg$2 = declaration(/* () */0);
                      return /* CheckLetBinding */Block.variant("CheckLetBinding", 2, [Json_decode.field("binding", (function (param) {
                                        return Json_decode.list(partial_arg$2, param);
                                      }), json)]);
                  case "CheckNamedWhere" : 
                      return /* CheckNamedWhere */Block.variant("CheckNamedWhere", 23, [Json_decode.field("module", qname, json)]);
                  case "CheckPattern" : 
                      return /* CheckPattern */Block.variant("CheckPattern", 1, [
                                Json_decode.field("pattern", pattern(/* () */0), json),
                                Json_decode.field("type", expr(/* () */0), json)
                              ]);
                  case "CheckPatternShadowing" : 
                      var partial_arg$3 = declaration(/* () */0);
                      return /* CheckPatternShadowing */Block.variant("CheckPatternShadowing", 6, [Json_decode.field("clause", (function (param) {
                                        return Json_decode.list(partial_arg$3, param);
                                      }), json)]);
                  case "CheckPragma" : 
                      return /* CheckPragma */Block.variant("CheckPragma", 18, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("pragma", pragma(/* () */0), json)
                              ]);
                  case "CheckPrimitive" : 
                      return /* CheckPrimitive */Block.variant("CheckPrimitive", 19, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", name, json),
                                Json_decode.field("expr", expr(/* () */0), json)
                              ]);
                  case "CheckProjection" : 
                      return /* CheckProjection */Block.variant("CheckProjection", 7, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", qname, json),
                                Json_decode.field("type", expr(/* () */0), json)
                              ]);
                  case "CheckRecDef" : 
                      return /* CheckRecDef */Block.variant("CheckRecDef", 15, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("name", name, json)
                              ]);
                  case "CheckSectionApplication" : 
                      var partial_arg$4 = declaration(/* () */0);
                      return /* CheckSectionApplication */Block.variant("CheckSectionApplication", 22, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("module", qname, json),
                                Json_decode.field("modApp", (function (param) {
                                        return Json_decode.list(partial_arg$4, param);
                                      }), json)
                              ]);
                  case "CheckTargetType" : 
                      return /* CheckTargetType */Block.variant("CheckTargetType", 13, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("infType", expr(/* () */0), json),
                                Json_decode.field("expType", expr(/* () */0), json)
                              ]);
                  case "CheckWithFunctionType" : 
                      return /* CheckWithFunctionType */Block.variant("CheckWithFunctionType", 21, [Json_decode.field("expr", expr(/* () */0), json)]);
                  case "InferDef" : 
                      return /* InferDef */Block.variant("InferDef", 11, [Json_decode.field("name", qname, json)]);
                  case "InferExpr" : 
                      return /* InferExpr */Block.variant("InferExpr", 3, [Json_decode.field("expr", expr(/* () */0), json)]);
                  case "InferVar" : 
                      return /* InferVar */Block.variant("InferVar", 10, [Json_decode.field("name", name, json)]);
                  case "IsTypeCall" : 
                      return /* IsTypeCall */Block.variant("IsTypeCall", 8, [
                                Json_decode.field("expr", expr(/* () */0), json),
                                Json_decode.field("sort", expr(/* () */0), json)
                              ]);
                  case "IsType_" : 
                      return /* IsType_ */Block.variant("IsType_", 9, [Json_decode.field("expr", expr(/* () */0), json)]);
                  case "ModuleContents" : 
                      return /* ModuleContents */1;
                  case "NoHighlighting" : 
                      return /* NoHighlighting */0;
                  case "ScopeCheckDeclaration" : 
                      var partial_arg$5 = declaration(/* () */0);
                      return /* ScopeCheckDeclaration */Block.variant("ScopeCheckDeclaration", 25, [Json_decode.field("declarations", (function (param) {
                                        return Json_decode.list(partial_arg$5, param);
                                      }), json)]);
                  case "ScopeCheckExpr" : 
                      return /* ScopeCheckExpr */Block.variant("ScopeCheckExpr", 24, [Json_decode.field("expr", expr(/* () */0), json)]);
                  case "ScopeCheckLHS" : 
                      return /* ScopeCheckLHS */Block.variant("ScopeCheckLHS", 26, [
                                Json_decode.field("name", qname, json),
                                Json_decode.field("pattern", pattern(/* () */0), json)
                              ]);
                  case "SetRange" : 
                      return /* SetRange */Block.variant("SetRange", 27, [Json_decode.field("range", range, json)]);
                  default:
                    return Pervasives.failwith("unknown kind of Call");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function typeError(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "AmbiguousName" : 
                      return /* AmbiguousName */Block.variant("AmbiguousName", 12, [
                                Json_decode.field("ambiguousName", qname, json),
                                Json_decode.field("couldReferTo", (function (param) {
                                        return Json_decode.list(qname, param);
                                      }), json)
                              ]);
                  case "ClashingDefinition" : 
                      return /* ClashingDefinition */Block.variant("ClashingDefinition", 7, [
                                Json_decode.field("definition", qname, json),
                                Json_decode.field("previouslyAt", range, json)
                              ]);
                  case "GenericDocError" : 
                      return /* GenericDocError */Block.variant("GenericDocError", 0, [Json_decode.field("message", Json_decode.string, json)]);
                  case "GenericError" : 
                      return /* GenericError */Block.variant("GenericError", 1, [Json_decode.field("message", Json_decode.string, json)]);
                  case "ModuleArityMismatch" : 
                      return /* ModuleArityMismatch */Block.variant("ModuleArityMismatch", 8, [
                                Json_decode.field("module", qname, json),
                                Json_decode.field("isParameterized", Json_decode.bool, json),
                                Json_decode.withDefault(undefined, (function (json) {
                                        return Json_decode.field("telescope", telescope, json);
                                      }), json)
                              ]);
                  case "NoRHSRequiresAbsurdPattern" : 
                      var partial_arg = pattern(/* () */0);
                      return /* NoRHSRequiresAbsurdPattern */Block.variant("NoRHSRequiresAbsurdPattern", 9, [Json_decode.field("patterns", (function (param) {
                                        return Json_decode.list(partial_arg, param);
                                      }), json)]);
                  case "NoSuchModule" : 
                      return /* NoSuchModule */Block.variant("NoSuchModule", 11, [Json_decode.field("module", qname, json)]);
                  case "NotInScope" : 
                      return /* NotInScope */Block.variant("NotInScope", 10, [Json_decode.field("names", (function (param) {
                                        return Json_decode.list((function (json) {
                                                      return /* tuple */[
                                                              Json_decode.field("name", qname, json),
                                                              Json_decode.field("suggestions", (function (param) {
                                                                      return Json_decode.list(qname, param);
                                                                    }), json)
                                                            ];
                                                    }), param);
                                      }), json)]);
                  case "ShadowedModule" : 
                      return /* ShadowedModule */Block.variant("ShadowedModule", 3, [
                                Json_decode.field("previous", qname, json),
                                Json_decode.field("duplicated", name, json),
                                Json_decode.field("dataOrRecord", (function (param) {
                                        return Json_decode.optional(dataOrRecord, param);
                                      }), json)
                              ]);
                  case "ShouldBeASort" : 
                      return /* ShouldBeASort */Block.variant("ShouldBeASort", 5, [Json_decode.field("type", expr(/* () */0), json)]);
                  case "ShouldBePi" : 
                      return /* ShouldBePi */Block.variant("ShouldBePi", 4, [Json_decode.field("type", expr(/* () */0), json)]);
                  case "ShouldEndInApplicationOfTheDatatype" : 
                      return /* ShouldEndInApplicationOfTheDatatype */Block.variant("ShouldEndInApplicationOfTheDatatype", 2, [Json_decode.field("type", expr(/* () */0), json)]);
                  case "UnequalTerms" : 
                      return /* UnequalTerms */Block.variant("UnequalTerms", 6, [
                                Json_decode.field("comparison", comparison, json),
                                Json_decode.field("term1", expr(/* () */0), json),
                                Json_decode.field("term2", expr(/* () */0), json),
                                Json_decode.field("type", expr(/* () */0), json),
                                Json_decode.field("reason", Json_decode.string, json)
                              ]);
                  default:
                    return /* UnregisteredTypeError */Block.variant("UnregisteredTypeError", 13, [json]);
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function error(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "Exception" : 
                      return /* Exception */Block.variant("Exception", 1, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("message", Json_decode.string, json)
                              ]);
                  case "IOException" : 
                      return /* IOException */Block.variant("IOException", 2, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("message", Json_decode.string, json)
                              ]);
                  case "PatternError" : 
                      return /* PatternError */Block.variant("PatternError", 3, [Json_decode.field("range", range, json)]);
                  case "TypeError" : 
                      return /* TypeError */Block.variant("TypeError", 0, [
                                Json_decode.field("range", range, json),
                                Json_decode.field("call", (function (param) {
                                        return Json_decode.optional(call, param);
                                      }), json),
                                Json_decode.field("typeError", typeError, json)
                              ]);
                  default:
                    return Pervasives.failwith("unknown kind of TCError");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function terminationError(json) {
  return /* record */Block.record([
            "functions",
            "calls"
          ], [
            Json_decode.field("functions", (function (param) {
                    return Json_decode.list(qname, param);
                  }), json),
            Json_decode.field("calls", (function (param) {
                    return Json_decode.list(qname, param);
                  }), json)
          ]);
}

function polarity(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "Contravariant" : 
                      return /* Contravariant */1;
                  case "Covariant" : 
                      return /* Covariant */0;
                  case "Invariant" : 
                      return /* Invariant */2;
                  case "Nonvariant" : 
                      return /* Nonvariant */3;
                  default:
                    return Pervasives.failwith("unknown kind of Polarity");
                }
              }), Json_decode.string, param);
}

function isForced(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "Forced" : 
                      return /* Forced */0;
                  case "NotForced" : 
                      return /* NotForced */1;
                  default:
                    return Pervasives.failwith("unknown kind of IsForced");
                }
              }), Json_decode.string, param);
}

function where(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "ConArgType" : 
                      return /* ConArgType */Block.variant("ConArgType", 1, [Json_decode.field("name", Json_decode.string, json)]);
                  case "DefArg" : 
                      return /* DefArg */Block.variant("DefArg", 0, [
                                Json_decode.field("name", Json_decode.string, json),
                                Json_decode.field("index", Json_decode.$$int, json)
                              ]);
                  case "InClause" : 
                      return /* InClause */Block.variant("InClause", 3, [Json_decode.field("index", Json_decode.$$int, json)]);
                  case "InDefOf" : 
                      return /* InDefOf */Block.variant("InDefOf", 4, [Json_decode.field("name", Json_decode.string, json)]);
                  case "IndArgType" : 
                      return /* IndArgType */Block.variant("IndArgType", 2, [Json_decode.field("name", Json_decode.string, json)]);
                  case "LeftOfArrow" : 
                      return /* LeftOfArrow */0;
                  case "Matched" : 
                      return /* Matched */4;
                  case "MetaArg" : 
                      return /* MetaArg */3;
                  case "UnderInf" : 
                      return /* UnderInf */1;
                  case "VarArg" : 
                      return /* VarArg */2;
                  default:
                    return Pervasives.failwith("unknown kind of Where");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function occursWhere(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "Known" : 
                      return /* Known */Block.simpleVariant("Known", [
                                Json_decode.field("range", range, json),
                                Json_decode.field("wheres", (function (param) {
                                        return Json_decode.list(where, param);
                                      }), json)
                              ]);
                  case "Unknown" : 
                      return /* Unknown */0;
                  default:
                    return Pervasives.failwith("unknown kind of OccursWhere");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function explicitToInstance(param) {
  return Json_decode.andThen((function (kind, _json) {
                switch (kind) {
                  case "ExplicitStayExplicit" : 
                      return /* ExplicitStayExplicit */1;
                  case "ExplicitToInstance" : 
                      return /* ExplicitToInstance */0;
                  default:
                    return Pervasives.failwith("unknown kind of ExplicitToInstance");
                }
              }), Json_decode.string, param);
}

function candidate(json) {
  return /* record */Block.record([
            "term",
            "type_",
            "eti",
            "overlappable"
          ], [
            Json_decode.field("term", expr(/* () */0), json),
            Json_decode.field("type", expr(/* () */0), json),
            Json_decode.field("eti", explicitToInstance, json),
            Json_decode.field("overlappable", overlappable, json)
          ]);
}

function constraint_(param) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "CheckFunDef" : 
                          var partial_arg = declaration(/* () */0);
                          var partial_arg$1 = function (param) {
                            return Json_decode.list(partial_arg, param);
                          };
                          return /* CheckFunDef */Block.variant("CheckFunDef", 15, [
                                    Json_decode.field("name", qname, json),
                                    Json_decode.field("declarations", (function (param) {
                                            return Json_decode.list(partial_arg$1, param);
                                          }), json)
                                  ]);
                      case "CheckSizeLtSat" : 
                          return /* CheckSizeLtSat */Block.variant("CheckSizeLtSat", 13, [Json_decode.field("term", expr(/* () */0), json)]);
                      case "ElimCmp" : 
                          var partial_arg$2 = elimTerm(/* () */0);
                          var partial_arg$3 = elimTerm(/* () */0);
                          return /* ElimCmp */Block.variant("ElimCmp", 2, [
                                    Json_decode.field("polarities", (function (param) {
                                            return Json_decode.list(polarity, param);
                                          }), json),
                                    Json_decode.field("isForced", (function (param) {
                                            return Json_decode.list(isForced, param);
                                          }), json),
                                    Json_decode.field("type", expr(/* () */0), json),
                                    Json_decode.field("term", expr(/* () */0), json),
                                    Json_decode.field("elims1", (function (param) {
                                            return Json_decode.list(partial_arg$2, param);
                                          }), json),
                                    Json_decode.field("elims2", (function (param) {
                                            return Json_decode.list(partial_arg$3, param);
                                          }), json)
                                  ]);
                      case "FindInScope" : 
                          return /* FindInScope */Block.variant("FindInScope", 14, [
                                    Json_decode.field("instanceArg", Json_decode.$$int, json),
                                    Json_decode.field("metaId", (function (param) {
                                            return Json_decode.optional(Json_decode.$$int, param);
                                          }), json),
                                    Json_decode.field("candidates", (function (param) {
                                            return Json_decode.optional((function (param) {
                                                          return Json_decode.list(candidate, param);
                                                        }), param);
                                          }), json)
                                  ]);
                      case "Guarded" : 
                          return /* Guarded */Block.variant("Guarded", 11, [
                                    Json_decode.field("constraint", constraint_(/* () */0), json),
                                    Json_decode.field("problemId", Json_decode.$$int, json)
                                  ]);
                      case "HasBiggerSort" : 
                          return /* HasBiggerSort */Block.variant("HasBiggerSort", 7, [Json_decode.field("sort", expr(/* () */0), json)]);
                      case "HasPTSRuleAbs" : 
                          return /* HasPTSRuleAbs */Block.variant("HasPTSRuleAbs", 9, [
                                    Json_decode.field("sort", expr(/* () */0), json),
                                    Json_decode.field("binding", expr(/* () */0), json)
                                  ]);
                      case "HasPTSRuleNoAbs" : 
                          return /* HasPTSRuleNoAbs */Block.variant("HasPTSRuleNoAbs", 8, [
                                    Json_decode.field("sort", expr(/* () */0), json),
                                    Json_decode.field("binding", expr(/* () */0), json)
                                  ]);
                      case "IsEmpty" : 
                          return /* IsEmpty */Block.variant("IsEmpty", 12, [
                                    Json_decode.field("range", range, json),
                                    Json_decode.field("type", expr(/* () */0), json)
                                  ]);
                      case "LevelCmp" : 
                          return /* LevelCmp */Block.variant("LevelCmp", 6, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("level1", expr(/* () */0), json),
                                    Json_decode.field("level2", expr(/* () */0), json)
                                  ]);
                      case "SortCmp" : 
                          return /* SortCmp */Block.variant("SortCmp", 5, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("sort1", expr(/* () */0), json),
                                    Json_decode.field("sort2", expr(/* () */0), json)
                                  ]);
                      case "TelCmp" : 
                          return /* TelCmp */Block.variant("TelCmp", 4, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("type1", expr(/* () */0), json),
                                    Json_decode.field("type2", expr(/* () */0), json),
                                    Json_decode.field("telescope1", telescope, json),
                                    Json_decode.field("telescope2", telescope, json)
                                  ]);
                      case "TypeCmp" : 
                          return /* TypeCmp */Block.variant("TypeCmp", 3, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("type1", expr(/* () */0), json),
                                    Json_decode.field("type2", expr(/* () */0), json)
                                  ]);
                      case "UnBlock" : 
                          return /* UnBlock */Block.variant("UnBlock", 10, [Json_decode.field("metaId", Json_decode.$$int, json)]);
                      case "ValueCmp" : 
                          return /* ValueCmp */Block.variant("ValueCmp", 0, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("type", expr(/* () */0), json),
                                    Json_decode.field("term1", expr(/* () */0), json),
                                    Json_decode.field("term2", expr(/* () */0), json)
                                  ]);
                      case "ValueCmpOnFace" : 
                          return /* ValueCmpOnFace */Block.variant("ValueCmpOnFace", 1, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("face", expr(/* () */0), json),
                                    Json_decode.field("type", expr(/* () */0), json),
                                    Json_decode.field("term1", expr(/* () */0), json),
                                    Json_decode.field("term2", expr(/* () */0), json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of Constraint");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function problemConstraint(json) {
  return /* record */Block.record([
            "problems",
            "constraint_"
          ], [
            Json_decode.field("problems", (function (param) {
                    return Json_decode.array(Json_decode.$$int, param);
                  }), json),
            Json_decode.field("constraint", constraint_(/* () */0), json)
          ]);
}

function warning(param) {
  return Json_decode.andThen((function (kind, json) {
                switch (kind) {
                  case "AbsurdPatternRequiresNoRHS" : 
                      return /* AbsurdPatternRequiresNoRHS */0;
                  case "CoverageIssue" : 
                      var partial_arg = declaration(/* () */0);
                      var partial_arg$1 = function (param) {
                        return Json_decode.list(partial_arg, param);
                      };
                      return /* CoverageIssue */Block.variant("CoverageIssue", 3, [
                                Json_decode.field("name", qname, json),
                                Json_decode.field("declarations", (function (param) {
                                        return Json_decode.list(partial_arg$1, param);
                                      }), json)
                              ]);
                  case "CoverageNoExactSplit" : 
                      var partial_arg$2 = declaration(/* () */0);
                      var partial_arg$3 = function (param) {
                        return Json_decode.list(partial_arg$2, param);
                      };
                      return /* CoverageNoExactSplit */Block.variant("CoverageNoExactSplit", 4, [
                                Json_decode.field("name", qname, json),
                                Json_decode.field("declarations", (function (param) {
                                        return Json_decode.list(partial_arg$3, param);
                                      }), json)
                              ]);
                  case "DeprecationWarning" : 
                      return /* DeprecationWarning */Block.variant("DeprecationWarning", 17, [
                                Json_decode.field("old", Json_decode.string, json),
                                Json_decode.field("new", Json_decode.string, json),
                                Json_decode.field("version", Json_decode.string, json)
                              ]);
                  case "EmptyRewritePragma" : 
                      return /* EmptyRewritePragma */1;
                  case "GenericNonFatalError" : 
                      return /* GenericNonFatalError */Block.variant("GenericNonFatalError", 13, [Json_decode.field("message", Json_decode.string, json)]);
                  case "GenericWarning" : 
                      return /* GenericWarning */Block.variant("GenericWarning", 12, [Json_decode.field("warning", Json_decode.string, json)]);
                  case "InversionDepthReached" : 
                      return /* InversionDepthReached */Block.variant("InversionDepthReached", 11, [Json_decode.field("name", qname, json)]);
                  case "ModuleDoesntExport" : 
                      var partial_arg$4 = importedName_(qname, (function (param) {
                              return Json_decode.list(name, param);
                            }));
                      return /* ModuleDoesntExport */Block.variant("ModuleDoesntExport", 19, [
                                Json_decode.field("sourceModule", qname, json),
                                Json_decode.field("warning", (function (param) {
                                        return Json_decode.list(partial_arg$4, param);
                                      }), json)
                              ]);
                  case "NicifierIssue" : 
                      return /* NicifierIssue */Block.variant("NicifierIssue", 0, [Json_decode.field("declarationWarning", declarationWarning, json)]);
                  case "OldBuiltin" : 
                      return /* OldBuiltin */Block.variant("OldBuiltin", 9, [
                                Json_decode.field("old", Json_decode.string, json),
                                Json_decode.field("new", Json_decode.string, json)
                              ]);
                  case "ParseWarning" : 
                      return /* ParseWarning */Block.variant("ParseWarning", 16, [Json_decode.field("warning", parseWarning, json)]);
                  case "SafeFlagNoPositivityCheck" : 
                      return /* SafeFlagNoPositivityCheck */6;
                  case "SafeFlagNoUniverseCheck" : 
                      return /* SafeFlagNoUniverseCheck */8;
                  case "SafeFlagNonTerminating" : 
                      return /* SafeFlagNonTerminating */3;
                  case "SafeFlagPolarity" : 
                      return /* SafeFlagPolarity */7;
                  case "SafeFlagPostulate" : 
                      return /* SafeFlagPostulate */Block.variant("SafeFlagPostulate", 14, [Json_decode.field("name", name, json)]);
                  case "SafeFlagPragma" : 
                      return /* SafeFlagPragma */Block.variant("SafeFlagPragma", 15, [Json_decode.field("pragmas", (function (param) {
                                        return Json_decode.list(Json_decode.string, param);
                                      }), json)]);
                  case "SafeFlagPrimTrustMe" : 
                      return /* SafeFlagPrimTrustMe */5;
                  case "SafeFlagTerminating" : 
                      return /* SafeFlagTerminating */4;
                  case "TerminationIssue" : 
                      return /* TerminationIssue */Block.variant("TerminationIssue", 1, [Json_decode.field("terminationErrors", (function (param) {
                                        return Json_decode.list(terminationError, param);
                                      }), json)]);
                  case "UnreachableClauses" : 
                      return /* UnreachableClauses */Block.variant("UnreachableClauses", 2, [Json_decode.field("name", qname, json)]);
                  case "UnsolvedConstraints" : 
                      return /* UnsolvedConstraints */Block.variant("UnsolvedConstraints", 8, [Json_decode.field("constraints", (function (param) {
                                        return Json_decode.list(problemConstraint, param);
                                      }), json)]);
                  case "UnsolvedInteractionMetas" : 
                      return /* UnsolvedInteractionMetas */Block.variant("UnsolvedInteractionMetas", 7, [Json_decode.field("ranges", (function (param) {
                                        return Json_decode.list(range, param);
                                      }), json)]);
                  case "UnsolvedMetaVariables" : 
                      return /* UnsolvedMetaVariables */Block.variant("UnsolvedMetaVariables", 6, [Json_decode.field("ranges", (function (param) {
                                        return Json_decode.list(range, param);
                                      }), json)]);
                  case "UselessInline" : 
                      return /* UselessInline */Block.variant("UselessInline", 10, [Json_decode.field("name", qname, json)]);
                  case "UselessPublic" : 
                      return /* UselessPublic */2;
                  case "UserWarning" : 
                      return /* UserWarning */Block.variant("UserWarning", 18, [Json_decode.field("warning", Json_decode.string, json)]);
                  default:
                    return Pervasives.failwith("unknown kind of Warning");
                }
              }), (function (param) {
                return Json_decode.field("kind", Json_decode.string, param);
              }), param);
}

function tcWarning(json) {
  return /* record */Block.record([
            "cached",
            "range",
            "warning'"
          ], [
            Json_decode.field("cached", Json_decode.bool, json),
            Json_decode.field("range", range, json),
            Json_decode.field("warning'", Json_decode.string, json)
          ]);
}

var TypeChecking = /* module */Block.localModule([
    "comparison",
    "call",
    "typeError",
    "error",
    "terminationError",
    "polarity",
    "isForced",
    "where",
    "occursWhere",
    "explicitToInstance",
    "candidate",
    "constraint_",
    "problemConstraint",
    "warning",
    "tcWarning"
  ], [
    comparison,
    call,
    typeError,
    error,
    terminationError,
    polarity,
    isForced,
    where,
    occursWhere,
    explicitToInstance,
    candidate,
    constraint_,
    problemConstraint,
    warning,
    tcWarning
  ]);

function outputConstraint(decoderA, decoderB) {
  return (function (param) {
      return Json_decode.andThen((function (kind, json) {
                    switch (kind) {
                      case "Assign" : 
                          return /* Assign */Block.variant("Assign", 10, [
                                    Json_decode.field("LHS", decoderB, json),
                                    Json_decode.field("RHS", decoderA, json)
                                  ]);
                      case "CmpElim" : 
                          return /* CmpElim */Block.variant("CmpElim", 2, [
                                    Json_decode.field("type", decoderA, json),
                                    Json_decode.field("terms1", (function (param) {
                                            return Json_decode.list(decoderB, param);
                                          }), json),
                                    Json_decode.field("terms2", (function (param) {
                                            return Json_decode.list(decoderB, param);
                                          }), json)
                                  ]);
                      case "CmpInType" : 
                          return /* CmpInType */Block.variant("CmpInType", 1, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("term1", decoderB, json),
                                    Json_decode.field("term2", decoderB, json),
                                    Json_decode.field("type", decoderA, json)
                                  ]);
                      case "CmpLevels" : 
                          return /* CmpLevels */Block.variant("CmpLevels", 5, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("level1", decoderB, json),
                                    Json_decode.field("level2", decoderB, json)
                                  ]);
                      case "CmpSorts" : 
                          return /* CmpSorts */Block.variant("CmpSorts", 8, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("sort1", decoderB, json),
                                    Json_decode.field("sort2", decoderB, json)
                                  ]);
                      case "CmpTeles" : 
                          return /* CmpTeles */Block.variant("CmpTeles", 6, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("level1", decoderB, json),
                                    Json_decode.field("level2", decoderB, json)
                                  ]);
                      case "CmpTypes" : 
                          return /* CmpTypes */Block.variant("CmpTypes", 4, [
                                    Json_decode.field("comparison", comparison, json),
                                    Json_decode.field("type1", decoderB, json),
                                    Json_decode.field("type2", decoderB, json)
                                  ]);
                      case "FindInScopeOF" : 
                          return /* FindInScopeOF */Block.variant("FindInScopeOF", 15, [
                                    Json_decode.field("term", decoderB, json),
                                    Json_decode.field("type", decoderA, json),
                                    Json_decode.field("candidates", (function (param) {
                                            return Json_decode.list((function (param) {
                                                          return Json_decode.pair(decoderA, decoderA, param);
                                                        }), param);
                                          }), json)
                                  ]);
                      case "Guard" : 
                          return /* Guard */Block.variant("Guard", 9, [
                                    Json_decode.field("outputConstraint", outputConstraint(decoderA, decoderB), json),
                                    Json_decode.field("problemId", Json_decode.$$int, json)
                                  ]);
                      case "IsEmptyType" : 
                          return /* IsEmptyType */Block.variant("IsEmptyType", 13, [Json_decode.field("type", decoderA, json)]);
                      case "JustSort" : 
                          return /* JustSort */Block.variant("JustSort", 7, [Json_decode.field("sort", decoderB, json)]);
                      case "JustType" : 
                          return /* JustType */Block.variant("JustType", 3, [Json_decode.field("type", decoderB, json)]);
                      case "OfType" : 
                          return /* OfType */Block.variant("OfType", 0, [
                                    Json_decode.field("term", decoderB, json),
                                    Json_decode.field("type", decoderA, json)
                                  ]);
                      case "PTSInstance" : 
                          return /* PTSInstance */Block.variant("PTSInstance", 16, [
                                    Json_decode.field("a", decoderB, json),
                                    Json_decode.field("b", decoderB, json)
                                  ]);
                      case "PostponedCheckArgs" : 
                          return /* PostponedCheckArgs */Block.variant("PostponedCheckArgs", 12, [
                                    Json_decode.field("LHS", decoderB, json),
                                    Json_decode.field("exprs", (function (param) {
                                            return Json_decode.list(decoderA, param);
                                          }), json),
                                    Json_decode.field("type1", decoderA, json),
                                    Json_decode.field("type2", decoderA, json)
                                  ]);
                      case "SizeLtSat" : 
                          return /* SizeLtSat */Block.variant("SizeLtSat", 14, [Json_decode.field("size", decoderA, json)]);
                      case "TypedAssign" : 
                          return /* TypedAssign */Block.variant("TypedAssign", 11, [
                                    Json_decode.field("LHS", decoderB, json),
                                    Json_decode.field("RHS", decoderA, json),
                                    Json_decode.field("type", decoderA, json)
                                  ]);
                      default:
                        return Pervasives.failwith("unknown kind of OutputConstraint");
                    }
                  }), (function (param) {
                    return Json_decode.field("kind", Json_decode.string, param);
                  }), param);
    });
}

function allGoalsWarnings(json) {
  var partial_arg = outputConstraint(expr(/* () */0), expr(/* () */0));
  var partial_arg$1 = outputConstraint(expr(/* () */0), expr(/* () */0));
  return /* record */Block.record([
            "interactionMetas",
            "hiddenMetas",
            "warnings",
            "errors"
          ], [
            Json_decode.field("interactionMetas", (function (param) {
                    return Json_decode.list(partial_arg, param);
                  }), json),
            Json_decode.field("hiddenMetas", (function (param) {
                    return Json_decode.list(partial_arg$1, param);
                  }), json),
            Json_decode.field("warnings", (function (param) {
                    return Json_decode.list(tcWarning, param);
                  }), json),
            Json_decode.field("warnings", (function (param) {
                    return Json_decode.list(tcWarning, param);
                  }), json)
          ]);
}

var Interaction = /* module */Block.localModule([
    "outputConstraint",
    "allGoalsWarnings"
  ], [
    outputConstraint,
    allGoalsWarnings
  ]);

var Decode = /* module */Block.localModule([
    "TypeCheckingPositivity",
    "Syntax",
    "TypeChecking",
    "Interaction"
  ], [
    TypeCheckingPositivity,
    Syntax,
    TypeChecking,
    Interaction
  ]);

function parseBody(raw) {
  var match = raw[/* kind */0];
  switch (match) {
    case "AllGoalsWarnings" : 
        return /* AllGoalsWarnings */Block.variant("AllGoalsWarnings", 0, [allGoalsWarnings(raw[/* rawJSON */1])]);
    case "Error" : 
        return /* ErrorMessage */Block.variant("ErrorMessage", 1, [
                  error(raw[/* rawJSON */1]),
                  raw[/* rawString */2]
                ]);
    case "PlainText" : 
        return /* PlainText */Block.variant("PlainText", 2, [raw[/* rawString */2]]);
    default:
      return Pervasives.failwith("unknown kind of Body");
  }
}

var parseError = error;

exports.Decode = Decode;
exports.parseError = parseError;
exports.parseBody = parseBody;
/*  Not a pure module */
