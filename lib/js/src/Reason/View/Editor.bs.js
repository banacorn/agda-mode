// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var MiniEditor$AgdaMode = require("./MiniEditor.bs.js");

var QueryCancelled = Caml_exceptions.create("Editor-AgdaMode.QueryCancelled");

function make(editor) {
  return /* record */Block.record([
            "focused",
            "source",
            "query"
          ], [
            0,
            editor,
            MiniEditor$AgdaMode.makeModel(/* () */0)
          ]);
}

function get(editor) {
  var match = editor[/* focused */0];
  if (match) {
    var match$1 = editor[/* query */2][/* ref */2];
    if (match$1 !== undefined) {
      return Caml_option.valFromOption(match$1);
    } else {
      return editor[/* source */1];
    }
  } else {
    return editor[/* source */1];
  }
}

function onSource(editor) {
  var match = editor[/* focused */0];
  if (match) {
    var element = atom.views.getView(editor[/* query */2]);
    element.focus();
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function onQuery(editor) {
  var match = editor[/* focused */0];
  if (match) {
    return /* () */0;
  } else {
    var match$1 = editor[/* query */2][/* ref */2];
    if (match$1 !== undefined) {
      var element = atom.views.getView(Caml_option.valFromOption(match$1));
      element.focus();
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
}

var Focus = /* module */Block.localModule([
    "get",
    "onSource",
    "onQuery"
  ], [
    get,
    onSource,
    onQuery
  ]);

function inquire(editor) {
  return Curry._1(editor[/* query */2][/* telePromise */3][/* wire */0], /* () */0);
}

function answer(editor) {
  return editor[/* query */2][/* telePromise */3][/* resolve */1];
}

function reject(editor) {
  return editor[/* query */2][/* telePromise */3][/* reject */2];
}

var Query = /* module */Block.localModule([
    "inquire",
    "answer",
    "reject"
  ], [
    inquire,
    answer,
    reject
  ]);

exports.QueryCancelled = QueryCancelled;
exports.make = make;
exports.Focus = Focus;
exports.Query = Query;
/* MiniEditor-AgdaMode Not a pure module */
