// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Log$AgdaMode = require("../Log.bs.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Command$AgdaMode = require("../Command.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Translator$AgdaMode = require("../View/Panel/InputMethod/Translator.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var RunningInfo$AgdaMode = require("../RunningInfo.bs.js");
var Highlighting$AgdaMode = require("../Highlighting.bs.js");
var Type__Location$AgdaMode = require("../Type/Type__Location.bs.js");
var Instance__Goals$AgdaMode = require("./Instance__Goals.bs.js");
var Instance__Connections$AgdaMode = require("./Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("./Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("./Instance__Highlightings.bs.js");

function handleCommandError(promise, instance) {
  return $$Promise.mapError(promise, (function (error) {
                if (typeof error === "number") {
                  switch (error) {
                    case /* Cancelled */0 :
                        Curry._3(instance[/* view */2][/* display */3], "Query Cancelled", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                        break;
                    case /* GoalNotIndexed */1 :
                        Curry._3(instance[/* view */2][/* display */3], "Goal not indexed", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, ["Please reload to re-index the goal"])]));
                        break;
                    case /* OutOfGoal */2 :
                        Curry._3(instance[/* view */2][/* display */3], "Out of goal", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, ["Please place the cursor in a goal"])]));
                        break;
                    
                  }
                } else if (error.tag) {
                  var match = Connection$AgdaMode.$$Error.toString(error[0]);
                  Curry._3(instance[/* view */2][/* display */3], "Connection-related Error: " + match[0], /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [match[1]])]));
                } else {
                  var errors = error[0];
                  Rebase.$$Option.forEach((function (conn) {
                          Rebase.$$Array.forEach((function (e) {
                                  return Log$AgdaMode.logError(e)(conn[/* log */5]);
                                }), errors);
                          Curry._3(instance[/* view */2][/* display */3], "Parse Error", /* Error */1, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* ParseError */Caml_chrome_debugger.variant("ParseError", 7, [conn[/* metadata */0]])]));
                          return /* () */0;
                        }), instance[/* connection */6]);
                }
                return Editors$AgdaMode.Focus.on(/* Source */0, instance[/* editors */1]);
              }));
}

function handleDisplayInfo(info) {
  if (typeof info === "number") {
    return /* tuple */[
            "Compilation Done!",
            /* Success */3,
            /* Nothing */0
          ];
  } else {
    switch (info.tag | 0) {
      case /* Constraints */0 :
          var match = info[0];
          if (match !== undefined) {
            return /* tuple */[
                    "Constraints",
                    /* Info */2,
                    /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* Constraints */Caml_chrome_debugger.variant("Constraints", 3, [match])])
                  ];
          } else {
            return /* tuple */[
                    "No Constraints",
                    /* Success */3,
                    /* Nothing */0
                  ];
          }
      case /* AllGoalsWarnings */1 :
          var payload = info[0];
          return /* tuple */[
                  payload[/* title */0],
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* AllGoalsWarnings */Caml_chrome_debugger.variant("AllGoalsWarnings", 0, [payload])])
                ];
      case /* Time */2 :
          return /* tuple */[
                  "Time",
                  /* PlainText */0,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* Error */3 :
          return /* tuple */[
                  "Error",
                  /* Error */1,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* Error */Caml_chrome_debugger.variant("Error", 6, [info[0]])])
                ];
      case /* Intro */4 :
          return /* tuple */[
                  "Intro",
                  /* PlainText */0,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* Auto */5 :
          return /* tuple */[
                  "Auto",
                  /* PlainText */0,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* ModuleContents */6 :
          return /* tuple */[
                  "Module Contents",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* SearchAbout */7 :
          return /* tuple */[
                  "Searching about ...",
                  /* PlainText */0,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 5, [info[0]])])
                ];
      case /* WhyInScope */8 :
          return /* tuple */[
                  "Scope info",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* WhyInScope */Caml_chrome_debugger.variant("WhyInScope", 4, [info[0]])])
                ];
      case /* NormalForm */9 :
          return /* tuple */[
                  "Normal form",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* GoalType */10 :
          return /* tuple */[
                  "Goal type",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* GoalTypeContext */Caml_chrome_debugger.variant("GoalTypeContext", 1, [info[0]])])
                ];
      case /* CurrentGoal */11 :
          return /* tuple */[
                  "Current goal",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* InferredType */12 :
          return /* tuple */[
                  "Inferred type",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* Context */13 :
          return /* tuple */[
                  "Context",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* Context */Caml_chrome_debugger.variant("Context", 2, [info[0]])])
                ];
      case /* HelperFunction */14 :
          return /* tuple */[
                  "Helper function",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      case /* Version */15 :
          return /* tuple */[
                  "Version",
                  /* Info */2,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [info[0]])])
                ];
      
    }
  }
}

function handleResponse(instance, response) {
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = Instance__TextEditors$AgdaMode.getPath(instance);
  var textBuffer = textEditor.getBuffer();
  if (typeof response === "number") {
    switch (response) {
      case /* NoStatus */0 :
      case /* ClearRunningInfo */1 :
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* ClearHighlighting */2 :
          Instance__Highlightings$AgdaMode.destroyAll(instance);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* DoneAborting */3 :
          Curry._3(instance[/* view */2][/* display */3], "Status", /* Warning */4, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, ["Done aborting"])]));
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      
    }
  } else {
    switch (response.tag | 0) {
      case /* HighlightingInfoDirect */0 :
          Rebase.$$Array.forEach((function (annotation) {
                  return Instance__Highlightings$AgdaMode.add(annotation, instance);
                }), Rebase.$$Array.filter(Highlighting$AgdaMode.Annotation.shouldHighlight, response[1]));
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* HighlightingInfoIndirect */1 :
          var filepath = response[0];
          return $$Promise.map(Instance__Highlightings$AgdaMode.addFromFile(filepath, instance), (function (param) {
                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [(Fs.unlink(filepath, (function (param) {
                                            return /* () */0;
                                          })), /* () */0)]);
                      }));
      case /* Status */2 :
          var checked = response[1];
          var displayImplicit = response[0];
          if (displayImplicit || checked) {
            Curry._3(instance[/* view */2][/* display */3], "Status", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, ["Typechecked: " + (Pervasives.string_of_bool(checked) + ("\nDisplay implicit arguments: " + Pervasives.string_of_bool(displayImplicit)))])]));
          }
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* JumpToError */3 :
          if (response[0] === filePath) {
            var point = textBuffer.positionForCharacterIndex(response[1] - 1 | 0);
            setTimeout((function (param) {
                    textEditor.setCursorBufferPosition(point);
                    return /* () */0;
                  }), 0);
          }
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* InteractionPoints */4 :
          Instance__Goals$AgdaMode.instantiateAll(response[0], instance);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* GiveAction */5 :
          var give = response[1];
          var index = response[0];
          var match = Instance__Goals$AgdaMode.find(index, instance);
          if (match !== undefined) {
            var goal = match;
            if (typeof give === "number") {
              if (give === 0) {
                var content = Goal$AgdaMode.getContent(goal);
                Goal$AgdaMode.setContent("(" + (content + ")"), goal);
              }
              
            } else {
              Goal$AgdaMode.setContent(give[0].replace((/\\n/g), "\n"), goal);
            }
            Goal$AgdaMode.removeBoundary(goal);
            Goal$AgdaMode.destroy(goal);
            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
          } else {
            console.log("error: cannot find goal #" + String(index));
            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
          }
      case /* MakeCase */6 :
          var lines = response[1];
          var pointed = Instance__TextEditors$AgdaMode.pointingAt(undefined, instance);
          if (pointed !== undefined) {
            var goal$1 = pointed;
            if (response[0]) {
              Goal$AgdaMode.writeLambda(lines, goal$1);
            } else {
              Goal$AgdaMode.writeLines(lines, goal$1);
            }
            return Curry._2(instance[/* dispatch */9], /* Load */0, instance);
          } else {
            return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* OutOfGoal */2]));
          }
      case /* SolveAll */7 :
          var solutions = response[0];
          return $$Promise.mapOk(Rebase.$$Array.reduce((function (promise, solution) {
                            return $$Promise.flatMapOk(promise, (function (param) {
                                          var param$1 = solution;
                                          var match = Instance__Goals$AgdaMode.find(param$1[0], instance);
                                          if (match !== undefined) {
                                            var goal = match;
                                            Goal$AgdaMode.setContent(param$1[1], goal);
                                            Instance__Goals$AgdaMode.setCursor(goal, instance);
                                            return Curry._2(instance[/* dispatch */9], /* Give */13, instance);
                                          } else {
                                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
                                          }
                                        }));
                          }), $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0])), solutions), (function (param) {
                        var size = Rebase.$$Array.length(solutions);
                        if (size === 0) {
                          Curry._3(instance[/* view */2][/* display */3], "No solutions found", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                        } else {
                          Curry._3(instance[/* view */2][/* display */3], String(size) + " goals solved", /* Success */3, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                        }
                        return /* () */0;
                      }));
      case /* DisplayInfo */8 :
          var match$1 = handleDisplayInfo(response[0]);
          Curry._3(instance[/* view */2][/* display */3], match$1[0], match$1[1], match$1[2]);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      case /* RunningInfo */9 :
          var message = response[1];
          if (response[0] >= 2) {
            RunningInfo$AgdaMode.add(Parser$AgdaMode.agdaOutput(message), instance[/* runningInfo */7]);
          } else {
            Curry._3(instance[/* view */2][/* display */3], "Type-checking", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [message])]));
          }
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
      
    }
  }
}

function handleResponseAndRecoverCursor(instance, response) {
  return Instance__TextEditors$AgdaMode.updateCursorPosition((function (param) {
                return handleResponse(instance, response);
              }), instance);
}

function handleLocalCommand(command, instance) {
  var buff = function (command, instance) {
    return $$Promise.mapError($$Promise.mapOk(Instance__Connections$AgdaMode.get(instance), (function (connection) {
                      Curry._3(instance[/* view */2][/* display */3], "Loading ...", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                      return /* record */Caml_chrome_debugger.record([
                                "version",
                                "filepath",
                                "command"
                              ], [
                                connection[/* metadata */0][/* version */2],
                                Instance__TextEditors$AgdaMode.getPath(instance),
                                command
                              ]);
                    })), (function (param) {
                  return /* Cancelled */0;
                }));
  };
  if (typeof command === "number") {
    switch (command) {
      case /* Load */0 :
          return $$Promise.flatMapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(instance[/* editors */1][/* source */1].save())), (function (param) {
                            return /* Cancelled */0;
                          })), (function (param) {
                        instance[/* isLoaded */0] = true;
                        return $$Promise.flatMap(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                                      Curry._1(instance[/* view */2][/* activate */0], /* () */0);
                                      Curry._3(instance[/* view */2][/* display */3], "Connecting ...", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                                      return buff(/* Load */0, instance);
                                    }));
                      }));
      case /* Quit */1 :
          Instance__Connections$AgdaMode.disconnect(instance);
          Instance__Goals$AgdaMode.destroyAll(instance);
          Instance__Highlightings$AgdaMode.destroyAll(instance);
          Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
          instance[/* isLoaded */0] = false;
          Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
      case /* Restart */2 :
          Instance__Connections$AgdaMode.disconnect(instance);
          return buff(/* Load */0, instance);
      case /* Abort */3 :
          return buff(/* Abort */1, instance);
      case /* Compile */4 :
          return buff(/* Compile */2, instance);
      case /* ToggleDisplayOfImplicitArguments */5 :
          return buff(/* ToggleDisplayOfImplicitArguments */3, instance);
      case /* SolveConstraints */6 :
          return buff(/* SolveConstraints */4, instance);
      case /* ShowConstraints */7 :
          return buff(/* ShowConstraints */5, instance);
      case /* ShowGoals */8 :
          return buff(/* ShowGoals */6, instance);
      case /* NextGoal */9 :
          var nextGoal = Instance__Goals$AgdaMode.getNextGoalPosition(instance);
          Rebase.$$Option.forEach((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), nextGoal);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
      case /* PreviousGoal */10 :
          var previousGoal = Instance__Goals$AgdaMode.getPreviousGoalPosition(instance);
          Rebase.$$Option.forEach((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), previousGoal);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
      case /* ToggleDocking */11 :
          Curry._1(instance[/* view */2][/* toggleDocking */2], /* () */0);
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
      case /* WhyInScope */12 :
          var selectedText = instance[/* editors */1][/* source */1].getSelectedText();
          if (Rebase.$$String.isEmpty(selectedText)) {
            return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Scope info", "name:", ""), (function (param) {
                              return /* Cancelled */0;
                            })), (function (expr) {
                          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                        return buff(/* WhyInScope */Caml_chrome_debugger.variant("WhyInScope", 0, [
                                                      expr,
                                                      param[1]
                                                    ]), instance);
                                      }));
                        }));
          } else {
            return buff(/* WhyInScopeGlobal */Caml_chrome_debugger.variant("WhyInScopeGlobal", 1, [selectedText]), instance);
          }
      case /* Give */13 :
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        var index = param[1];
                        var goal = param[0];
                        if (Goal$AgdaMode.isEmpty(goal)) {
                          return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Give", "expression to give:", ""), (function (param) {
                                            return /* Cancelled */0;
                                          })), (function (result) {
                                        Goal$AgdaMode.setContent(result, goal);
                                        return buff(/* Give */Caml_chrome_debugger.variant("Give", 9, [
                                                      goal,
                                                      index
                                                    ]), instance);
                                      }));
                        } else {
                          return buff(/* Give */Caml_chrome_debugger.variant("Give", 9, [
                                        goal,
                                        index
                                      ]), instance);
                        }
                      }));
      case /* Refine */14 :
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        return buff(/* Refine */Caml_chrome_debugger.variant("Refine", 10, [
                                      param[0],
                                      param[1]
                                    ]), instance);
                      }));
      case /* Auto */15 :
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        return buff(/* Auto */Caml_chrome_debugger.variant("Auto", 11, [
                                      param[0],
                                      param[1]
                                    ]), instance);
                      }));
      case /* Case */16 :
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        var index = param[1];
                        var goal = param[0];
                        if (Goal$AgdaMode.isEmpty(goal)) {
                          return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Case", "expression to case:", ""), (function (param) {
                                            return /* Cancelled */0;
                                          })), (function (result) {
                                        Goal$AgdaMode.setContent(result, goal);
                                        return buff(/* Case */Caml_chrome_debugger.variant("Case", 12, [
                                                      goal,
                                                      index
                                                    ]), instance);
                                      }));
                        } else {
                          return buff(/* Case */Caml_chrome_debugger.variant("Case", 12, [
                                        goal,
                                        index
                                      ]), instance);
                        }
                      }));
      case /* QuerySymbol */17 :
          var selected = Editors$AgdaMode.getSelectedSymbol(instance[/* editors */1]);
          var getSymbol = Rebase.$$String.isEmpty(Rebase.$$String.trim(selected)) ? (Curry._1(instance[/* view */2][/* activate */0], /* () */0), Curry._3(instance[/* view */2][/* inquire */4], "Lookup Unicode Symbol Input Sequence", "symbol to lookup:", "")) : $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [selected]));
          $$Promise.getOk(getSymbol, (function (symbol) {
                  return Rebase.$$Option.forEach((function (sequences) {
                                Curry._3(instance[/* view */2][/* display */3], "Input sequence for " + symbol, /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [Rebase.$$String.joinWith("\n", Rebase.List.fromArray(sequences))])]));
                                return /* () */0;
                              }), Translator$AgdaMode.lookup(symbol));
                }));
          return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
      case /* GotoDefinition */18 :
          if (instance[/* isLoaded */0]) {
            var name = Instance__TextEditors$AgdaMode.updateCursorPosition((function (param) {
                    return Editors$AgdaMode.getSelectedTextNode(instance[/* editors */1]);
                  }), instance);
            return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                              return buff(/* GotoDefinition */Caml_chrome_debugger.variant("GotoDefinition", 17, [
                                            name,
                                            param[1]
                                          ]), instance);
                            })), (function (param) {
                          return buff(/* GotoDefinitionGlobal */Caml_chrome_debugger.variant("GotoDefinitionGlobal", 18, [name]), instance);
                        }));
          } else {
            return $$Promise.flatMap(handleCommandError(Curry._2(instance[/* dispatch */9], /* Load */0, instance), instance), (function (param) {
                          return handleLocalCommand(/* GotoDefinition */18, instance);
                        }));
          }
      
    }
  } else {
    switch (command.tag | 0) {
      case /* SearchAbout */0 :
          var normalization = command[0];
          return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Searching through definitions [" + (Command$AgdaMode.Normalization.toString(normalization) + "]"), "expression to infer:", ""), (function (param) {
                            return /* Cancelled */0;
                          })), (function (expr) {
                        return buff(/* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 2, [
                                      normalization,
                                      expr
                                    ]), instance);
                      }));
      case /* InferType */1 :
          var normalization$1 = command[0];
          return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                            var index = param[1];
                            var goal = param[0];
                            if (Goal$AgdaMode.isEmpty(goal)) {
                              return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Infer type [" + (Command$AgdaMode.Normalization.toString(normalization$1) + "]"), "expression to infer:", ""), (function (param) {
                                                return /* Cancelled */0;
                                              })), (function (expr) {
                                            return buff(/* InferType */Caml_chrome_debugger.variant("InferType", 3, [
                                                          normalization$1,
                                                          expr,
                                                          index
                                                        ]), instance);
                                          }));
                            } else {
                              return buff(/* Give */Caml_chrome_debugger.variant("Give", 9, [
                                            goal,
                                            index
                                          ]), instance);
                            }
                          })), (function (param) {
                        return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Infer type [" + (Command$AgdaMode.Normalization.toString(normalization$1) + "]"), "expression to infer:", ""), (function (param) {
                                          return /* Cancelled */0;
                                        })), (function (expr) {
                                      return buff(/* InferTypeGlobal */Caml_chrome_debugger.variant("InferTypeGlobal", 4, [
                                                    normalization$1,
                                                    expr
                                                  ]), instance);
                                    }));
                      }));
      case /* ModuleContents */2 :
          var normalization$2 = command[0];
          return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Module contents [" + (Command$AgdaMode.Normalization.toString(normalization$2) + "]"), "module name:", ""), (function (param) {
                            return /* Cancelled */0;
                          })), (function (expr) {
                        return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return buff(/* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 5, [
                                                        normalization$2,
                                                        expr,
                                                        param[1]
                                                      ]), instance);
                                        })), (function (param) {
                                      return buff(/* ModuleContentsGlobal */Caml_chrome_debugger.variant("ModuleContentsGlobal", 6, [
                                                    normalization$2,
                                                    expr
                                                  ]), instance);
                                    }));
                      }));
      case /* ComputeNormalForm */3 :
          var computeMode = command[0];
          return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                            var index = param[1];
                            var goal = param[0];
                            if (Goal$AgdaMode.isEmpty(goal)) {
                              return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Compute normal form", "expression to normalize:", ""), (function (param) {
                                                return /* Cancelled */0;
                                              })), (function (expr) {
                                            return buff(/* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 7, [
                                                          computeMode,
                                                          expr,
                                                          index
                                                        ]), instance);
                                          }));
                            } else {
                              var expr = Goal$AgdaMode.getContent(goal);
                              return buff(/* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 7, [
                                            computeMode,
                                            expr,
                                            index
                                          ]), instance);
                            }
                          })), (function (param) {
                        return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Compute normal form", "expression to normalize:", ""), (function (param) {
                                          return /* Cancelled */0;
                                        })), (function (expr) {
                                      return buff(/* ComputeNormalFormGlobal */Caml_chrome_debugger.variant("ComputeNormalFormGlobal", 8, [
                                                    computeMode,
                                                    expr
                                                  ]), instance);
                                    }));
                      }));
      case /* GoalType */4 :
          var normalization$3 = command[0];
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        return buff(/* GoalType */Caml_chrome_debugger.variant("GoalType", 13, [
                                      normalization$3,
                                      param[1]
                                    ]), instance);
                      }));
      case /* Context */5 :
          var normalization$4 = command[0];
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        return buff(/* Context */Caml_chrome_debugger.variant("Context", 14, [
                                      normalization$4,
                                      param[1]
                                    ]), instance);
                      }));
      case /* GoalTypeAndContext */6 :
          var normalization$5 = command[0];
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        return buff(/* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 15, [
                                      normalization$5,
                                      param[1]
                                    ]), instance);
                      }));
      case /* GoalTypeAndInferredType */7 :
          var normalization$6 = command[0];
          return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                        return buff(/* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 16, [
                                      normalization$6,
                                      param[0],
                                      param[1]
                                    ]), instance);
                      }));
      case /* InputSymbol */8 :
          var enabled = atom.config.get("agda-mode.inputMethod");
          if (enabled) {
            Curry._1(instance[/* view */2][/* activate */0], /* () */0);
            switch (command[0]) {
              case /* Ordinary */0 :
                  return $$Promise.flatMap(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                                Curry._1(instance[/* view */2][/* activateInputMethod */9], true);
                                return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
                              }));
              case /* CurlyBracket */1 :
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "{");
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              case /* Bracket */2 :
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "[");
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              case /* Parenthesis */3 :
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "(");
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              case /* DoubleQuote */4 :
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "\"");
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              case /* SingleQuote */5 :
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "'");
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              case /* BackQuote */6 :
                  Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "`");
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              case /* Abort */7 :
                  Curry._1(instance[/* view */2][/* activateInputMethod */9], false);
                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              
            }
          } else {
            Editors$AgdaMode.Focus.get(instance[/* editors */1]).insertText("\\");
            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
          }
      case /* Jump */9 :
          var match = command[0];
          if (match.tag) {
            var positions = Instance__Goals$AgdaMode.getPositions(instance);
            Editors$AgdaMode.Focus.on(/* Source */0, instance[/* editors */1]);
            Rebase.$$Option.forEach((function (position) {
                    instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                    return /* () */0;
                  }), Rebase.$$Array.get(positions, match[0]));
            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
          } else {
            var range = match[0];
            var filePath = Instance__TextEditors$AgdaMode.getPath(instance);
            var match$1;
            if (range) {
              var match$2 = range[0];
              if (match$2 !== undefined) {
                var path = match$2;
                var match$3 = path === filePath;
                match$1 = /* tuple */[
                  true,
                  match$3 ? undefined : path
                ];
              } else {
                match$1 = /* tuple */[
                  true,
                  undefined
                ];
              }
            } else {
              match$1 = /* tuple */[
                false,
                undefined
              ];
            }
            var otherFilePath = match$1[1];
            if (match$1[0]) {
              if (otherFilePath !== undefined) {
                var match$4;
                if (range) {
                  var match$5 = Rebase.$$Array.get(range[1], 0);
                  if (match$5 !== undefined) {
                    var i = match$5;
                    match$4 = /* tuple */[
                      i[/* start */0][/* line */1] - 1 | 0,
                      i[/* start */0][/* col */2] - 1 | 0
                    ];
                  } else {
                    match$4 = /* tuple */[
                      0,
                      0
                    ];
                  }
                } else {
                  match$4 = /* tuple */[
                    0,
                    0
                  ];
                }
                var option = {
                  initialLine: match$4[0],
                  initialColumn: match$4[1],
                  split: "right",
                  activatePane: true,
                  activateItem: true,
                  pending: false,
                  searchAllPanes: true,
                  location: undefined
                };
                return $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(atom.workspace.open(otherFilePath, option))), (function (param) {
                              if (param.tag) {
                                return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Cancelled */0]);
                              } else {
                                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
                              }
                            }));
              } else {
                var ranges = Type__Location$AgdaMode.$$Range.toAtomRanges(range);
                if (Rebase.$$Option.isSome(Rebase.$$Array.get(ranges, 0))) {
                  setTimeout((function (param) {
                          instance[/* editors */1][/* source */1].setSelectedBufferRanges(ranges);
                          return /* () */0;
                        }), 0);
                }
                return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
              }
            } else {
              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
            }
          }
      
    }
  }
}

function handleRemoteCommand(instance, handler, remote) {
  if (remote !== undefined) {
    var cmd = remote;
    $$Promise.getOk(Instance__Connections$AgdaMode.get(instance), (function (connection) {
            if (Command$AgdaMode.Remote.isLoad(cmd) && connection[/* resetLogOnLoad */3]) {
              Connection$AgdaMode.resetLog(connection);
            }
            return Log$AgdaMode.createEntry(cmd[/* command */2], connection[/* log */5]);
          }));
    var handleResults = /* record */Caml_chrome_debugger.record(["contents"], [[]]);
    var parseErrors = /* record */Caml_chrome_debugger.record(["contents"], [[]]);
    var inputForAgda = Command$AgdaMode.Remote.toAgdaReadableString(cmd);
    var match = $$Promise.pending(/* () */0);
    var resolve = match[1];
    $$Promise.getOk(Instance__Connections$AgdaMode.get(instance), (function (connection) {
            Curry._1(Connection$AgdaMode.send(inputForAgda, connection)[/* on */3], (function (param) {
                    var resolve$prime = function (x) {
                      return Curry._1(resolve, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]));
                    };
                    var reject$prime = function (x) {
                      return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [x]));
                    };
                    var param$1 = param;
                    if (param$1.tag) {
                      Curry._1(reject$prime, /* ConnectionError */Caml_chrome_debugger.variant("ConnectionError", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [param$1[0]])]));
                      return /* () */0;
                    } else {
                      var match = param$1[0];
                      if (match) {
                        var match$1 = match[0];
                        if (match$1.tag) {
                          parseErrors[0] = Rebase.$$Array.concat(/* array */[match$1[0]], parseErrors[0]);
                          return /* () */0;
                        } else {
                          var response = match$1[0];
                          var result = Instance__TextEditors$AgdaMode.updateCursorPosition((function (param) {
                                  return Curry._2(handler, instance, response);
                                }), instance);
                          handleResults[0] = Rebase.$$Array.concat(/* array */[result], handleResults[0]);
                          return /* () */0;
                        }
                      } else if (Rebase.$$Array.length(parseErrors[0]) > 0) {
                        Curry._1(reject$prime, /* ParseError */Caml_chrome_debugger.variant("ParseError", 0, [parseErrors[0]]));
                        return /* () */0;
                      } else {
                        return $$Promise.get($$Promise.all(Rebase.List.fromArray(handleResults[0])), Curry.__1(resolve$prime));
                      }
                    }
                  }));
            return /* () */0;
          }));
    return $$Promise.mapOk(match[0], (function (param) {
                  return /* () */0;
                }));
  } else {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
  }
}

function dispatch(command, instance) {
  return $$Promise.tapError($$Promise.mapOk($$Promise.flatMap($$Promise.tap($$Promise.flatMapOk($$Promise.flatMap($$Promise.tap(handleLocalCommand(command, instance), (function (param) {
                                        return Instance__TextEditors$AgdaMode.startCheckpoint(command, instance);
                                      })), (function (x) {
                                    return $$Promise.map(Curry._1(instance[/* view */2][/* updateIsPending */5], true), (function (param) {
                                                  return x;
                                                }));
                                  })), (function (param) {
                                return handleRemoteCommand(instance, handleResponse, param);
                              })), (function (param) {
                            return Instance__TextEditors$AgdaMode.endCheckpoint(instance);
                          })), (function (x) {
                        return $$Promise.map(Curry._1(instance[/* view */2][/* updateIsPending */5], false), (function (param) {
                                      return x;
                                    }));
                      })), (function (param) {
                    return Curry._1(instance[/* onDispatch */10][/* emit */1], /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* () */0]));
                  })), (function (error) {
                return Curry._1(instance[/* onDispatch */10][/* emit */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [error]));
              }));
}

var Goals = 0;

var Highlightings = 0;

var Connections = 0;

var TextEditors = 0;

exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handleCommandError = handleCommandError;
exports.handleDisplayInfo = handleDisplayInfo;
exports.handleResponse = handleResponse;
exports.handleResponseAndRecoverCursor = handleResponseAndRecoverCursor;
exports.handleLocalCommand = handleLocalCommand;
exports.handleRemoteCommand = handleRemoteCommand;
exports.dispatch = dispatch;
/* fs Not a pure module */
