// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Tab$AgdaMode = require("./Tab.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Panel$AgdaMode = require("./Panel/Panel.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Settings$AgdaMode = require("./Settings/Settings.bs.js");
var MiniEditor$AgdaMode = require("./MiniEditor.bs.js");
var Type__View$AgdaMode = require("../type/Type__View.bs.js");

function createBottomPanel(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function initialState(param) {
  return /* record */Block.record([
            "header",
            "body",
            "maxHeight",
            "mountAt",
            "isActive",
            "shouldDisplay",
            "isPending",
            "settingsView",
            "connection",
            "connectionError",
            "mode"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                0
              ]),
            0,
            170,
            Block.variant("Bottom", 0, [createBottomPanel(/* () */0)]),
            false,
            false,
            false,
            undefined,
            undefined,
            undefined,
            0
          ]);
}

function mountPanel(editors, mountTo, self) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                  return "[Agda Mode] " + editors[/* source */1].getTitle();
                }), (function (param, param$1, previousItem) {
                  var pane = atom.workspace.paneForItem(previousItem);
                  pane.activate();
                  pane.activateItem(previousItem);
                  return /* () */0;
                }), undefined, (function (param) {
                  return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */3];
  if (match.tag) {
    if (mountTo) {
      return /* () */0;
    } else {
      Curry._1(match[0][/* kill */1], /* () */0);
      return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 4, [/* Bottom */Block.variant("Bottom", 0, [createBottomPanel(/* () */0)])]));
    }
  } else if (mountTo) {
    return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 4, [/* Pane */Block.variant("Pane", 1, [createTab(/* () */0)])]));
  } else {
    return /* () */0;
  }
}

function mountSettings(editors, handles, open_, self) {
  var match = self[/* state */1][/* settingsView */7];
  if (match !== undefined) {
    if (open_) {
      return Event$AgdaMode.emitOk(true, handles[/* onSettingsView */12]);
    } else {
      Curry._1(match[/* kill */1], /* () */0);
      Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 3, [undefined]));
      return Event$AgdaMode.emitOk(false, handles[/* onSettingsView */12]);
    }
  } else if (open_) {
    var tab = Tab$AgdaMode.make(editors[/* source */1], (function (param) {
            return "[Settings] " + editors[/* source */1].getTitle();
          }), (function (param, param$1, param$2) {
            return Event$AgdaMode.emitOk(true, handles[/* onSettingsView */12]);
          }), undefined, (function (param) {
            Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 2, [false]));
            return Event$AgdaMode.emitOk(false, handles[/* onSettingsView */12]);
          }), undefined, /* () */0);
    return Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 3, [tab]));
  } else {
    return 0;
  }
}

function reducer(editors, handles, action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          var match = state[/* mountAt */3];
          if (match.tag) {
            return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                          return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [/* ToBottom */0]));
                        })]);
          } else {
            return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                          return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [/* ToPane */1]));
                        })]);
          }
      case 1 : 
          var match$1 = state[/* mountAt */3];
          if (match$1.tag) {
            var tab = match$1[0];
            return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                      /* record */Block.record([
                          "header",
                          "body",
                          "maxHeight",
                          "mountAt",
                          "isActive",
                          "shouldDisplay",
                          "isPending",
                          "settingsView",
                          "connection",
                          "connectionError",
                          "mode"
                        ], [
                          state[/* header */0],
                          state[/* body */1],
                          state[/* maxHeight */2],
                          state[/* mountAt */3],
                          true,
                          state[/* shouldDisplay */5],
                          state[/* isPending */6],
                          state[/* settingsView */7],
                          state[/* connection */8],
                          state[/* connectionError */9],
                          state[/* mode */10]
                        ]),
                      (function (param) {
                          return Curry._1(tab[/* activate */2], /* () */0);
                        })
                    ]);
          } else {
            return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                          "header",
                          "body",
                          "maxHeight",
                          "mountAt",
                          "isActive",
                          "shouldDisplay",
                          "isPending",
                          "settingsView",
                          "connection",
                          "connectionError",
                          "mode"
                        ], [
                          state[/* header */0],
                          state[/* body */1],
                          state[/* maxHeight */2],
                          state[/* mountAt */3],
                          true,
                          state[/* shouldDisplay */5],
                          state[/* isPending */6],
                          state[/* settingsView */7],
                          state[/* connection */8],
                          state[/* connectionError */9],
                          state[/* mode */10]
                        ])]);
          }
      case 2 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        false,
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var sort = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (_self) {
                        return Editors$AgdaMode.Focus[/* on */1](sort, editors);
                      })]);
      case 1 : 
          var ref = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (_self) {
                        return MiniEditor$AgdaMode.Model[/* setRef */4](ref, editors[/* query */2]);
                      })]);
      case 2 : 
          var open_ = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                        return mountSettings(editors, handles, open_, param);
                      })]);
      case 3 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        action[0],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      case 4 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        action[0],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      case 5 : 
          var mountTo = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                        return mountPanel(editors, mountTo, param);
                      })]);
      case 6 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        action[0],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      case 7 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        action[0],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      case 8 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        action[0],
                        action[1],
                        state[/* mode */10]
                      ])]);
      case 9 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        action[0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      case 10 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        action[0],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        state[/* mode */10]
                      ])]);
      case 11 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "isActive",
                        "shouldDisplay",
                        "isPending",
                        "settingsView",
                        "connection",
                        "connectionError",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* isActive */4],
                        state[/* shouldDisplay */5],
                        state[/* isPending */6],
                        state[/* settingsView */7],
                        state[/* connection */8],
                        state[/* connectionError */9],
                        action[0]
                      ])]);
      case 12 : 
          var $$event = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                        return Event$AgdaMode.emitOk($$event, handles[/* onMouseEvent */17]);
                      })]);
      
    }
  }
}

var component = ReasonReact.reducerComponent("View");

function make(editors, handles, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (activate) {
                              return Curry._1(self[/* send */3], activate ? /* Activate */1 : /* Deactivate */2);
                            }))(handles[/* activatePanel */3]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                              Curry._1(self[/* send */3], /* Activate */1);
                              Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 11, [/* Display */0]));
                              Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 9, [param[0]]));
                              return Curry._1(self[/* send */3], /* UpdateBody */Block.variant("UpdateBody", 10, [param[1]]));
                            }))(handles[/* display */0]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                              Curry._1(self[/* send */3], /* Activate */1);
                              Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 11, [/* Inquire */1]));
                              Curry._1(self[/* send */3], /* Focus */Block.variant("Focus", 0, [/* Query */1]));
                              Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 9, [param[0]]));
                              return Event$AgdaMode.emitOk(/* tuple */[
                                          param[1],
                                          param[2]
                                        ], handles[/* inquireQuery */9]);
                            }))(handles[/* inquire */1]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                              return Curry._1(self[/* send */3], /* ToggleDocking */0);
                            }))(handles[/* toggleDocking */2]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (isPending) {
                              return Curry._1(self[/* send */3], /* UpdateIsPending */Block.variant("UpdateIsPending", 7, [isPending]));
                            }))(handles[/* updateIsPending */4]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (shouldDisplay) {
                              return Curry._1(self[/* send */3], /* UpdateIsLoadedOrIsTyping */Block.variant("UpdateIsLoadedOrIsTyping", 6, [shouldDisplay]));
                            }))(handles[/* updateShouldDisplay */5]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.on((function (param) {
                            Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 11, [/* Display */0]));
                            return Curry._1(self[/* send */3], /* Focus */Block.variant("Focus", 0, [/* Source */0]));
                          }), handles[/* onInquireQuery */10]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                              console.log("destroy!");
                              return /* () */0;
                            }))(handles[/* destroy */14]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (activate) {
                              return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 2, [activate]));
                            }))(handles[/* activateSettingsView */11]));
                return Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                                    return Curry._1(self[/* send */3], /* UpdateConnection */Block.variant("UpdateConnection", 8, [
                                                  param[0],
                                                  param[1]
                                                ]));
                                  }))(handles[/* updateConnection */6]));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var settingsView = match[/* settingsView */7];
                var isActive = match[/* isActive */4];
                var mountAt = match[/* mountAt */3];
                var panelElement;
                panelElement = mountAt.tag ? mountAt[0][/* element */0] : mountAt[0];
                var settingsElement = settingsView !== undefined ? Caml_option.some(settingsView[/* element */0]) : undefined;
                var hidden;
                hidden = mountAt.tag ? false : !(isActive && match[/* shouldDisplay */5]);
                return React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, Curry._2(Type__View$AgdaMode.MouseEmitter[/* Provider */1][/* make */0], (function (ev) {
                                      return Curry._1(self[/* send */3], /* MouseEvent */Block.variant("MouseEvent", 12, [ev]));
                                    }), /* array */[
                                    ReasonReact.element(undefined, undefined, Panel$AgdaMode.make(editors, panelElement, (function (mountTo) {
                                                return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [mountTo]));
                                              }), match[/* body */1], match[/* header */0], mountAt, match[/* mode */10], hidden, settingsView, match[/* isPending */6], isActive, handles[/* onInquireQuery */10], (function (ref) {
                                                return Curry._1(self[/* send */3], /* SetQueryRef */Block.variant("SetQueryRef", 1, [ref]));
                                              }), editors[/* query */2][/* placeholder */1], editors[/* query */2][/* value */0], handles[/* interceptAndInsertKey */16], handles[/* activateInputMethod */15], (function (status) {
                                                return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 2, [status]));
                                              }), /* array */[])),
                                    ReasonReact.element(undefined, undefined, Settings$AgdaMode.make(handles[/* inquireConnection */7], handles[/* onInquireConnection */8], match[/* connection */8], match[/* connectionError */9], handles[/* navigateSettingsView */13], settingsElement, /* array */[]))
                                  ])));
              }),
            initialState,
            component[/* retainedProps */11],
            (function (param, param$1) {
                return reducer(editors, handles, param, param$1);
              }),
            component[/* jsElementWrapped */13]
          ]);
}

function initialize(editors) {
  var element = document.createElement("article");
  var handles = View$AgdaMode.makeHandles(/* () */0);
  var view = View$AgdaMode.make(handles);
  var component = ReasonReact.element(undefined, undefined, make(editors, handles, /* array */[]));
  ReactDom.render(component, element);
  return view;
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.createBottomPanel = createBottomPanel;
exports.initialState = initialState;
exports.mountPanel = mountPanel;
exports.mountSettings = mountSettings;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
exports.initialize = initialize;
/* component Not a pure module */
