// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDom = require("react-dom");
var Tab$AgdaMode = require("./Tab.bs.js");
var Hook$AgdaMode = require("./Hook.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Panel$AgdaMode = require("./Panel/Panel.bs.js");
var Channels$AgdaMode = require("../Channels.bs.js");
var Settings$AgdaMode = require("./Settings/Settings.bs.js");
var Type__View$AgdaMode = require("../Type/Type__View.bs.js");

function Root(Props) {
  var editors = Props.editors;
  var handles = Props.handles;
  var channels = Props.channels;
  var match = Hook$AgdaMode.useState(false);
  var setSettingsActivation = match[1];
  var settingsActivated = match[0];
  var match$1 = Hook$AgdaMode.useState(undefined);
  var setSettingsView = match$1[1];
  var settingsView = match$1[0];
  var settingsElement = Rebase.$$Option[/* map */0](Tab$AgdaMode.getElement, settingsView);
  Hook$AgdaMode.useEventListener(setSettingsActivation, handles[/* activateSettingsView */3]);
  React.useEffect((function () {
          if (settingsView !== undefined) {
            if (settingsActivated) {
              Event$AgdaMode.emitOk(true, handles[/* onSettingsView */4]);
              return undefined;
            } else {
              Tab$AgdaMode.kill(settingsView);
              Curry._1(setSettingsView, undefined);
              Event$AgdaMode.emitOk(false, handles[/* onSettingsView */4]);
              return undefined;
            }
          } else if (settingsActivated) {
            var tab = Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                    return "[Settings] " + editors[/* source */1].getTitle();
                  }), "settings", (function (param, param$1, param$2) {
                    return Event$AgdaMode.emitOk(true, handles[/* onSettingsView */4]);
                  }), undefined, (function (param) {
                    Curry._1(setSettingsActivation, false);
                    return Event$AgdaMode.emitOk(false, handles[/* onSettingsView */4]);
                  }), undefined, /* () */0);
            Curry._1(setSettingsView, tab);
            return undefined;
          } else {
            return undefined;
          }
        }), /* array */[settingsActivated]);
  var match$2 = React.useReducer(Type__View$AgdaMode.Debug[/* reducer */0], Type__View$AgdaMode.Debug[/* initialState */1]);
  return React.createElement(React.Fragment, undefined, React.createElement(Channels$AgdaMode.Provider[/* make */0], {
                  value: channels,
                  children: React.createElement(Type__View$AgdaMode.Mouse[/* Provider */1][/* make */0], {
                        value: (function ($$event) {
                            return Event$AgdaMode.emitOk($$event, handles[/* onMouseEvent */7]);
                          }),
                        children: React.createElement(Type__View$AgdaMode.Debug[/* Provider */3][/* make */0], {
                              value: match$2[1],
                              children: null
                            }, React.createElement(Panel$AgdaMode.make, {
                                  editors: editors,
                                  settingsActivated: settingsActivated,
                                  onInputMethodChange: handles[/* onInputMethodChange */6],
                                  onSettingsViewToggle: setSettingsActivation,
                                  onInquireQuery: handles[/* onInquire */0]
                                }), React.createElement(Settings$AgdaMode.make, {
                                  inquireConnection: handles[/* inquireConnection */1],
                                  onInquireConnection: handles[/* onInquireConnection */2],
                                  navigate: handles[/* navigateSettingsView */5],
                                  debug: match$2[0],
                                  element: settingsElement
                                }))
                      })
                }));
}

function initialize(editors) {
  var element = document.createElement("article");
  var handles = View$AgdaMode.makeHandles(/* () */0);
  var channels = Channels$AgdaMode.make(/* () */0);
  var view = View$AgdaMode.make(handles, channels);
  var component = React.createElement(Root, {
        editors: editors,
        handles: handles,
        channels: channels
      });
  ReactDom.render(component, element);
  return view;
}

var $$Event = 0;

var make = Root;

exports.$$Event = $$Event;
exports.make = make;
exports.initialize = initialize;
/* react Not a pure module */
