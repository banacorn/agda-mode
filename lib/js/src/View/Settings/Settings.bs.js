// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Async$AgdaMode = require("../../Util/Async.bs.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Channels$AgdaMode = require("../Channels.bs.js");
var Settings__Log$AgdaMode = require("./Settings__Log.bs.js");
var Settings__Debug$AgdaMode = require("./Settings__Debug.bs.js");
var Settings__Breadcrumb$AgdaMode = require("./Settings__Breadcrumb.bs.js");
var Settings__Connection$AgdaMode = require("./Settings__Connection.bs.js");
var Settings__InputMethod$AgdaMode = require("./Settings__InputMethod.bs.js");

function at(x, y, classNames) {
  return classNames + Util$AgdaMode.React[/* showWhen */5](Caml_obj.caml_equal(x, y));
}

function Settings(Props) {
  var navigate = Props.navigate;
  var debug = Props.debug;
  var element = Props.element;
  var channels = React.useContext(Channels$AgdaMode.context);
  var match = Hook$AgdaMode.useState(/* tuple */[
        undefined,
        undefined
      ]);
  var match$1 = match[0];
  var connection = match$1[0];
  Hook$AgdaMode.useChannel(Curry._2(Rebase.Fn[/* >> */6], match[1], Async$AgdaMode.resolve), channels[/* updateConnection */9]);
  var match$2 = Hook$AgdaMode.useState(/* Root */0);
  var setURI = match$2[1];
  var uri = match$2[0];
  React.useEffect((function () {
          return Event$AgdaMode.onOk(setURI)(navigate);
        }), /* array */[]);
  var inDevMode = atom.inDevMode();
  if (element !== undefined) {
    return ReactDom.createPortal(React.createElement("section", {
                    className: "agda-settings",
                    tabIndex: -1
                  }, React.createElement(Settings__Breadcrumb$AgdaMode.make, {
                        uri: uri,
                        onNavigate: setURI
                      }), React.createElement("div", {
                        className: "agda-settings-pages"
                      }, React.createElement("ul", {
                            className: at(/* Root */0, uri, "agda-settings-menu")
                          }, React.createElement("li", {
                                onClick: (function (param) {
                                    return Curry._1(setURI, /* Connection */1);
                                  })
                              }, React.createElement("span", {
                                    className: "icon icon-plug"
                                  }, "Connection")), React.createElement("li", {
                                onClick: (function (param) {
                                    return Curry._1(setURI, /* Log */2);
                                  })
                              }, React.createElement("span", {
                                    className: "icon icon-comment-discussion"
                                  }, "Log")), React.createElement("li", {
                                onClick: (function (param) {
                                    return Curry._1(setURI, /* InputMethod */3);
                                  })
                              }, React.createElement("span", {
                                    className: "icon icon-keyboard"
                                  }, "Input Method")), inDevMode ? React.createElement("li", {
                                  onClick: (function (param) {
                                      return Curry._1(setURI, /* Debug */4);
                                    })
                                }, React.createElement("span", {
                                      className: "icon icon-terminal"
                                    }, "Debug")) : null), React.createElement(Settings__Connection$AgdaMode.make, {
                            connection: connection,
                            error: match$1[1],
                            hidden: uri !== /* Connection */1
                          }), React.createElement(Settings__Log$AgdaMode.make, {
                            connection: connection,
                            hidden: uri !== /* Log */2
                          }), React.createElement(Settings__InputMethod$AgdaMode.make, {
                            hidden: uri !== /* InputMethod */3
                          }), React.createElement(Settings__Debug$AgdaMode.make, {
                            debug: debug,
                            hidden: uri !== /* Debug */4
                          }))), Caml_option.valFromOption(element));
  } else {
    return null;
  }
}

var URI = 0;

var make = Settings;

exports.URI = URI;
exports.at = at;
exports.make = make;
/* react Not a pure module */
