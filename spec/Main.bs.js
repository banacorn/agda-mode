// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var N$AgdaMode = require("../src/Node/N.bs.js");
var GitBranch = require("git-branch");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");

function on(br, test) {
  return GitBranch().then((function (name) {
                if (name === br) {
                  return Promise.resolve(Curry._1(test, /* () */0));
                } else {
                  return Promise.resolve(/* () */0);
                }
              }));
}

var readFile = Util.promisify((function (prim, prim$1) {
        Fs.readFile(prim, prim$1);
        return /* () */0;
      }));

on("dev", (function (param) {
        return Mocha$BsMocha.describe("Development")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("Entry points to AgdaMode.bs")(undefined, undefined, undefined, (function (param) {
                                    return readFile("./package.json").then((function (content) {
                                                  console.log(content);
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

on("master", (function (param) {
        return Mocha$BsMocha.describe("Release")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("Production bundle exists")(undefined, undefined, undefined, (function (param) {
                              return new Promise((function (resolve, reject) {
                                            Fs.access("./lib/js/bundled.js", (function (err) {
                                                    if (err !== undefined) {
                                                      return reject([
                                                                  N$AgdaMode.Exception,
                                                                  Caml_option.valFromOption(err)
                                                                ]);
                                                    } else {
                                                      return resolve(0);
                                                    }
                                                  }));
                                            return /* () */0;
                                          }));
                            }));
                      return Promise$BsMocha.it("Entry points to the production bundle")(undefined, undefined, undefined, (function (param) {
                                    return readFile("./package.json").then((function (content) {
                                                  console.log(content);
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

var DispatchFailure = Caml_exceptions.create("Main-AgdaMode.DispatchFailure");

function openBlankAgdaFile(param) {
  return atom.workspace.open("../test/asset/Blank.agda");
}

function getActivePackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getActivePackages());
}

function getLoadedPackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getLoadedPackages());
}

function dispatch(editor, $$event) {
  var element = atom.views.getView(editor);
  var result = atom.commands.dispatch(element, "agda-mode:load");
  if (result !== undefined) {
    console.log("dispatched!");
    return Promise.resolve(/* () */0);
  } else {
    return Promise.reject([
                DispatchFailure,
                $$event
              ]);
  }
}

exports.on = on;
exports.readFile = readFile;
exports.DispatchFailure = DispatchFailure;
exports.openBlankAgdaFile = openBlankAgdaFile;
exports.getActivePackageNames = getActivePackageNames;
exports.getLoadedPackageNames = getLoadedPackageNames;
exports.dispatch = dispatch;
/* readFile Not a pure module */
