// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var Translator$AgdaMode = require("../Panel/InputMethod/Translator.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Settings__InputMethod$SymbolLookup(Props) {
  var match = Hook$AgdaMode.useState("");
  var setInput = match[1];
  var translation = Translator$AgdaMode.translate(match[0]);
  var editorRef = React.useRef(undefined);
  var onChange = function (param) {
    var match = editorRef.current;
    if (match !== undefined) {
      return Curry._1(setInput, Caml_option.valFromOption(match).getText());
    } else {
      return /* () */0;
    }
  };
  var candidateSymbols = Util$AgdaMode.React[/* manyIn */0]("span")(Rebase.$$Array[/* map */0]((function (symbol) {
              return React.createElement("span", {
                          className: "inline-block highlight"
                        }, symbol);
            }), translation[/* candidateSymbols */3]));
  return React.createElement("section", undefined, React.createElement("h2", undefined, "Symbol lookup"), React.createElement("p", undefined, "Enter a key sequence and get corresponding symbols"), React.createElement(MiniEditor$AgdaMode.make, {
                  value: "",
                  placeholder: "enter some key sequence here, e.g 'lambda'",
                  hidden: false,
                  onChange: onChange,
                  onEditorRef: (function (ref) {
                      editorRef.current = Caml_option.some(ref);
                      return /* () */0;
                    })
                }), React.createElement("p", {
                  className: "native-key-bindings",
                  id: "candidate-symbols",
                  tabIndex: -1
                }, candidateSymbols));
}

var SymbolLookup = /* module */Caml_chrome_debugger.localModule(["make"], [Settings__InputMethod$SymbolLookup]);

function Settings__InputMethod$KeySequenceLookup(Props) {
  var match = Hook$AgdaMode.useState(/* array */[]);
  var setInput = match[1];
  var editorRef = React.useRef(undefined);
  var onChange = function (param) {
    return Rebase.$$Option[/* forEach */8](setInput, Rebase.$$Option[/* flatMap */5](Translator$AgdaMode.lookup, Rebase.$$Option[/* map */0]((function (prim) {
                          return prim.getText();
                        }), editorRef.current)));
  };
  var results = Util$AgdaMode.React[/* manyIn */0]("span")(Rebase.$$Array[/* map */0]((function (sequence) {
              return React.createElement("span", {
                          className: "inline-block highlight"
                        }, sequence);
            }), match[0]));
  return React.createElement("section", undefined, React.createElement("h2", undefined, "Key sequences lookup"), React.createElement("p", undefined, "Enter a symbol and get corresponding key sequences"), React.createElement(MiniEditor$AgdaMode.make, {
                  value: "",
                  placeholder: "enter some symbol here, e.g \'Î»\'",
                  hidden: false,
                  onChange: onChange,
                  onEditorRef: (function (ref) {
                      editorRef.current = Caml_option.some(ref);
                      return /* () */0;
                    })
                }), React.createElement("p", undefined, results));
}

var KeySequenceLookup = /* module */Caml_chrome_debugger.localModule(["make"], [Settings__InputMethod$KeySequenceLookup]);

function Settings__InputMethod(Props) {
  var hidden = Props.hidden;
  var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* :: */Caml_chrome_debugger.simpleVariant("::", [
              "agda-settings-input-method",
              /* [] */0
            ])));
  return React.createElement("section", {
              className: className
            }, React.createElement("h1", undefined, React.createElement("span", {
                      className: "icon icon-keyboard"
                    }), React.createElement("span", undefined, "Input Method")), React.createElement("hr", undefined), React.createElement(Settings__InputMethod$SymbolLookup, { }), React.createElement("hr", undefined), React.createElement(Settings__InputMethod$KeySequenceLookup, { }), React.createElement("hr", undefined));
}

var make = Settings__InputMethod;

exports.SymbolLookup = SymbolLookup;
exports.KeySequenceLookup = KeySequenceLookup;
exports.make = make;
/* react Not a pure module */
