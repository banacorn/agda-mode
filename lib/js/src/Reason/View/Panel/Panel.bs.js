// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Dashboard$AgdaMode = require("./Dashboard.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "header",
            "hidden",
            "isPending",
            "settingsViewOn",
            "mountAt"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                ""
              ]),
            false,
            false,
            false,
            "bottom"
          ]);
}

function reducer(action, state) {
  if (action.tag) {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "header",
                  "hidden",
                  "isPending",
                  "settingsViewOn",
                  "mountAt"
                ], [
                  state[/* header */0],
                  state[/* hidden */1],
                  action[0],
                  state[/* settingsViewOn */3],
                  state[/* mountAt */4]
                ])]);
  } else {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "header",
                  "hidden",
                  "isPending",
                  "settingsViewOn",
                  "mountAt"
                ], [
                  action[0],
                  state[/* hidden */1],
                  state[/* isPending */2],
                  state[/* settingsViewOn */3],
                  state[/* mountAt */4]
                ])]);
  }
}

var component = ReasonReact.reducerComponent("Panel");

function make(updateHeader, updateIsPending, onMountChange, onSettingsViewToggle, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                Curry._1(updateHeader, (function (state) {
                        return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 0, [/* record */Block.record([
                                          "text",
                                          "style"
                                        ], [
                                          state.text,
                                          state.style
                                        ])]));
                      }));
                Curry._1(updateIsPending, (function (state) {
                        return Curry._1(self[/* send */3], /* UpdateIsPending */Block.variant("UpdateIsPending", 1, [state.isPending]));
                      }));
                return React.createElement("section", undefined, React.createElement("section", {
                                className: "panel-heading agda-header-container"
                              }, ReasonReact.element(undefined, undefined, Dashboard$AgdaMode.make(match[/* header */0], match[/* hidden */1], match[/* isPending */2], match[/* mountAt */4], onMountChange, match[/* settingsViewOn */3], onSettingsViewToggle, /* array */[]))));
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.updateHeader, jsProps.updateIsPending, jsProps.onMountChange, jsProps.onSettingsViewToggle, /* array */[]);
      }));

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
