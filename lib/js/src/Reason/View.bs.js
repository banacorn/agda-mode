// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReactDom = require("react-dom");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Tab$AgdaMode = require("./View/Tab.bs.js");
var Panel$AgdaMode = require("./View/Panel/Panel.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var EditorNotSet = Caml_exceptions.create("View-AgdaMode.EditorNotSet");

function initialState(editor, param) {
  return /* record */Block.record([
            "header",
            "body",
            "mountAt",
            "editor",
            "mode",
            "query"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                ""
              ]),
            Block.record([
                "maxHeight",
                "raw"
              ], [
                170,
                0
              ]),
            0,
            editor,
            0,
            Block.record([
                "placeholder",
                "value"
              ], [
                "",
                ""
              ])
          ]);
}

function createElement(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function mountPanel(self, editor, mountTo) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(editor, undefined, (function (param) {
                  return /* () */0;
                }), (function (param) {
                  return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 0, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */2];
  if (typeof match === "number") {
    switch (mountTo) {
      case 0 : 
          var element = createElement(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 1, [/* Bottom */Block.variant("Bottom", 0, [element])]));
      case 1 : 
          var tab = createTab(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 1, [/* Pane */Block.variant("Pane", 1, [tab])]));
      case 2 : 
          return /* () */0;
      
    }
  } else if (match.tag) {
    var tab$1 = match[0];
    switch (mountTo) {
      case 0 : 
          Curry._1(tab$1[/* kill */1], /* () */0);
          var element$1 = createElement(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 1, [/* Bottom */Block.variant("Bottom", 0, [element$1])]));
      case 1 : 
          return /* () */0;
      case 2 : 
          Curry._1(tab$1[/* kill */1], /* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 1, [/* Nowhere */0]));
      
    }
  } else {
    var element$2 = match[0];
    switch (mountTo) {
      case 0 : 
          return /* () */0;
      case 1 : 
          ReactDom.unmountComponentAtNode(element$2);
          var tab$2 = createTab(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 1, [/* Pane */Block.variant("Pane", 1, [tab$2])]));
      case 2 : 
          Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 1, [/* Nowhere */0]));
          ReactDom.unmountComponentAtNode(element$2);
          return /* () */0;
      
    }
  }
}

function renderPanel(self) {
  var match = self[/* state */1];
  var query = match[/* query */5];
  var mode = match[/* mode */4];
  var mountAt = match[/* mountAt */2];
  var body = match[/* body */1];
  var header = match[/* header */0];
  if (typeof mountAt === "number") {
    return /* () */0;
  } else if (mountAt.tag) {
    ReactDom.render(ReasonReact.element(undefined, undefined, Panel$AgdaMode.make((function (mountTo) {
                    return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 0, [mountTo]));
                  }), body, header, mountAt, mode, query, /* array */[])), mountAt[0][/* element */0]);
    return /* () */0;
  } else {
    ReactDom.render(ReasonReact.element(undefined, undefined, Panel$AgdaMode.make((function (mountTo) {
                    return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 0, [mountTo]));
                  }), body, header, mountAt, mode, query, /* array */[])), mountAt[0]);
    return /* () */0;
  }
}

function reducer(action, state) {
  switch (action.tag | 0) {
    case 0 : 
        var mountTo = action[0];
        return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                      return mountPanel(self, state[/* editor */3], mountTo);
                    })]);
    case 1 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editor",
                      "mode",
                      "query"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      action[0],
                      state[/* editor */3],
                      state[/* mode */4],
                      state[/* query */5]
                    ]),
                  renderPanel
                ]);
    case 2 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editor",
                      "mode",
                      "query"
                    ], [
                      action[0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* editor */3],
                      state[/* mode */4],
                      state[/* query */5]
                    ]),
                  renderPanel
                ]);
    case 3 : 
        var init = state[/* body */1];
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editor",
                      "mode",
                      "query"
                    ], [
                      state[/* header */0],
                      Block.record([
                          "maxHeight",
                          "raw"
                        ], [
                          init[/* maxHeight */0],
                          action[0]
                        ]),
                      state[/* mountAt */2],
                      state[/* editor */3],
                      state[/* mode */4],
                      state[/* query */5]
                    ]),
                  renderPanel
                ]);
    case 4 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editor",
                      "mode",
                      "query"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* editor */3],
                      action[0],
                      state[/* query */5]
                    ]),
                  renderPanel
                ]);
    case 5 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editor",
                      "mode",
                      "query"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* editor */3],
                      state[/* mode */4],
                      action[0]
                    ]),
                  renderPanel
                ]);
    
  }
}

var updateHeader = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateRawBody = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateMode = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateQuery = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateMountTo = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

function jsUpdateEmacsBody(raw) {
  return Curry._1(updateRawBody[0], /* RawEmacs */Block.variant("RawEmacs", 0, [/* record */Block.record([
                    "kind",
                    "header",
                    "body"
                  ], [
                    raw.kind,
                    raw.header,
                    raw.body
                  ])]));
}

function jsUpdateJSONBody(raw) {
  return Curry._1(updateRawBody[0], /* RawJSON */Block.variant("RawJSON", 1, [/* record */Block.record([
                    "kind",
                    "rawJSON",
                    "rawString"
                  ], [
                    raw.kind,
                    raw.rawJSON,
                    raw.rawString
                  ])]));
}

function jsUpdateHeader(raw) {
  return Curry._1(updateHeader[0], /* record */Block.record([
                "text",
                "style"
              ], [
                raw.text,
                raw.style
              ]));
}

function jsUpdateMode(mode) {
  if (mode === "display") {
    return Curry._1(updateMode[0], /* Display */0);
  } else {
    return Curry._1(updateMode[0], /* Query */1);
  }
}

function jsUpdateQuery(obj) {
  return Curry._1(updateQuery[0], /* record */Block.record([
                "placeholder",
                "value"
              ], [
                obj.placeholder,
                obj.value
              ]));
}

function jsMountPanel(jsMountTo) {
  var translateJSMountTo = function (jsMountTo) {
    switch (jsMountTo) {
      case "bottom" : 
          return /* ToBottom */0;
      case "pane" : 
          return /* ToPane */1;
      default:
        return /* ToNowhere */2;
    }
  };
  return Curry._1(updateMountTo[0], translateJSMountTo(jsMountTo));
}

var component = ReasonReact.reducerComponent("View");

function make(editor, updateRawBody, updateHeader, updateQuery, updateMode, updateMountTo, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                Curry._1(updateMountTo, (function (mountTo) {
                        return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 0, [mountTo]));
                      }));
                Curry._1(updateHeader, (function (header) {
                        return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 2, [header]));
                      }));
                Curry._1(updateRawBody, (function (rawBody) {
                        return Curry._1(self[/* send */3], /* UpdateRawBody */Block.variant("UpdateRawBody", 3, [rawBody]));
                      }));
                Curry._1(updateMode, (function (mode) {
                        return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 4, [mode]));
                      }));
                Curry._1(updateQuery, (function (query) {
                        return Curry._1(self[/* send */3], /* UpdateQuery */Block.variant("UpdateQuery", 5, [query]));
                      }));
                return null;
              }),
            (function (param) {
                return initialState(editor, param);
              }),
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

function initialize(editor) {
  var element = document.createElement("article");
  ReactDom.render(ReasonReact.element(undefined, undefined, make(editor, (function (handle) {
                  updateRawBody[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateHeader[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateQuery[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateMode[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateMountTo[0] = handle;
                  return /* () */0;
                }), /* array */[])), element);
  return /* () */0;
}

exports.EditorNotSet = EditorNotSet;
exports.initialState = initialState;
exports.createElement = createElement;
exports.mountPanel = mountPanel;
exports.renderPanel = renderPanel;
exports.reducer = reducer;
exports.updateHeader = updateHeader;
exports.updateRawBody = updateRawBody;
exports.updateMode = updateMode;
exports.updateQuery = updateQuery;
exports.updateMountTo = updateMountTo;
exports.jsUpdateEmacsBody = jsUpdateEmacsBody;
exports.jsUpdateJSONBody = jsUpdateJSONBody;
exports.jsUpdateHeader = jsUpdateHeader;
exports.jsUpdateMode = jsUpdateMode;
exports.jsUpdateQuery = jsUpdateQuery;
exports.jsMountPanel = jsMountPanel;
exports.component = component;
exports.make = make;
exports.initialize = initialize;
/* component Not a pure module */
