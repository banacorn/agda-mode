// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Async$AgdaMode = require("./Util/Async.bs.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Channel$AgdaMode = require("./Util/Channel.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function makeHandles(param) {
  var onInquire = Event$AgdaMode.make(/* () */0);
  var updateConnection = Event$AgdaMode.make(/* () */0);
  var inquireConnection = Event$AgdaMode.make(/* () */0);
  var onInquireConnection = Event$AgdaMode.make(/* () */0);
  var activateSettingsView = Event$AgdaMode.make(/* () */0);
  var onSettingsView = Event$AgdaMode.make(/* () */0);
  var navigateSettingsView = Event$AgdaMode.make(/* () */0);
  var onInputMethodChange = Event$AgdaMode.make(/* () */0);
  var onMouseEvent = Event$AgdaMode.make(/* () */0);
  var destroy = Channel$AgdaMode.make(/* () */0);
  return /* record */Caml_chrome_debugger.record([
            "onInquire",
            "updateConnection",
            "inquireConnection",
            "onInquireConnection",
            "activateSettingsView",
            "onSettingsView",
            "navigateSettingsView",
            "destroy",
            "onInputMethodChange",
            "onMouseEvent"
          ], [
            onInquire,
            updateConnection,
            inquireConnection,
            onInquireConnection,
            activateSettingsView,
            onSettingsView,
            navigateSettingsView,
            destroy,
            onInputMethodChange,
            onMouseEvent
          ]);
}

function make(handles, channels) {
  var activate = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* activatePanel */0]);
  };
  var deactivate = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* deactivatePanel */1]);
  };
  var toggleDocking = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels[/* toggleDocking */2]);
  };
  var display = function (text, style, body) {
    return Channel$AgdaMode.send(/* tuple */[
                /* record */Caml_chrome_debugger.record([
                    "text",
                    "style"
                  ], [
                    text,
                    style
                  ]),
                body
              ], channels[/* display */3]);
  };
  var inquire = function (text, placeholder, value) {
    return Async$AgdaMode.thenOk((function (param) {
                    return Channel$AgdaMode.send(/* tuple */[
                                /* record */Caml_chrome_debugger.record([
                                    "text",
                                    "style"
                                  ], [
                                    text,
                                    0
                                  ]),
                                placeholder,
                                value
                              ], channels[/* inquire */4]);
                  }))(Async$AgdaMode.mapError((function (param) {
                        return /* Cancelled */0;
                      }))(Channel$AgdaMode.send(/* () */0, channels[/* activatePanel */0])));
  };
  var updateIsPending = function (isPending) {
    return Channel$AgdaMode.send(isPending, channels[/* updateIsPending */5]);
  };
  var onMouseEvent = handles[/* onMouseEvent */9];
  var activateInputMethod = function (activate) {
    return Channel$AgdaMode.send(activate, channels[/* activateInputMethod */6]);
  };
  var interceptAndInsertKey = function (symbol) {
    return Channel$AgdaMode.send(symbol, channels[/* interceptAndInsertKey */7]);
  };
  var onInputMethodChange = handles[/* onInputMethodChange */8];
  var navigateSettings = function (where) {
    return Event$AgdaMode.emitOk(where, handles[/* navigateSettingsView */6]);
  };
  var activateSettings = function (param) {
    return Event$AgdaMode.emitOk(true, handles[/* activateSettingsView */4]);
  };
  var openSettings = function (param) {
    var promise = Event$AgdaMode.once(handles[/* onSettingsView */5]);
    Event$AgdaMode.emitOk(true, handles[/* activateSettingsView */4]);
    return promise;
  };
  var updateConnection = function (connection, error) {
    return Event$AgdaMode.emitOk(/* tuple */[
                connection,
                error
              ], handles[/* updateConnection */1]);
  };
  var onInquireConnection = handles[/* onInquireConnection */3];
  var inquireConnection = function (param) {
    var promise = Event$AgdaMode.once(onInquireConnection);
    Event$AgdaMode.emitOk(/* () */0, handles[/* inquireConnection */2]);
    return promise;
  };
  var onDestroy = Event$AgdaMode.make(/* () */0);
  var destroy = function (param) {
    return Async$AgdaMode.passOk((function (param) {
                    return Event$AgdaMode.emitOk(/* () */0, onDestroy);
                  }))(Async$AgdaMode.thenOk((function (param) {
                        return Channel$AgdaMode.send(/* () */0, handles[/* destroy */7]);
                      }))(Async$AgdaMode.thenOk((function (param) {
                            return Channel$AgdaMode.send(false, channels[/* activateInputMethod */6]);
                          }))(Channel$AgdaMode.send(/* () */0, channels[/* deactivatePanel */1]))));
  };
  return /* record */Caml_chrome_debugger.record([
            "activate",
            "deactivate",
            "toggleDocking",
            "display",
            "inquire",
            "updateIsPending",
            "destroy",
            "onDestroy",
            "onMouseEvent",
            "activateInputMethod",
            "interceptAndInsertKey",
            "onInputMethodChange",
            "navigateSettings",
            "activateSettings",
            "openSettings",
            "updateConnection",
            "onInquireConnection",
            "inquireConnection"
          ], [
            activate,
            deactivate,
            toggleDocking,
            display,
            inquire,
            updateIsPending,
            destroy,
            onDestroy,
            onMouseEvent,
            activateInputMethod,
            interceptAndInsertKey,
            onInputMethodChange,
            navigateSettings,
            activateSettings,
            openSettings,
            updateConnection,
            onInquireConnection,
            inquireConnection
          ]);
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.makeHandles = makeHandles;
exports.make = make;
/* Async-AgdaMode Not a pure module */
