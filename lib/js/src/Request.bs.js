// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Goal$AgdaMode = require("./Goal.bs.js");
var Util$AgdaMode = require("./Util/Util.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Command$AgdaMode = require("./Command.bs.js");

function toAgdaReadableString(version, filepath, request) {
  var path = atom.config.get("agda-mode.libraryPath");
  path.unshift(".");
  var libraryPath = Caml_splice_call.spliceObjApply(", ", "concat", [Belt_Array.map(path, (function (x) {
                return "\"" + (Parser$AgdaMode.filepath(x) + "\"");
              }))]);
  var match = atom.config.get("agda-mode.highlightingMethod");
  var highlightingMethod = match === "Direct" ? "Direct" : "Indirect";
  var commonPart = function (param) {
    if (param) {
      return "IOTCM \"" + (String(filepath) + ("\" NonInteractive " + (String(highlightingMethod) + " ")));
    } else {
      return "IOTCM \"" + (String(filepath) + ("\" None " + (String(highlightingMethod) + " ")));
    }
  };
  var buildRange = function (goal) {
    if (Util$AgdaMode.Version.gte(version, "2.5.1")) {
      return Goal$AgdaMode.buildHaskellRange(false, filepath, goal);
    } else {
      return Goal$AgdaMode.buildHaskellRange(true, filepath, goal);
    }
  };
  if (typeof request === "number") {
    switch (request) {
      case /* Load */0 :
          if (Util$AgdaMode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + "\" [] )"));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + ("\" [" + (String(libraryPath) + "] )"))));
          }
      case /* Abort */1 :
          return commonPart(/* NonInteractive */1) + "( Cmd_abort )";
      case /* Compile */2 :
          var backend = atom.config.get("agda-mode.backend");
          if (Util$AgdaMode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + (String(backend) + (" \"" + (String(filepath) + "\" [] )"))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + (String(backend) + (" \"" + (String(filepath) + ("\" [" + (String(libraryPath) + "] )"))))));
          }
      case /* ToggleDisplayOfImplicitArguments */3 :
          return commonPart(/* NonInteractive */1) + "( ToggleImplicitArgs )";
      case /* SolveConstraints */4 :
          return commonPart(/* NonInteractive */1) + "( Cmd_solveAll Instantiated )";
      case /* ShowConstraints */5 :
          return commonPart(/* NonInteractive */1) + "( Cmd_constraints )";
      case /* ShowGoals */6 :
          return commonPart(/* NonInteractive */1) + "( Cmd_metas )";
      
    }
  } else {
    switch (request.tag | 0) {
      case /* WhyInScope */0 :
          var index = request[1].index;
          var content = Parser$AgdaMode.userInput(request[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + (String(index) + (" noRange \"" + (String(content) + "\" )"))));
      case /* WhyInScopeGlobal */1 :
          var content$1 = Parser$AgdaMode.userInput(request[0]);
          return commonPart(/* None' */0) + ("( Cmd_why_in_scope_toplevel \"" + (String(content$1) + "\" )"));
      case /* SearchAbout */2 :
          var normalization$prime = Command$AgdaMode.Normalization.toString(request[0]);
          var content$2 = Parser$AgdaMode.userInput(request[1]);
          return commonPart(/* None' */0) + ("( Cmd_search_about_toplevel " + (String(normalization$prime) + ("  \"" + (String(content$2) + "\" )"))));
      case /* InferType */3 :
          var index$1 = request[2].index;
          var normalization$prime$1 = Command$AgdaMode.Normalization.toString(request[0]);
          var content$3 = Parser$AgdaMode.userInput(request[1]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_infer " + (String(normalization$prime$1) + (" " + (String(index$1) + (" noRange \"" + (String(content$3) + "\" )"))))));
      case /* InferTypeGlobal */4 :
          var normalization$prime$2 = Command$AgdaMode.Normalization.toString(request[0]);
          var content$4 = Parser$AgdaMode.userInput(request[1]);
          return commonPart(/* None' */0) + ("( Cmd_infer_toplevel " + (String(normalization$prime$2) + (" \"" + (String(content$4) + "\" )"))));
      case /* ModuleContents */5 :
          var index$2 = request[2].index;
          var normalization$prime$3 = Command$AgdaMode.Normalization.toString(request[0]);
          var content$5 = Parser$AgdaMode.userInput(request[1]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_show_module_contents " + (String(normalization$prime$3) + (" " + (String(index$2) + (" noRange \"" + (String(content$5) + "\" )"))))));
      case /* ModuleContentsGlobal */6 :
          var normalization$prime$4 = Command$AgdaMode.Normalization.toString(request[0]);
          var content$6 = Parser$AgdaMode.userInput(request[1]);
          return commonPart(/* None' */0) + ("( Cmd_show_module_contents_toplevel " + (String(normalization$prime$4) + (" \"" + (String(content$6) + "\" )"))));
      case /* ComputeNormalForm */7 :
          var computeMode = request[0];
          var index$3 = request[2].index;
          var computeMode$prime = Command$AgdaMode.ComputeMode.toString(computeMode);
          var ignoreAbstract = Command$AgdaMode.ComputeMode.ignoreAbstract(computeMode);
          var content$7 = Parser$AgdaMode.userInput(request[1]);
          if (Util$AgdaMode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + (String(computeMode$prime) + (" " + (String(index$3) + (" noRange \"" + (String(content$7) + "\" )"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + (String(ignoreAbstract) + (" " + (String(index$3) + (" noRange \"" + (String(content$7) + "\" )"))))));
          }
      case /* ComputeNormalFormGlobal */8 :
          var computeMode$1 = request[0];
          var computeMode$prime$1 = Command$AgdaMode.ComputeMode.toString(computeMode$1);
          var ignoreAbstract$1 = Command$AgdaMode.ComputeMode.ignoreAbstract(computeMode$1);
          var content$8 = Parser$AgdaMode.userInput(request[1]);
          if (Util$AgdaMode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + (String(computeMode$prime$1) + (" \"" + (String(content$8) + "\" )"))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + (String(ignoreAbstract$1) + (" \"" + (String(content$8) + "\" )"))));
          }
      case /* Give */9 :
          var goal = request[0];
          var index$4 = goal.index;
          var content$9 = Goal$AgdaMode.getContent(goal);
          var range = buildRange(goal);
          if (Util$AgdaMode.Version.gte(version, "2.5.3")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give WithoutForce " + (String(index$4) + (" " + (String(range) + (" \"" + (String(content$9) + "\" )"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give " + (String(index$4) + (" " + (String(range) + (" \"" + (String(content$9) + "\" )"))))));
          }
      case /* Refine */10 :
          var goal$1 = request[0];
          var index$5 = goal$1.index;
          var content$10 = Goal$AgdaMode.getContent(goal$1);
          var range$1 = buildRange(goal$1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_refine_or_intro False " + (String(index$5) + (" " + (String(range$1) + (" \"" + (String(content$10) + "\" )"))))));
      case /* Auto */11 :
          var goal$2 = request[0];
          var index$6 = goal$2.index;
          var content$11 = Goal$AgdaMode.getContent(goal$2);
          var range$2 = buildRange(goal$2);
          if (Util$AgdaMode.Version.gte(version, "2.6.0.1")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_autoOne " + (String(index$6) + (" " + (String(range$2) + (" \"" + (String(content$11) + "\" )"))))));
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_auto " + (String(index$6) + (" " + (String(range$2) + (" \"" + (String(content$11) + "\" )"))))));
          }
      case /* Case */12 :
          var goal$3 = request[0];
          var index$7 = goal$3.index;
          var content$12 = Goal$AgdaMode.getContent(goal$3);
          var range$3 = buildRange(goal$3);
          return commonPart(/* NonInteractive */1) + ("( Cmd_make_case " + (String(index$7) + (" " + (String(range$3) + (" \"" + (String(content$12) + "\" )"))))));
      case /* GoalType */13 :
          var index$8 = request[1].index;
          var normalization$prime$5 = Command$AgdaMode.Normalization.toString(request[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type " + (String(normalization$prime$5) + (" " + (String(index$8) + " noRange \"\" )"))));
      case /* Context */14 :
          var index$9 = request[1].index;
          var normalization$prime$6 = Command$AgdaMode.Normalization.toString(request[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_context " + (String(normalization$prime$6) + (" " + (String(index$9) + " noRange \"\" )"))));
      case /* GoalTypeAndContext */15 :
          var index$10 = request[1].index;
          var normalization$prime$7 = Command$AgdaMode.Normalization.toString(request[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context " + (String(normalization$prime$7) + (" " + (String(index$10) + " noRange \"\" )"))));
      case /* GoalTypeAndInferredType */16 :
          var goal$4 = request[1];
          var index$11 = goal$4.index;
          var content$13 = Goal$AgdaMode.getContent(goal$4);
          var normalization$prime$8 = Command$AgdaMode.Normalization.toString(request[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context_infer " + (String(normalization$prime$8) + (" " + (String(index$11) + (" noRange \"" + (String(content$13) + "\" )"))))));
      case /* GotoDefinition */17 :
          var index$12 = request[1].index;
          var content$14 = Parser$AgdaMode.userInput(request[0]);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + (String(index$12) + (" noRange \"" + (String(content$14) + "\" )"))));
      case /* GotoDefinitionGlobal */18 :
          var content$15 = Parser$AgdaMode.userInput(request[0]);
          return commonPart(/* None' */0) + ("( Cmd_why_in_scope_toplevel \"" + (String(content$15) + "\" )"));
      
    }
  }
}

function isLoad(param) {
  if (typeof param === "number") {
    return param === 0;
  } else {
    return false;
  }
}

function toString(string) {
  if (typeof string === "number") {
    switch (string) {
      case /* Load */0 :
          return "Load";
      case /* Abort */1 :
          return "Abort";
      case /* Compile */2 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */3 :
          return "ToggleDisplayOfImplicitArguments";
      case /* SolveConstraints */4 :
          return "SolveConstraints";
      case /* ShowConstraints */5 :
          return "ShowConstraints";
      case /* ShowGoals */6 :
          return "ShowGoals";
      
    }
  } else {
    switch (string.tag | 0) {
      case /* WhyInScope */0 :
          return "WhyInScope \"" + (string[0] + ("\" (Goal " + (String(string[1].index) + ")")));
      case /* WhyInScopeGlobal */1 :
          return "WhyInScope \"" + (string[0] + "\" (Global)");
      case /* SearchAbout */2 :
          return "SearchAbout \"" + (string[1] + ("\" (" + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* InferType */3 :
          return "InferType \"" + (string[1] + ("\" (Goal " + (String(string[2].index) + (", " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")))));
      case /* InferTypeGlobal */4 :
          return "InferType \"" + (string[1] + ("\" (Global, " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* ModuleContents */5 :
          return "ModuleContents \"" + (string[1] + ("\" (Goal " + (String(string[2].index) + (", " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")))));
      case /* ModuleContentsGlobal */6 :
          return "ModuleContents \"" + (string[1] + ("\" (Global, " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* ComputeNormalForm */7 :
          return "ComputeNormalForm \"" + (string[1] + ("\" (Goal " + (String(string[2].index) + (", " + (Command$AgdaMode.ComputeMode.toString(string[0]) + ")")))));
      case /* ComputeNormalFormGlobal */8 :
          return "ComputeNormalForm \"" + (string[1] + ("\" (Global, " + (Command$AgdaMode.ComputeMode.toString(string[0]) + ")")));
      case /* Give */9 :
          return "Give (Goal " + (String(string[0].index) + ")");
      case /* Refine */10 :
          return "Refine (Goal " + (String(string[0].index) + ")");
      case /* Auto */11 :
          return "Auto (Goal " + (String(string[0].index) + ")");
      case /* Case */12 :
          return "Case (Goal " + (String(string[0].index) + ")");
      case /* GoalType */13 :
          return "GoalType (Goal " + (String(string[1].index) + (", " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* Context */14 :
          return "Context (Goal " + (String(string[1].index) + (", " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* GoalTypeAndContext */15 :
          return "GoalTypeAndContext (Goal " + (String(string[1].index) + (", " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* GoalTypeAndInferredType */16 :
          return "GoalTypeAndInferredType (Goal " + (String(string[1].index) + (", " + (Command$AgdaMode.Normalization.toString(string[0]) + ")")));
      case /* GotoDefinition */17 :
          return "GotoDefinition \"" + (string[0] + ("\" (Goal " + (String(string[1].index) + ")")));
      case /* GotoDefinitionGlobal */18 :
          return "GotoDefinition \"" + (string[0] + "\" (Global)");
      
    }
  }
}

exports.toAgdaReadableString = toAgdaReadableString;
exports.isLoad = isLoad;
exports.toString = toString;
/* Goal-AgdaMode Not a pure module */
