// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Request$AgdaMode = require("./Request.bs.js");
var Response$AgdaMode = require("./Response.bs.js");

function serialize(self, i) {
  var fold = function (title, text) {
    return "<details><summary> " + (String(title) + (" </summary>\n<p>\n\n" + (String(text) + "\n\n</p>\n</details>\n")));
  };
  var quote = function (title, xs) {
    var xs$1 = fold(title, Rebase.$$String.joinWith("\n", Rebase.List.fromArray(Rebase.$$Array.map((function (x) {
                        return "```\n" + (String(x) + "\n```\n");
                      }), xs))));
    return Rebase.$$String.joinWith("\n", Rebase.List.fromArray(Rebase.$$Array.map((function (param) {
                          return Rebase.$$Option.mapOr((function (x) {
                                        return "    " + x;
                                      }), "", param);
                        }), xs$1.split(/\n/))));
  };
  var request = Request$AgdaMode.toString(self.request);
  var rawText = quote("raw text", self.response.rawText);
  var sexpression = quote("s-expression", Rebase.$$Array.map(Parser$AgdaMode.SExpression.toString, self.response.sexpression));
  var response = quote("response", Rebase.$$Array.map(Response$AgdaMode.toString, self.response.response));
  var error = quote("error", Rebase.$$Array.map(Parser$AgdaMode.$$Error.toString, self.response.error));
  return "" + (String(i) + (". **" + (String(request) + ("**\n" + (String(rawText) + ("\n" + (String(sexpression) + ("\n" + (String(response) + ("\n" + (String(error) + "\n")))))))))));
}

var Entry = {
  serialize: serialize
};

function createEntry(cmd, log) {
  var entry_response = {
    rawText: [],
    sexpression: [],
    response: [],
    error: []
  };
  var entry = {
    request: cmd,
    response: entry_response
  };
  log.push(entry);
  return /* () */0;
}

function updateLatestEntry(f, log) {
  var n = Rebase.$$Array.length(log);
  var lastEntry = Rebase.$$Array.get(log, n - 1 | 0);
  return Rebase.$$Option.forEach(f, lastEntry);
}

function logRawText(text) {
  return (function (param) {
      return updateLatestEntry((function (entry) {
                    entry.response.rawText.push(text);
                    return /* () */0;
                  }), param);
    });
}

function logSExpression(text) {
  return (function (param) {
      return updateLatestEntry((function (entry) {
                    entry.response.sexpression.push(text);
                    return /* () */0;
                  }), param);
    });
}

function logResponse(text) {
  return (function (param) {
      return updateLatestEntry((function (entry) {
                    entry.response.response.push(text);
                    return /* () */0;
                  }), param);
    });
}

function logError(text) {
  return (function (param) {
      return updateLatestEntry((function (log) {
                    log.response.error.push(text);
                    return /* () */0;
                  }), param);
    });
}

var serialize$1 = Curry._2(Rebase.Fn.$great$great, Curry._2(Rebase.Fn.$great$great, (function (param) {
            return Rebase.$$Array.mapi(serialize, param);
          }), Rebase.List.fromArray), (function (param) {
        return Rebase.$$String.joinWith("\n", param);
      }));

exports.Entry = Entry;
exports.createEntry = createEntry;
exports.updateLatestEntry = updateLatestEntry;
exports.logRawText = logRawText;
exports.logSExpression = logSExpression;
exports.logResponse = logResponse;
exports.logError = logError;
exports.serialize = serialize$1;
/* serialize Not a pure module */
