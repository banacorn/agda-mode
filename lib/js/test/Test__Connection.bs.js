// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Event$AgdaMode = require("../src/Util/Event.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");

Mocha$BsMocha.describe("Connection")(undefined, undefined, undefined, (function (param) {
        return Mocha$BsMocha.describe("Path")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package.after_each);
                      Promise$BsMocha.it("should success when trying to search for the path of program called 'agda'")(undefined, undefined, undefined, (function (param) {
                              atom.config.set("agda-mode.agdaName", "agda");
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then((function (param) {
                                            Test__Util$AgdaMode.Assert.ok(/* () */0);
                                            return Promise.resolve(/* () */0);
                                          }));
                            }));
                      return Promise$BsMocha.it("should fail when trying to search for the path of program called 'non-agda'")(undefined, undefined, undefined, (function (param) {
                                    atom.config.set("agda-mode.agdaName", "non-agda");
                                    return Curry._1(Test__Util$AgdaMode.$$File.openAsset, "Temp.agda").then(Test__Util$AgdaMode.getInstance).then((function (instance) {
                                                  var onConnectionError = Event$AgdaMode.once(instance[/* onConnectionError */11]);
                                                  Test__Util$AgdaMode.dispatch("agda-mode:load", instance).then((function (param) {
                                                          Curry._1(Test__Util$AgdaMode.Assert.fail, "should fail on connection");
                                                          return Promise.resolve(/* () */0);
                                                        }));
                                                  return Async$AgdaMode.toPromise(onConnectionError).then((function (error) {
                                                                switch (error.tag | 0) {
                                                                  case /* AutoSearchError */0 :
                                                                      var match = error[0];
                                                                      switch (match.tag | 0) {
                                                                        case /* ProcessHanging */0 :
                                                                        case /* NotSupported */1 :
                                                                            Curry._1(Test__Util$AgdaMode.Assert.fail, "wrong connection error");
                                                                            break;
                                                                        case /* NotFound */2 :
                                                                            if (match[0] === "non-agda") {
                                                                              Test__Util$AgdaMode.Assert.ok(/* () */0);
                                                                            } else {
                                                                              Curry._1(Test__Util$AgdaMode.Assert.fail, "wrong connection error");
                                                                            }
                                                                            break;
                                                                        
                                                                      }
                                                                      break;
                                                                  case /* ValidationError */1 :
                                                                  case /* ConnectionError */2 :
                                                                      Curry._1(Test__Util$AgdaMode.Assert.fail, "wrong connection error");
                                                                      break;
                                                                  
                                                                }
                                                                return Promise.resolve(/* () */0);
                                                              }));
                                                }));
                                  }));
                    }));
      }));

/*  Not a pure module */
