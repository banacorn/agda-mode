// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Channel$AgdaMode = require("../Util/Channel.bs.js");

function useDidUpdateEffect(f, inputs) {
  var didMountRef = React.useRef(false);
  React.useEffect((function () {
          if (didMountRef.current) {
            return Curry._1(f, /* () */0);
          } else {
            didMountRef.current = true;
            return ;
          }
        }), inputs);
  return /* () */0;
}

function useDidUpdateEffect2(f, param) {
  var didMountRef = React.useRef(false);
  React.useEffect((function () {
          if (didMountRef.current) {
            return Curry._1(f, /* () */0);
          } else {
            didMountRef.current = true;
            return ;
          }
        }), /* tuple */[
        param[0],
        param[1]
      ]);
  return /* () */0;
}

function useState(init) {
  var match = React.useState((function () {
          return init;
        }));
  var setState = match[1];
  var setState$prime = function (value) {
    return Curry._1(setState, (function (param) {
                  return value;
                }));
  };
  return /* tuple */[
          match[0],
          setState$prime
        ];
}

function useAtomListener(listener) {
  React.useEffect((function () {
          var destructor = Curry._1(listener, /* () */0);
          return (function (param) {
                    destructor.dispose();
                    return /* () */0;
                  });
        }));
  return /* () */0;
}

function useAtomListenerWhen(listener, shouldListen) {
  var match = React.useState((function () {
          return ;
        }));
  var setDestructor = match[1];
  var destructor = match[0];
  React.useEffect((function () {
          if (shouldListen) {
            var destructor$1 = Curry._1(listener, /* () */0);
            Curry._1(setDestructor, (function (param) {
                    return (function (param) {
                              destructor$1.dispose();
                              return /* () */0;
                            });
                  }));
          } else {
            Rebase.$$Option.forEach((function (f) {
                    return Curry._1(f, /* () */0);
                  }), destructor);
          }
          return destructor;
        }), [shouldListen]);
  return /* () */0;
}

function useListenWhen(listener, shouldListen) {
  var match = React.useState((function () {
          return ;
        }));
  var setDestructor = match[1];
  var destructor = match[0];
  React.useEffect((function () {
          if (shouldListen) {
            Curry._1(setDestructor, (function (param) {
                    return Curry._1(listener, /* () */0);
                  }));
          } else {
            Rebase.$$Option.forEach((function (f) {
                    Curry._1(f, /* () */0);
                    return Curry._1(setDestructor, (function (param) {
                                  return ;
                                }));
                  }), destructor);
          }
          return ;
        }), [shouldListen]);
  return /* () */0;
}

function useChannel(callback, channel) {
  React.useEffect((function () {
          Channel$AgdaMode.recv(callback, channel);
          return ;
        }), []);
  return /* () */0;
}

exports.useDidUpdateEffect = useDidUpdateEffect;
exports.useDidUpdateEffect2 = useDidUpdateEffect2;
exports.useState = useState;
exports.useAtomListener = useAtomListener;
exports.useAtomListenerWhen = useAtomListenerWhen;
exports.useListenWhen = useListenWhen;
exports.useChannel = useChannel;
/* react Not a pure module */
