// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function inquireAgdaPath(error, instance) {
  return $$Promise.mapError($$Promise.flatMap($$Promise.flatMap($$Promise.flatMap(Curry._1(instance.view.activate, /* () */0), (function (param) {
                            return Curry._1(instance.view.navigateSettings, /* Connection */1);
                          })), (function (param) {
                        return Curry._2(instance.view.updateConnection, undefined, error);
                      })), (function (param) {
                    return Curry._1(instance.view.inquireConnection, /* () */0);
                  })), (function (param) {
                return /* Cancelled */0;
              }));
}

function getAgdaPath(instance) {
  var storedPath = Parser$AgdaMode.filepath(atom.config.get("agda-mode.agdaPath"));
  if (Rebase.$$String.isEmpty(storedPath) || storedPath === ".") {
    var searchingFor = Rebase.$$String.trim(atom.config.get("agda-mode.agdaName"));
    return $$Promise.flatMapError(Connection$AgdaMode.autoSearch(searchingFor), (function (err) {
                  Curry._1(instance.onConnectionError.emit, err);
                  return inquireAgdaPath(err, instance);
                }));
  } else {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [storedPath]));
  }
}

function persistConnection(instance, connection) {
  instance.connection = connection;
  var path = Rebase.$$String.joinWith(" ", Rebase.List.fromArray(Rebase.$$Array.concat(connection.metadata.args, [connection.metadata.path])));
  atom.config.set("agda-mode.agdaPath", path);
  return $$Promise.map(Curry._2(instance.view.updateConnection, connection, undefined), (function (param) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [connection]);
              }));
}

function connectWithAgdaPath(instance, path) {
  var getMetadata = function (instance, pathAndParams) {
    return $$Promise.flatMapError(Connection$AgdaMode.validateAndMake(pathAndParams), (function (err) {
                  return $$Promise.flatMapOk(inquireAgdaPath(err, instance), (function (param) {
                                return getMetadata(instance, param);
                              }));
                }));
  };
  return $$Promise.mapOk($$Promise.flatMapOk($$Promise.mapOk(getMetadata(instance, path), Connection$AgdaMode.connect), (function (param) {
                    return persistConnection(instance, param);
                  })), Connection$AgdaMode.wire);
}

function connect(instance) {
  var match = instance.connection;
  if (match !== undefined) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [match]));
  } else {
    return $$Promise.flatMapOk(getAgdaPath(instance), (function (param) {
                  return connectWithAgdaPath(instance, param);
                }));
  }
}

function disconnect(instance) {
  var match = instance.connection;
  if (match !== undefined) {
    Connection$AgdaMode.disconnect(/* DisconnectedByUser */0, match);
    instance.connection = undefined;
    return Curry._2(instance.view.updateConnection, undefined, undefined);
  } else {
    return $$Promise.resolved(/* () */0);
  }
}

exports.inquireAgdaPath = inquireAgdaPath;
exports.getAgdaPath = getAgdaPath;
exports.persistConnection = persistConnection;
exports.connectWithAgdaPath = connectWithAgdaPath;
exports.connect = connect;
exports.disconnect = disconnect;
/* Promise Not a pure module */
