// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

function id(children) {
  return children;
}

function braces(children) {
  return ReactDOMRe.createElementVariadic("span", undefined, $$Array.concat(/* :: */Block.simpleVariant("::", [
                    /* array */["{"],
                    /* :: */Block.simpleVariant("::", [
                        children,
                        /* :: */Block.simpleVariant("::", [
                            /* array */["}"],
                            /* [] */0
                          ])
                      ])
                  ])));
}

function dbraces(children) {
  return ReactDOMRe.createElementVariadic("span", undefined, $$Array.concat(/* :: */Block.simpleVariant("::", [
                    /* array */["{{"],
                    /* :: */Block.simpleVariant("::", [
                        children,
                        /* :: */Block.simpleVariant("::", [
                            /* array */["}}"],
                            /* [] */0
                          ])
                      ])
                  ])));
}

function parens(children) {
  return ReactDOMRe.createElementVariadic("span", undefined, $$Array.concat(/* :: */Block.simpleVariant("::", [
                    /* array */["("],
                    /* :: */Block.simpleVariant("::", [
                        children,
                        /* :: */Block.simpleVariant("::", [
                            /* array */[")"],
                            /* [] */0
                          ])
                      ])
                  ])));
}

function parensIf(p, children) {
  if (p) {
    return parens(children);
  } else {
    return children;
  }
}

var component = ReasonReact.statelessComponent("Hiding");

function make($staropt$star, _, parens, children) {
  var value = $staropt$star !== undefined ? $staropt$star : /* NotHidden */1;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                if (typeof value === "number") {
                  if (value !== 0) {
                    return React.createElement(React.Fragment, undefined, Curry._1(parens, children));
                  } else {
                    return React.createElement(React.Fragment, undefined, braces(children));
                  }
                } else {
                  return React.createElement(React.Fragment, undefined, dbraces(children));
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var Hiding = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component,
    make
  ]);

function map(f, named) {
  return /* record */Block.record([
            "origin",
            "value"
          ], [
            named[/* origin */0],
            Curry._1(f, named[/* value */1])
          ]);
}

function unnamed(value) {
  return /* Named */Block.simpleVariant("Named", [
            undefined,
            value
          ]);
}

function named(name, value) {
  return /* Named */Block.simpleVariant("Named", [
            name,
            value
          ]);
}

function make$1(param, prec, children) {
  var value = param[1];
  var name = param[0];
  if (name !== undefined) {
    return parensIf(prec > 0, /* array */[
                name[1] + "=",
                Curry._2(children, value, 0)
              ]);
  } else {
    return Curry._2(children, value, prec);
  }
}

var Named = /* module */Block.localModule([
    "map",
    "unnamed",
    "named",
    "make"
  ], [
    map,
    unnamed,
    named,
    make$1
  ]);

var $$default = /* record */Block.record([
    "hiding",
    "modality",
    "origin",
    "freeVariables"
  ], [
    1,
    Block.record([
        "relevance",
        "quantity"
      ], [
        0,
        1
      ]),
    0,
    0
  ]);

function isVisible(argInfo) {
  return argInfo[/* hiding */0] === /* NotHidden */1;
}

function isHidden(argInfo) {
  return argInfo[/* hiding */0] === /* Hidden */0;
}

var ArgInfo = /* module */Block.localModule([
    "default",
    "isVisible",
    "isHidden"
  ], [
    $$default,
    isVisible,
    isHidden
  ]);

function $$default$1(value) {
  return /* Arg */Block.simpleVariant("Arg", [
            $$default,
            value
          ]);
}

function map$1(f, arged) {
  return /* record */Block.record([
            "origin",
            "value"
          ], [
            arged[/* origin */0],
            Curry._1(f, arged[/* value */1])
          ]);
}

function setArgInfoHiding(hiding, param) {
  var argInfo = param[0];
  return /* Arg */Block.simpleVariant("Arg", [
            /* record */Block.record([
                "hiding",
                "modality",
                "origin",
                "freeVariables"
              ], [
                hiding,
                argInfo[/* modality */1],
                argInfo[/* origin */2],
                argInfo[/* freeVariables */3]
              ]),
            param[1]
          ]);
}

function make$2(param, prec, children) {
  var argInfo = param[0];
  var match = argInfo[/* hiding */0] === /* NotHidden */1;
  var p = match ? prec : 0;
  var match$1 = argInfo[/* origin */2] === /* Substitution */4;
  var localParens = match$1 ? parens : id;
  return ReasonReact.element(undefined, undefined, make(argInfo[/* hiding */0], undefined, localParens, /* array */[Curry._2(children, param[1], p)]));
}

var Arg = /* module */Block.localModule([
    "default",
    "map",
    "setArgInfoHiding",
    "make"
  ], [
    $$default$1,
    map$1,
    setArgInfoHiding,
    make$2
  ]);

exports.id = id;
exports.braces = braces;
exports.dbraces = dbraces;
exports.parens = parens;
exports.parensIf = parensIf;
exports.Hiding = Hiding;
exports.Named = Named;
exports.ArgInfo = ArgInfo;
exports.Arg = Arg;
/* component Not a pure module */
