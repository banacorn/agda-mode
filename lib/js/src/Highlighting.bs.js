// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Util$AgdaMode = require("./Util/Util.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");

function toString(self) {
  var match = self.source;
  return "Annotation " + (String(self.start) + (" " + (String(self.end_) + (" " + (Util$AgdaMode.Pretty.list(Belt_List.fromArray(self.types)) + (
                    match !== undefined ? match[0] + (" " + String(match[1])) : ""
                  ))))));
}

function parse(xs) {
  if (!xs.tag) {
    return ;
  }
  var xs$1 = xs[0];
  var len = xs$1.length;
  if (len >= 7) {
    return ;
  }
  switch (len) {
    case 3 :
        var start$prime = xs$1[0];
        if (start$prime.tag) {
          return ;
        }
        var end_$prime = xs$1[1];
        if (end_$prime.tag) {
          return ;
        }
        var end_$prime$1 = end_$prime[0];
        var types = xs$1[2];
        return Belt_Option.flatMap(Parser$AgdaMode.$$int(start$prime[0]), (function (start) {
                      return Belt_Option.map(Parser$AgdaMode.$$int(end_$prime$1), (function (end_) {
                                    return {
                                            start: start,
                                            end_: end_,
                                            types: Parser$AgdaMode.SExpression.flatten(types),
                                            source: undefined
                                          };
                                  }));
                    }));
    case 4 :
        var start$prime$1 = xs$1[0];
        if (start$prime$1.tag) {
          return ;
        }
        var end_$prime$2 = xs$1[1];
        if (end_$prime$2.tag) {
          return ;
        }
        var end_$prime$3 = end_$prime$2[0];
        var types$1 = xs$1[2];
        return Belt_Option.flatMap(Parser$AgdaMode.$$int(start$prime$1[0]), (function (start) {
                      return Belt_Option.map(Parser$AgdaMode.$$int(end_$prime$3), (function (end_) {
                                    return {
                                            start: start,
                                            end_: end_,
                                            types: Parser$AgdaMode.SExpression.flatten(types$1),
                                            source: undefined
                                          };
                                  }));
                    }));
    case 0 :
    case 1 :
    case 2 :
    case 5 :
        return ;
    case 6 :
        var start$prime$2 = xs$1[0];
        if (start$prime$2.tag) {
          return ;
        }
        var end_$prime$4 = xs$1[1];
        if (end_$prime$4.tag) {
          return ;
        }
        var end_$prime$5 = end_$prime$4[0];
        var types$2 = xs$1[2];
        var match = xs$1[5];
        if (!match.tag) {
          return ;
        }
        var match$1 = match[0];
        if (match$1.length !== 3) {
          return ;
        }
        var filepath = match$1[0];
        if (filepath.tag) {
          return ;
        }
        var filepath$1 = filepath[0];
        var index$prime = match$1[2];
        if (index$prime.tag) {
          return ;
        }
        var index$prime$1 = index$prime[0];
        return Belt_Option.flatMap(Parser$AgdaMode.$$int(start$prime$2[0]), (function (start) {
                      return Belt_Option.flatMap(Parser$AgdaMode.$$int(end_$prime$5), (function (end_) {
                                    return Belt_Option.map(Parser$AgdaMode.$$int(index$prime$1), (function (index) {
                                                  return {
                                                          start: start,
                                                          end_: end_,
                                                          types: Parser$AgdaMode.SExpression.flatten(types$2),
                                                          source: /* tuple */[
                                                            filepath$1,
                                                            index
                                                          ]
                                                        };
                                                }));
                                  }));
                    }));
    
  }
}

function parseDirectHighlightings(tokens) {
  return Belt_Array.keepMap(Belt_Array.map(tokens.slice(2), parse), (function (x) {
                return x;
              }));
}

function parseIndirectHighlightings(tokens) {
  return Belt_Array.keepMap(Belt_Array.map(tokens.slice(1), parse), (function (x) {
                return x;
              }));
}

function shouldHighlight(annotation) {
  if (annotation.types.includes("unsolvedmeta") || annotation.types.includes("unsolvedconstraint") || annotation.types.includes("terminationproblem")) {
    return true;
  } else {
    return annotation.types.includes("coverageproblem");
  }
}

var Annotation = {
  toString: toString,
  parse: parse,
  parseDirectHighlightings: parseDirectHighlightings,
  parseIndirectHighlightings: parseIndirectHighlightings,
  shouldHighlight: shouldHighlight
};

var Token;

exports.Token = Token;
exports.Annotation = Annotation;
/* Util-AgdaMode Not a pure module */
