// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var C$AgdaMode = require("./C.bs.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Link$AgdaMode = require("./Link.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var Literal$AgdaMode = require("./Literal.bs.js");
var CommonPrim$AgdaMode = require("./CommonPrim.bs.js");

var lamBinding = ReasonReact.statelessComponent("LamBinding");

var typedBindings = ReasonReact.statelessComponent("TypedBindings");

var typedBinding = ReasonReact.statelessComponent("TypedBinding");

var declaration = ReasonReact.statelessComponent("Declaration");

var lhs = ReasonReact.statelessComponent("LHS");

var pattern = ReasonReact.statelessComponent("Pattern");

var telescope = ReasonReact.statelessComponent("Telescope");

var Component = /* module */Block.localModule([
    "lamBinding",
    "typedBindings",
    "typedBinding",
    "declaration",
    "lhs",
    "pattern",
    "telescope"
  ], [
    lamBinding,
    typedBindings,
    typedBinding,
    declaration,
    lhs,
    pattern,
    telescope
  ]);

function isUnderscore(binding) {
  if (binding.tag) {
    return false;
  } else {
    var match = binding[2];
    if (match.tag === 3) {
      return match[1] === undefined;
    } else {
      return false;
    }
  }
}

var TypedBinding_ = /* module */Block.localModule(["isUnderscore"], [isUnderscore]);

function appView(expr) {
  var arg = function (expr) {
    switch (expr.tag | 0) {
      case 8 : 
          return CommonPrim$AgdaMode.Arg[/* setArgInfoHiding */2](/* Hidden */0, CommonPrim$AgdaMode.Arg[/* default */0](expr[1]));
      case 9 : 
          return CommonPrim$AgdaMode.Arg[/* setArgInfoHiding */2](/* Instance */Block.simpleVariant("Instance", [/* NoOverlap */1]), CommonPrim$AgdaMode.Arg[/* default */0](expr[1]));
      default:
        return CommonPrim$AgdaMode.Arg[/* default */0](CommonPrim$AgdaMode.Named[/* unnamed */1](expr));
    }
  };
  switch (expr.tag | 0) {
    case 4 : 
        var match = expr[1];
        if (match) {
          return /* tuple */[
                  match[0],
                  List.map(arg, match[1])
                ];
        } else {
          return /* tuple */[
                  expr,
                  /* [] */0
                ];
        }
    case 5 : 
        var param = appView(expr[1]);
        var arg$1 = expr[2];
        return /* tuple */[
                param[0],
                List.append(param[1], /* :: */Block.simpleVariant("::", [
                        arg$1,
                        /* [] */0
                      ]))
              ];
    default:
      return /* tuple */[
              expr,
              /* [] */0
            ];
  }
}

var levelToString = (function (n) { return n.toString().split('').map(x => String.fromCharCode(0x2080 + parseInt(x))).join('')});

var component = ReasonReact.statelessComponent("Expr");

var Expr_ = /* module */Block.localModule([
    "appView",
    "levelToString",
    "component"
  ], [
    appView,
    levelToString,
    component
  ]);

function makeExpr(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                switch (value.tag | 0) {
                  case 0 : 
                      return ReasonReact.element(undefined, undefined, C$AgdaMode.QName[/* make */2](value[0], /* array */[]));
                  case 1 : 
                      return ReasonReact.element(undefined, undefined, Literal$AgdaMode.make(value[0], /* array */[]));
                  case 2 : 
                      var match = value[1];
                      var range = value[0];
                      if (match !== undefined) {
                        return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range, true, true, /* array */["?" + String(match)]));
                      } else {
                        return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range, true, true, /* array */["?"]));
                      }
                  case 3 : 
                      var match$1 = value[1];
                      var range$1 = value[0];
                      if (match$1 !== undefined) {
                        return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range$1, true, true, /* array */[match$1]));
                      } else {
                        return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range$1, true, true, /* array */["_"]));
                      }
                  case 4 : 
                      return Util$AgdaMode.sepBy(" ", List.map((function (value) {
                                        return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                      }), value[1]));
                  case 5 : 
                      var match$2 = appView(value);
                      var items_000 = ReasonReact.element(undefined, undefined, makeExpr(match$2[0], /* array */[]));
                      var items_001 = List.map((function (value) {
                              return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Arg[/* make */4](undefined, value, (function (prec, value) {
                                                return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Named[/* make */4](prec, value, (function (_, value) {
                                                                  return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                                                })));
                                              })));
                            }), match$2[1]);
                      var items = /* :: */Block.simpleVariant("::", [
                          items_000,
                          items_001
                        ]);
                      return Util$AgdaMode.sepBy(" ", items);
                  case 6 : 
                      return React.createElement("span", undefined, "unimplemented: Expr::OpApp");
                  case 7 : 
                      return Util$AgdaMode.sepBy(" | ", List.map((function (value) {
                                        return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                      }), /* :: */Block.simpleVariant("::", [
                                        value[1],
                                        value[2]
                                      ])));
                  case 8 : 
                      return CommonPrim$AgdaMode.braces(ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Named[/* make */4](undefined, value[1], (function (_, value) {
                                            return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                          }))));
                  case 9 : 
                      return CommonPrim$AgdaMode.dbraces(ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Named[/* make */4](undefined, value[1], (function (_, value) {
                                            return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                          }))));
                  case 10 : 
                      var expr = value[2];
                      var bindings = value[1];
                      if (expr.tag === 11) {
                        return React.createElement("span", undefined, "λ ", Util$AgdaMode.sepBy(" ", List.map((function (value) {
                                              return ReasonReact.element(undefined, undefined, makeLamBinding(value, /* array */[]));
                                            }), bindings)), ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Hiding[/* make */1](expr[1], undefined, undefined, /* array */[])));
                      } else {
                        return React.createElement("span", undefined, "λ ", Util$AgdaMode.sepBy(" ", List.map((function (value) {
                                              return ReasonReact.element(undefined, undefined, makeLamBinding(value, /* array */[]));
                                            }), bindings)), ReasonReact.element(undefined, undefined, makeExpr(expr, /* array */[])));
                      }
                  case 11 : 
                      return React.createElement("span", undefined, "λ ", ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Hiding[/* make */1](value[1], undefined, undefined, /* array */[])));
                  case 12 : 
                      return React.createElement("span", undefined, "λ ", Util$AgdaMode.enclosedBy("{", "}", Util$AgdaMode.sepBy(" ", List.map((function (value) {
                                                return ReasonReact.element(undefined, undefined, makeLamBinding(value, /* array */[]));
                                              }), value[1]))));
                  case 13 : 
                      return React.createElement("span", undefined, ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Arg[/* make */4](undefined, value[1], (function (_, value) {
                                            return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                          }))), " → ", ReasonReact.element(undefined, undefined, makeExpr(value[2], /* array */[])));
                  case 14 : 
                      return React.createElement("span", undefined, ReasonReact.element(undefined, undefined, makeTelescope(value[0], /* array */[])), " → ", ReasonReact.element(undefined, undefined, makeExpr(value[1], /* array */[])));
                  case 15 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Set"]));
                  case 16 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Prop"]));
                  case 17 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Set" + Curry._1(levelToString, value[1])]));
                  case 18 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Prop" + Curry._1(levelToString, value[1])]));
                  case 21 : 
                      var expr$1 = value[2];
                      return React.createElement("span", undefined, "let ", ReactDOMRe.createElementVariadic("ul", undefined, $$Array.of_list(List.map((function (value) {
                                                return React.createElement("li", undefined, ReasonReact.element(undefined, undefined, makeDeclaration(value, /* array */[])));
                                              }), value[1]))), expr$1 !== undefined ? React.createElement("span", undefined, "in ", ReasonReact.element(undefined, undefined, makeExpr(expr$1, /* array */[]))) : null);
                  case 22 : 
                      return CommonPrim$AgdaMode.parens(ReasonReact.element(undefined, undefined, makeExpr(value[1], /* array */[])));
                  default:
                    return React.createElement("span", undefined, "unimplemented:  Expr::Paren");
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

function makeTypedBindings(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            typedBindings[/* debugName */0],
            typedBindings[/* reactClassInternal */1],
            typedBindings[/* handedOffState */2],
            typedBindings[/* willReceiveProps */3],
            typedBindings[/* didMount */4],
            typedBindings[/* didUpdate */5],
            typedBindings[/* willUnmount */6],
            typedBindings[/* willUpdate */7],
            typedBindings[/* shouldUpdate */8],
            (function () {
                var match = value[1];
                var binding = match[1];
                var argInfo = match[0];
                if (isUnderscore(binding)) {
                  return ReasonReact.element(undefined, undefined, makeTypedBinding(binding, /* array */[]));
                } else {
                  return React.createElement("span", undefined, ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Relevance[/* make */1](argInfo[/* modality */1][/* relevance */0], /* array */[])), ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Hiding[/* make */1](argInfo[/* hiding */0], undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, makeTypedBinding(binding, /* array */[]))])));
                }
              }),
            typedBindings[/* initialState */10],
            typedBindings[/* retainedProps */11],
            typedBindings[/* reducer */12],
            typedBindings[/* jsElementWrapped */13]
          ]);
}

function makeDeclaration(_, _$1) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            declaration[/* debugName */0],
            declaration[/* reactClassInternal */1],
            declaration[/* handedOffState */2],
            declaration[/* willReceiveProps */3],
            declaration[/* didMount */4],
            declaration[/* didUpdate */5],
            declaration[/* willUnmount */6],
            declaration[/* willUpdate */7],
            declaration[/* shouldUpdate */8],
            (function () {
                return React.createElement("span", undefined, "<Declaration> unimplemented");
              }),
            declaration[/* initialState */10],
            declaration[/* retainedProps */11],
            declaration[/* reducer */12],
            declaration[/* jsElementWrapped */13]
          ]);
}

function makeLamBinding(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            lamBinding[/* debugName */0],
            lamBinding[/* reactClassInternal */1],
            lamBinding[/* handedOffState */2],
            lamBinding[/* willReceiveProps */3],
            lamBinding[/* didMount */4],
            lamBinding[/* didUpdate */5],
            lamBinding[/* willUnmount */6],
            lamBinding[/* willUpdate */7],
            lamBinding[/* shouldUpdate */8],
            (function () {
                if (value.tag) {
                  return ReasonReact.element(undefined, undefined, makeTypedBindings(value[0], /* array */[]));
                } else {
                  var boundName = value[1];
                  var argInfo = value[0];
                  if (argInfo[/* hiding */0] === /* NotHidden */1 && C$AgdaMode.BoundName[/* isUnderscore */1](boundName)) {
                    return ReasonReact.element(undefined, undefined, C$AgdaMode.BoundName[/* make */2](boundName, /* array */[]));
                  } else {
                    return React.createElement("span", undefined, ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Relevance[/* make */1](argInfo[/* modality */1][/* relevance */0], /* array */[])), ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Hiding[/* make */1](argInfo[/* hiding */0], undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, C$AgdaMode.BoundName[/* make */2](boundName, /* array */[]))])));
                  }
                }
              }),
            lamBinding[/* initialState */10],
            lamBinding[/* retainedProps */11],
            lamBinding[/* reducer */12],
            lamBinding[/* jsElementWrapped */13]
          ]);
}

function makeTelescope(telescope$1, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            telescope[/* debugName */0],
            telescope[/* reactClassInternal */1],
            telescope[/* handedOffState */2],
            telescope[/* willReceiveProps */3],
            telescope[/* didMount */4],
            telescope[/* didUpdate */5],
            telescope[/* willUnmount */6],
            telescope[/* willUpdate */7],
            telescope[/* shouldUpdate */8],
            (function () {
                var typedBindings = telescope$1[0];
                var isMeta = function (typedBindings) {
                  var match = typedBindings[1][1];
                  if (match.tag) {
                    return false;
                  } else {
                    var match$1 = match[2];
                    if (match$1.tag === 3) {
                      return match$1[1] === undefined;
                    } else {
                      return false;
                    }
                  }
                };
                var match = List.exists(isMeta, typedBindings);
                return React.createElement("span", undefined, match ? "∀ " : null, Util$AgdaMode.sepBy(" ", List.map((function (value) {
                                      return ReasonReact.element(undefined, undefined, makeTypedBindings(value, /* array */[]));
                                    }), typedBindings)));
              }),
            telescope[/* initialState */10],
            telescope[/* retainedProps */11],
            telescope[/* reducer */12],
            telescope[/* jsElementWrapped */13]
          ]);
}

function makeTypedBinding(value, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            typedBindings[/* debugName */0],
            typedBindings[/* reactClassInternal */1],
            typedBindings[/* handedOffState */2],
            typedBindings[/* willReceiveProps */3],
            typedBindings[/* didMount */4],
            typedBindings[/* didUpdate */5],
            typedBindings[/* willUnmount */6],
            typedBindings[/* willUpdate */7],
            typedBindings[/* shouldUpdate */8],
            (function () {
                if (value.tag) {
                  return React.createElement(React.Fragment, undefined, React.createElement("span", undefined, "let"), ReactDOMRe.createElementVariadic("ul", undefined, $$Array.of_list(List.map((function (value) {
                                            return React.createElement("li", undefined, ReasonReact.element(undefined, undefined, makeDeclaration(value, /* array */[])));
                                          }), value[1]))));
                } else {
                  var expr = value[2];
                  var xs = value[1];
                  var exit = 0;
                  if (expr.tag === 3 && expr[1] === undefined) {
                    return Util$AgdaMode.sepBy(" ", List.map((function (param) {
                                      return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Hiding[/* make */1](param[0], undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, C$AgdaMode.BoundName[/* make */2](param[1], /* array */[]))]));
                                    }), xs));
                  } else {
                    exit = 1;
                  }
                  if (exit === 1) {
                    var names = Util$AgdaMode.sepBy(" ", List.map((function (param) {
                                return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Hiding[/* make */1](param[0], undefined, undefined, /* array */[ReasonReact.element(undefined, undefined, C$AgdaMode.BoundName[/* make */2](param[1], /* array */[]))]));
                              }), xs));
                    return React.createElement("span", undefined, names, " : ", ReasonReact.element(undefined, undefined, makeExpr(expr, /* array */[])));
                  }
                  
                }
              }),
            typedBindings[/* initialState */10],
            typedBindings[/* retainedProps */11],
            typedBindings[/* reducer */12],
            typedBindings[/* jsElementWrapped */13]
          ]);
}

function makePattern(_, _$1) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            pattern[/* debugName */0],
            pattern[/* reactClassInternal */1],
            pattern[/* handedOffState */2],
            pattern[/* willReceiveProps */3],
            pattern[/* didMount */4],
            pattern[/* didUpdate */5],
            pattern[/* willUnmount */6],
            pattern[/* willUpdate */7],
            pattern[/* shouldUpdate */8],
            (function () {
                return React.createElement("span", undefined, "<Pattern> unimplemented");
              }),
            pattern[/* initialState */10],
            pattern[/* retainedProps */11],
            pattern[/* reducer */12],
            pattern[/* jsElementWrapped */13]
          ]);
}

function makeLHS(lhs$1, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            lhs[/* debugName */0],
            lhs[/* reactClassInternal */1],
            lhs[/* handedOffState */2],
            lhs[/* willReceiveProps */3],
            lhs[/* didMount */4],
            lhs[/* didUpdate */5],
            lhs[/* willUnmount */6],
            lhs[/* willUpdate */7],
            lhs[/* shouldUpdate */8],
            (function () {
                return React.createElement("span", undefined, ReasonReact.element(undefined, undefined, makePattern(lhs$1[/* originalPattern */0], /* array */[])), "rewrite", Util$AgdaMode.sepBy(" | ", List.map((function (value) {
                                      return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                    }), lhs$1[/* rewriteEqn */1])), "with", Util$AgdaMode.sepBy(" | ", List.map((function (value) {
                                      return ReasonReact.element(undefined, undefined, makeExpr(value, /* array */[]));
                                    }), lhs$1[/* rewriteEqn */1])));
              }),
            lhs[/* initialState */10],
            lhs[/* retainedProps */11],
            lhs[/* reducer */12],
            lhs[/* jsElementWrapped */13]
          ]);
}

var Element = /* module */Block.localModule([
    "makeExpr",
    "makeDeclaration",
    "makePattern",
    "makeTypedBinding",
    "makeTypedBindings",
    "makeLamBinding",
    "makeLHS",
    "makeTelescope"
  ], [
    makeExpr,
    makeDeclaration,
    makePattern,
    makeTypedBinding,
    makeTypedBindings,
    makeLamBinding,
    makeLHS,
    makeTelescope
  ]);

var Expr = /* module */Block.localModule(["make"], [makeExpr]);

var LHS = /* module */Block.localModule(["make"], [makeLHS]);

var Pattern = /* module */Block.localModule(["make"], [makePattern]);

var Declaration = /* module */Block.localModule(["make"], [makeDeclaration]);

var jump = true;

var hover = true;

exports.jump = jump;
exports.hover = hover;
exports.Component = Component;
exports.TypedBinding_ = TypedBinding_;
exports.Expr_ = Expr_;
exports.Element = Element;
exports.Expr = Expr;
exports.LHS = LHS;
exports.Pattern = Pattern;
exports.Declaration = Declaration;
/* lamBinding Not a pure module */
