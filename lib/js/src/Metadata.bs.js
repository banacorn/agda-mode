// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Util$AgdaMode = require("./Util.bs.js");

function toString(param) {
  if (param) {
    return "Emacs / JSON";
  } else {
    return "Emacs";
  }
}

var Protocol = {
  toString: toString
};

function serialize(self) {
  var path = "* path: " + self[/* path */0];
  var args = "* args: " + Util$AgdaMode.Pretty.array(self[/* args */1]);
  var version = "* version: " + self[/* version */2];
  var protocol = "* protocol: " + (
    self[/* protocol */3] ? "Emacs / JSON" : "Emacs"
  );
  var os = "* platform: " + Os.type();
  return "## Parse Log\n" + (String(path) + ("\n" + (String(args) + ("\n" + (String(version) + ("\n" + (String(protocol) + ("\n" + (String(os) + "\n  ")))))))));
}

function dump(self) {
  var text = serialize(self);
  var itemOptions = {
    initialLine: 0,
    initialColumn: 0,
    split: "left",
    activatePane: true,
    activateItem: true,
    pending: false,
    searchAllPanes: true,
    location: undefined
  };
  $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(atom.workspace.open("agda-mode://log.md", itemOptions))), (function (param) {
          if (param.tag) {
            return /* () */0;
          } else {
            param[0].insertText(text);
            return /* () */0;
          }
        }));
  return /* () */0;
}

exports.Protocol = Protocol;
exports.serialize = serialize;
exports.dump = dump;
/* os Not a pure module */
