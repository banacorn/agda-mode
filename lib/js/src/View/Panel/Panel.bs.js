// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Tab$AgdaMode = require("../Tab.bs.js");
var Body$AgdaMode = require("./Body.bs.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Async$AgdaMode = require("../../Util/Async.bs.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Editors$AgdaMode = require("../../Editors.bs.js");
var Channels$AgdaMode = require("../Channels.bs.js");
var Dashboard$AgdaMode = require("./Dashboard.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var InputMethod$AgdaMode = require("./InputMethod.bs.js");
var SizingHandle$AgdaMode = require("./SizingHandle.bs.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

function createForBottom(param) {
  var createBottomPanelContainer = function (param) {
    var panelContainer = document.createElement("article");
    panelContainer.classList.add("agda-mode-panel-container");
    atom.workspace.addBottomPanel({
          item: panelContainer,
          priority: 0,
          visible: true
        });
    return panelContainer;
  };
  var partial_arg = Rebase.$$Array[/* filterMap */23];
  var containers = Rebase.$$Array[/* filter */10]((function (elem) {
          return elem.className === "agda-mode-panel-container";
        }), Rebase.$$Array[/* flatMap */5](Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], (function (prim) {
                      return prim.childNodes;
                    }), (function (prim) {
                      return Array.prototype.slice.call(prim);
                    })), (function (param) {
                  return partial_arg(Webapi__Dom__HtmlElement.ofNode, param);
                })), Rebase.$$Array[/* map */0]((function (prim) {
                  return atom.views.getView(prim);
                }), atom.workspace.getBottomPanels())));
  var match = Rebase.$$Array[/* get */17](containers, 0);
  if (match !== undefined) {
    return /* Bottom */Caml_chrome_debugger.variant("Bottom", 0, [Caml_option.valFromOption(match)]);
  } else {
    return /* Bottom */Caml_chrome_debugger.variant("Bottom", 0, [createBottomPanelContainer(/* () */0)]);
  }
}

function fromMountingPoint(param) {
  if (param.tag) {
    return Tab$AgdaMode.getElement(param[0]);
  } else {
    return param[0];
  }
}

var PanelContainer = /* module */Caml_chrome_debugger.localModule([
    "createForBottom",
    "fromMountingPoint"
  ], [
    createForBottom,
    fromMountingPoint
  ]);

function Panel(Props) {
  var editors = Props.editors;
  var settingsActivated = Props.settingsActivated;
  var onInputMethodChange = Props.onInputMethodChange;
  var onSettingsViewToggle = Props.onSettingsViewToggle;
  var onInquireQuery = Props.onInquireQuery;
  var channels = React.useContext(Channels$AgdaMode.context);
  var match = Hook$AgdaMode.useState(/* record */Caml_chrome_debugger.record([
          "text",
          "style"
        ], [
          "",
          0
        ]));
  var setHeader = match[1];
  var match$1 = Hook$AgdaMode.useState(/* Nothing */0);
  var setBody = match$1[1];
  var match$2 = Hook$AgdaMode.useState(/* Display */0);
  var setMode = match$2[1];
  var mode = match$2[0];
  var match$3 = Hook$AgdaMode.useState("");
  var setEditorValue = match$3[1];
  var match$4 = Hook$AgdaMode.useState("");
  var setEditorPlaceholder = match$4[1];
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(setMode, /* Display */0);
          Curry._1(setHeader, param[0]);
          Curry._1(setBody, param[1]);
          return Async$AgdaMode.resolve(/* () */0);
        }), channels[/* display */4]);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(setMode, /* Inquire */1);
          Editors$AgdaMode.Focus[/* on */1](/* Query */1, editors);
          Curry._1(setHeader, param[0]);
          Curry._1(setEditorPlaceholder, param[1]);
          Curry._1(setEditorValue, param[2]);
          return Async$AgdaMode.pass((function (param) {
                          Curry._1(setMode, /* Display */0);
                          return Editors$AgdaMode.Focus[/* on */1](/* Source */0, editors);
                        }))(Event$AgdaMode.once(onInquireQuery));
        }), channels[/* inquire */5]);
  var match$5 = Hook$AgdaMode.useState(170);
  var setMaxHeight = match$5[1];
  var match$6 = Hook$AgdaMode.useState(false);
  var setInputMethodActivation = match$6[1];
  var match$7 = Hook$AgdaMode.useState(false);
  Hook$AgdaMode.useChannel(Curry._2(Rebase.Fn[/* >> */6], match$7[1], Async$AgdaMode.resolve), channels[/* updateIsPending */6]);
  React.useEffect((function () {
          return Event$AgdaMode.onOk((function (state) {
                          return Curry._1(setInputMethodActivation, state[/* activated */0]);
                        }))(onInputMethodChange);
        }), /* array */[]);
  var match$8 = Hook$AgdaMode.useState(createForBottom(/* () */0));
  var setMountingPoint = match$8[1];
  var mountingPoint = match$8[0];
  var mountingPointRef = React.useRef(mountingPoint);
  mountingPointRef.current = mountingPoint;
  var queryEditorRef = React.useRef(undefined);
  React.useEffect((function () {
          editors[/* query */2] = queryEditorRef.current;
          return undefined;
        }), /* array */[mountingPoint]);
  var onQueryEditorRef = function (ref) {
    queryEditorRef.current = Caml_option.some(ref);
    return /* () */0;
  };
  var mountPanel = function (editors$1, mountingTarget) {
    var createTab = function (param) {
      return Tab$AgdaMode.make(editors$1[/* source */1], (function (param) {
                    return "[Agda Mode] " + editors$1[/* source */1].getTitle();
                  }), "panel", (function (param, param$1, previousItem) {
                    return Rebase.$$Option[/* forEach */8]((function (pane) {
                                  pane.activate();
                                  pane.activateItem(previousItem);
                                  return /* () */0;
                                }), atom.workspace.paneForItem(previousItem));
                  }), undefined, (function (param) {
                    return mountPanel(editors, /* AtBottom */0);
                  }), undefined, /* () */0);
    };
    var match = mountingPointRef.current;
    if (match.tag) {
      if (mountingTarget) {
        return /* () */0;
      } else {
        Tab$AgdaMode.kill(match[0]);
        return Curry._1(setMountingPoint, createForBottom(/* () */0));
      }
    } else if (mountingTarget) {
      return Curry._1(setMountingPoint, /* Pane */Caml_chrome_debugger.variant("Pane", 1, [createTab(/* () */0)]));
    } else {
      return /* () */0;
    }
  };
  Hook$AgdaMode.useChannel((function (param) {
          var match = mountingPointRef.current;
          if (match.tag) {
            mountPanel(editors, /* AtBottom */0);
          } else {
            mountPanel(editors, /* AtPane */1);
          }
          return Async$AgdaMode.resolve(/* () */0);
        }), channels[/* toggleDocking */3]);
  var match$9 = Hook$AgdaMode.useState(false);
  var setActivation = match$9[1];
  var activated = match$9[0];
  React.useEffect((function () {
          if (activated) {
            if (mountingPoint.tag) {
              Tab$AgdaMode.activate(mountingPoint[0]);
            }
            
          }
          return undefined;
        }), /* array */[activated]);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(setActivation, true);
          return Async$AgdaMode.resolve(fromMountingPoint(mountingPointRef.current));
        }), channels[/* activatePanel */1]);
  Hook$AgdaMode.useChannel((function (param) {
          Curry._1(setActivation, false);
          return Async$AgdaMode.resolve(/* () */0);
        }), channels[/* deactivatePanel */2]);
  var panelRef = React.useRef(null);
  Hook$AgdaMode.useChannel((function (param) {
          var mountingPoint = mountingPointRef.current;
          if (mountingPoint.tag) {
            Tab$AgdaMode.kill(mountingPoint[0]);
          } else {
            var panel = panelRef.current;
            if (!(panel == null)) {
              mountingPoint[0].removeChild(panel);
            }
            
          }
          return Async$AgdaMode.resolve(/* () */0);
        }), channels[/* destroy */0]);
  var containerElement = fromMountingPoint(mountingPoint);
  var hidden;
  hidden = mountingPoint.tag ? false : !activated;
  var onMountingTargetChange = function (param) {
    if (param) {
      return mountPanel(editors, /* AtPane */1);
    } else {
      return mountPanel(editors, /* AtBottom */0);
    }
  };
  var mountAtBottom;
  mountAtBottom = mountingPoint.tag ? false : true;
  var style = mountAtBottom ? ({
        maxHeight: String(match$5[0]) + "px"
      }) : undefined;
  var id = "agda-mode:" + Editors$AgdaMode.getID(editors);
  var tmp = {
    className: "agda-body-container"
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  return ReactDom.createPortal(React.createElement("section", {
                  ref: panelRef,
                  className: "agda-mode-panel" + Util$AgdaMode.React[/* showWhen */5](!hidden),
                  id: id
                }, React.createElement("section", {
                      className: "panel-heading agda-header-container"
                    }, React.createElement(SizingHandle$AgdaMode.make, {
                          onResizeStart: setMaxHeight,
                          onResizeEnd: (function (height) {
                              setTimeout((function (param) {
                                      Curry._1(setMaxHeight, height);
                                      atom.config.set("agda-mode.maxBodyHeight", String(height));
                                      return /* () */0;
                                    }), 0);
                              return /* () */0;
                            }),
                          mountAtBottom: mountAtBottom
                        }), React.createElement(InputMethod$AgdaMode.make, {
                          editors: editors,
                          onChange: onInputMethodChange,
                          panelActivated: activated
                        }), React.createElement(Dashboard$AgdaMode.make, {
                          header: match[0],
                          hidden: match$6[0],
                          isPending: match$7[0],
                          mountingPoint: mountingPoint,
                          settingsActivated: settingsActivated,
                          onMountingTargetChange: onMountingTargetChange,
                          onSettingsViewToggle: onSettingsViewToggle
                        })), React.createElement("section", tmp, React.createElement(Body$AgdaMode.make, {
                          body: match$1[0],
                          hidden: mode !== /* Display */0
                        }), React.createElement(MiniEditor$AgdaMode.make, {
                          value: match$3[0],
                          placeholder: match$4[0],
                          hidden: mode !== /* Inquire */1,
                          grammar: "agda",
                          onConfirm: (function (result) {
                              return Event$AgdaMode.emitOk(result, onInquireQuery);
                            }),
                          onCancel: (function (param) {
                              Event$AgdaMode.emitError(/* Cancelled */0, onInquireQuery);
                              return /* () */0;
                            }),
                          onEditorRef: onQueryEditorRef
                        }))), containerElement);
}

var make = Panel;

exports.PanelContainer = PanelContainer;
exports.make = make;
/* react Not a pure module */
