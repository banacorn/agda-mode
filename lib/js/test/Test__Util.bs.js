// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var base = Path.join(__dirname, "../../../");

function file(path) {
  return Path.join(base, path);
}

function asset(path) {
  return Path.join(Path.join(base, "test/asset"), path);
}

function openFile(uri) {
  return atom.workspace.open(uri);
}

function closeFile(uri) {
  var pane = atom.workspace.paneForURI(uri);
  if (pane !== undefined) {
    var p = Caml_option.valFromOption(pane);
    var item = p.itemForURI(uri);
    if (item !== undefined) {
      return p.destroyItem(Caml_option.valFromOption(item), true);
    } else {
      return Promise.resolve(false);
    }
  } else {
    return Promise.resolve(false);
  }
}

function getActivePackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getActivePackages());
}

function getLoadedPackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getLoadedPackages());
}

var DispatchFailure = Caml_exceptions.create("Test__Util-AgdaMode.DispatchFailure");

function dispatch(editor, $$event) {
  var element = atom.views.getView(editor);
  var result = atom.commands.dispatch(element, $$event);
  if (result !== undefined) {
    return Promise.resolve(/* () */0);
  } else {
    return Promise.reject([
                DispatchFailure,
                $$event
              ]);
  }
}

exports.base = base;
exports.file = file;
exports.asset = asset;
exports.openFile = openFile;
exports.closeFile = closeFile;
exports.getActivePackageNames = getActivePackageNames;
exports.getLoadedPackageNames = getLoadedPackageNames;
exports.DispatchFailure = DispatchFailure;
exports.dispatch = dispatch;
/* base Not a pure module */
