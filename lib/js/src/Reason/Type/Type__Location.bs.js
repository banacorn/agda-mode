// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");

var Position = /* module */Block.localModule([], []);

function toString(self) {
  if (self[/* start */0][/* line */1] === self[/* end_ */1][/* line */1]) {
    return String(self[/* start */0][/* line */1]) + ("," + (String(self[/* start */0][/* col */2]) + ("-" + String(self[/* end_ */1][/* col */2]))));
  } else {
    return String(self[/* start */0][/* line */1]) + ("," + (String(self[/* start */0][/* col */2]) + ("-" + (String(self[/* end_ */1][/* line */1]) + ("," + String(self[/* end_ */1][/* col */2]))))));
  }
}

function toAtomRange(self) {
  var start = new Atom.Point(self[/* start */0][/* line */1] - 1 | 0, self[/* start */0][/* col */2] - 1 | 0);
  var end_ = new Atom.Point(self[/* end_ */1][/* line */1] - 1 | 0, self[/* end_ */1][/* col */2] - 1 | 0);
  return new Atom.Range(start, end_);
}

var Interval = /* module */Block.localModule([
    "toString",
    "toAtomRange"
  ], [
    toString,
    toAtomRange
  ]);

function toString$1(self) {
  if (self) {
    var match = self[0];
    if (match !== undefined) {
      var xs = self[1];
      var filepath = match;
      if (xs) {
        return filepath + (":" + toString(/* record */Block.record([
                        "start",
                        "end_"
                      ], [
                        List.hd(xs)[/* start */0],
                        List.nth(xs, List.length(xs) - 1 | 0)[/* end_ */1]
                      ])));
      } else {
        return filepath;
      }
    } else {
      var xs$1 = self[1];
      if (xs$1) {
        return toString(/* record */Block.record([
                      "start",
                      "end_"
                    ], [
                      List.hd(xs$1)[/* start */0],
                      List.nth(xs$1, List.length(xs$1) - 1 | 0)[/* end_ */1]
                    ]));
      } else {
        return "";
      }
    }
  } else {
    return "";
  }
}

function toAtomRanges(self) {
  if (self) {
    return Rebase.$$Array[/* map */0](toAtomRange, Rebase.$$Array[/* fromList */13](self[1]));
  } else {
    return /* array */[];
  }
}

var Range = /* module */Block.localModule([
    "toString",
    "toAtomRanges"
  ], [
    toString$1,
    toAtomRanges
  ]);

exports.Position = Position;
exports.Interval = Interval;
exports.Range = Range;
/* atom Not a pure module */
