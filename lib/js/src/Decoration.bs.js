// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");

function digHole(editor, range) {
  var start = range.start;
  var indent = " ".repeat(start.column);
  var holeText = "{!\n" + (indent + ("\n" + (indent + "!}")));
  var holeRange = new Atom.Range(start, new Atom.Point(0, 1).translate(start));
  editor.setTextInBufferRange(holeRange, holeText);
  var cursorPos = new Atom.Point(1, 0).translate(start);
  editor.setCursorBufferPosition(cursorPos);
  
}

function highlightBackground(editor, kind, range) {
  var createMarker = function (class_, range) {
    var marker = editor.markBufferRange(range);
    var option = {
      type: "highlight",
      class: class_
    };
    return editor.decorateMarker(marker, option);
  };
  switch (kind) {
    case "Error" :
        return [createMarker("highlight-error", range)];
    case "Highlight" :
        return [createMarker("highlight-link", range)];
    default:
      return [createMarker("highlight-spec", range)];
  }
}

function overlayText(editor, kind, text, range) {
  var createOverlay = function (text, class_, tail, translation, range) {
    var element = document.createElement("div");
    element.innerHTML = text;
    element.classList.add(class_);
    var top = (translation[0] - 1 | 0) * 1.5;
    element.setAttribute("style", "left: " + (String(translation[1]) + ("ex; top: " + (top.toString() + "em"))));
    var marker = editor.markBufferRange(range);
    var option = {
      type: "overlay",
      item: element,
      position: tail ? "tail" : "head"
    };
    return editor.decorateMarker(marker, option);
  };
  switch (kind) {
    case "Error" :
        return [createOverlay(text, "overlay-error", true, /* tuple */[
                      0,
                      0
                    ], range)];
    case "Highlight" :
        return [createOverlay(text, "overlay-link", false, /* tuple */[
                      0,
                      1
                    ], range)];
    default:
      return [createOverlay(text, "overlay-spec", false, /* tuple */[
                    0,
                    1
                  ], range)];
  }
}

function destroy(prim) {
  prim.destroy();
  
}

exports.digHole = digHole;
exports.highlightBackground = highlightBackground;
exports.overlayText = overlayText;
exports.destroy = destroy;
/* atom Not a pure module */
