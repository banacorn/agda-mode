// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Async$AgdaMode = require("../../Util/Async.bs.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Channels$AgdaMode = require("../Channels.bs.js");
var Metadata$AgdaMode = require("../../Metadata.bs.js");
var Resource$AgdaMode = require("../../Util/Resource.bs.js");
var Connection$AgdaMode = require("../../Connection.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var Settings__Connection__Error$AgdaMode = require("./Settings__Connection__Error.bs.js");

function Settings__Connection(Props) {
  var connection = Props.connection;
  var error = Props.error;
  var hidden = Props.hidden;
  var channels = React.useContext(Channels$AgdaMode.context);
  var match = Hook$AgdaMode.useState(undefined);
  var setAutoSearchError = match[1];
  var autoSearchError = match[0];
  var editorRef = Resource$AgdaMode.make(/* () */0);
  var onSetPath = Event$AgdaMode.make(/* () */0);
  var handleAutoSearch = function (param) {
    return Async$AgdaMode.finalError((function (err) {
                  return Curry._1(setAutoSearchError, err);
                }), Async$AgdaMode.thenOk((function (path) {
                        return Async$AgdaMode.thenOk((function (editor) {
                                        editor.setText(path);
                                        return Async$AgdaMode.resolve(/* () */0);
                                      }))(Curry._1(editorRef[/* acquire */0], /* () */0));
                      }))(Connection$AgdaMode.autoSearch("agda")));
  };
  var focusOnPathEditor = function (editor) {
    atom.views.getView(editor).focus();
    editor.selectAll();
    return Event$AgdaMode.once(onSetPath);
  };
  Hook$AgdaMode.useChannel((function (param) {
          return Async$AgdaMode.thenOk(focusOnPathEditor)(Curry._1(editorRef[/* acquire */0], /* () */0));
        }), channels[/* inquireConnection */10]);
  var connected = Rebase.$$Option[/* isSome */13](connection);
  var className = "agda-settings-connection" + (Util$AgdaMode.React[/* showWhen */5](!hidden) + Util$AgdaMode.React[/* when_ */4](!connected, "inquiring"));
  var status = connected ? React.createElement("span", {
          className: "icon icon-primitive-dot text-success",
          id: "connection-status",
          title: "connected"
        }) : React.createElement("span", {
          className: "icon icon-primitive-dot text-error",
          id: "connection-status",
          title: "disconnected"
        });
  var tmp;
  if (connection !== undefined) {
    var conn = connection;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("p", undefined, "Path: " + conn[/* metadata */0][/* path */0]), React.createElement("p", undefined, "Version: " + conn[/* metadata */0][/* version */2]), React.createElement("p", undefined, "Supported protocol: " + Metadata$AgdaMode.Protocol[/* toString */0](conn[/* metadata */0][/* protocol */3])));
  } else {
    tmp = React.createElement(React.Fragment, undefined, React.createElement("p", undefined, "connection not established"));
  }
  return React.createElement("section", {
              className: className
            }, React.createElement("h1", undefined, React.createElement("span", {
                      className: "icon icon-plug"
                    }), React.createElement("span", undefined, "Connection to Agda"), status), React.createElement("hr", undefined), React.createElement("h2", undefined, "Status"), tmp, React.createElement("hr", undefined), React.createElement("h2", undefined, "Path"), React.createElement("p", undefined, React.createElement(MiniEditor$AgdaMode.make, {
                      value: connection !== undefined ? connection[/* metadata */0][/* path */0] : "",
                      placeholder: "path to Agda",
                      hidden: false,
                      onConfirm: (function (path) {
                          Curry._1(setAutoSearchError, undefined);
                          return Event$AgdaMode.emitOk(path, onSetPath);
                        }),
                      onEditorRef: editorRef[/* supply */1]
                    })), React.createElement("p", undefined, React.createElement("button", {
                      className: "btn icon icon-search inline-block-tight",
                      onClick: handleAutoSearch
                    }, "auto search")), autoSearchError !== undefined ? React.createElement(Settings__Connection__Error$AgdaMode.make, {
                    error: autoSearchError
                  }) : (
                error !== undefined ? React.createElement(Settings__Connection__Error$AgdaMode.make, {
                        error: error
                      }) : null
              ));
}

var make = Settings__Connection;

exports.make = make;
/* react Not a pure module */
