// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Atom = require("atom");
var Util = require("util");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Goal$AgdaMode = require("./Goal.bs.js");
var Hole$AgdaMode = require("./Hole.bs.js");
var View$AgdaMode = require("./View.bs.js");
var Async$AgdaMode = require("./Util/Async.bs.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Command$AgdaMode = require("./Command.bs.js");
var Editors$AgdaMode = require("./Editors.bs.js");
var Response$AgdaMode = require("./Response.bs.js");
var Connection$AgdaMode = require("./Connection.bs.js");
var Highlighting$AgdaMode = require("./Highlighting.bs.js");
var Emacs__Parser$AgdaMode = require("./View/Emacs/Emacs__Parser.bs.js");
var Type__Location$AgdaMode = require("./Type/Type__Location.bs.js");

function activate(instance) {
  return Event$AgdaMode.emitOk(true, instance[/* view */2][/* activatePanel */3]);
}

function deactivate(instance) {
  return Event$AgdaMode.emitOk(false, instance[/* view */2][/* activatePanel */3]);
}

function destroy(instance) {
  deactivate(instance);
  return Event$AgdaMode.emitOk(/* () */0, instance[/* view */2][/* destroy */12]);
}

function destroyAll(instance) {
  Rebase.$$Array[/* forEach */8](Goal$AgdaMode.destroy, instance[/* goals */4]);
  instance[/* goals */4] = /* array */[];
  return /* () */0;
}

function find(index, instance) {
  var found = Rebase.$$Array[/* filter */10]((function (goal) {
          var match = goal[/* index */1];
          if (match !== undefined) {
            return match === index;
          } else {
            return false;
          }
        }), instance[/* goals */4]);
  return Rebase.$$Array[/* get */17](found, 0);
}

function instantiateAll(indices, instance) {
  destroyAll(instance);
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = textEditor.getPath();
  var textBuffer = textEditor.getBuffer();
  var source = textEditor.getText();
  var fileType = Goal$AgdaMode.FileType[/* parse */0](filePath);
  var result = Hole$AgdaMode.parse(source, indices, fileType);
  instance[/* goals */4] = Rebase.$$Array[/* map */0]((function (result) {
          var start = textBuffer.positionForCharacterIndex(result[/* originalRange */2][0]);
          var end_ = textBuffer.positionForCharacterIndex(result[/* originalRange */2][1]);
          var range = new Atom.Range(start, end_);
          textEditor.setTextInBufferRange(range, result[/* content */3]);
          return Goal$AgdaMode.make(instance[/* editors */1][/* source */1], result[/* index */0], result[/* modifiedRange */1]);
        }), result);
  return /* () */0;
}

var Goals = /* module */Block.localModule([
    "destroyAll",
    "find",
    "instantiateAll"
  ], [
    destroyAll,
    find,
    instantiateAll
  ]);

function add(annotation, instance) {
  var textEditor = instance[/* editors */1][/* source */1];
  var textBuffer = textEditor.getBuffer();
  var startPoint = textBuffer.positionForCharacterIndex(annotation[/* start */0] - 1 | 0);
  var endPoint = textBuffer.positionForCharacterIndex(annotation[/* end_ */1] - 1 | 0);
  var range = new Atom.Range(startPoint, endPoint);
  var marker = textEditor.markBufferRange(range);
  instance[/* highlightings */3].push(marker);
  var types = annotation[/* types */2].join(" ");
  textEditor.decorateMarker(marker, {
        type: "highlight",
        class: "highlight-decoration " + types
      });
  return /* () */0;
}

function addFromFile(filepath, instance) {
  var readFile = Util.promisify((function (prim, prim$1) {
          Fs.readFile(prim, prim$1);
          return /* () */0;
        }));
  return Async$AgdaMode.mapError((function (err) {
                  console.log(err);
                  console.log("cannot read the indirect highlighting file: " + filepath);
                  return /* () */0;
                }))(Async$AgdaMode.thenOk((function (content) {
                      Rebase.Result[/* forEach */9]((function (annotations) {
                              return Rebase.$$Array[/* forEach */8]((function (annotation) {
                                            return add(annotation, instance);
                                          }), Rebase.$$Array[/* filter */10](Highlighting$AgdaMode.Annotation[/* shouldHighlight */3], annotations));
                            }), Rebase.Result[/* map */0]((function (tokens) {
                                  if (tokens.tag) {
                                    return Highlighting$AgdaMode.Annotation[/* parseIndirectHighlighting */2](tokens[0]);
                                  } else {
                                    return /* array */[];
                                  }
                                }), Emacs__Parser$AgdaMode.SExpression[/* parse */4](content.toString())));
                      return Async$AgdaMode.resolve(/* () */0);
                    }))(Async$AgdaMode.fromPromise(readFile(filepath))));
}

function destroyAll$1(instance) {
  Rebase.$$Array[/* forEach */8]((function (prim) {
          prim.destroy();
          return /* () */0;
        }), instance[/* highlightings */3]);
  instance[/* highlightings */3] = /* array */[];
  return /* () */0;
}

var Highlightings = /* module */Block.localModule([
    "add",
    "addFromFile",
    "destroyAll"
  ], [
    add,
    addFromFile,
    destroyAll$1
  ]);

function connect(instance) {
  var inquireConnection = function (error, instance) {
    activate(instance);
    var promise = Async$AgdaMode.thenOk((function (param) {
              Event$AgdaMode.emitOk(/* Connection */1, instance[/* view */2][/* navigateSettingsView */11]);
              var promise = Event$AgdaMode.once(instance[/* view */2][/* onInquireConnection */6]);
              Event$AgdaMode.emitOk(/* tuple */[
                    error,
                    ""
                  ], instance[/* view */2][/* inquireConnection */5]);
              return promise;
            }))(Async$AgdaMode.mapError((function (param) {
                  return /* Cancelled */0;
                }))(Event$AgdaMode.once(instance[/* view */2][/* onSettingsView */10])));
    Event$AgdaMode.emitOk(true, instance[/* view */2][/* activateSettingsView */9]);
    return promise;
  };
  var getAgdaPath = function (param) {
    var storedPath = Parser$AgdaMode.filepath(atom.config.get("agda-mode.agdaPath"));
    if (Rebase.$$String[/* isEmpty */5](storedPath)) {
      return Connection$AgdaMode.autoSearch("agda");
    } else {
      return Async$AgdaMode.resolve(storedPath);
    }
  };
  var getMetadata = function (instance, pathAndParams) {
    var match = Parser$AgdaMode.commandLine(pathAndParams);
    return Async$AgdaMode.thenError((function (err) {
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getMetadata(instance, param);
                                  }))(inquireConnection(/* Validation */Block.variant("Validation", 1, [
                                      pathAndParams,
                                      err
                                    ]), instance));
                  }))(Connection$AgdaMode.validateAndMake(match[0], match[1]));
  };
  var getConnection = function (instance, metadata) {
    return Async$AgdaMode.thenError((function (err) {
                    console.log(err);
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getConnection(instance, param);
                                  }))(Async$AgdaMode.thenOk((function (param) {
                                        return getMetadata(instance, param);
                                      }))(inquireConnection(/* Connection */Block.variant("Connection", 2, [err]), instance)));
                  }))(Connection$AgdaMode.connect(metadata));
  };
  var match = instance[/* connection */5];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.mapOk((function (param) {
                        var instance$1 = instance;
                        var connection = param;
                        instance$1[/* connection */5] = connection;
                        var path = Rebase.$$String[/* joinWith */11](" ", Rebase.List[/* fromArray */12](Rebase.$$Array[/* concat */11](connection[/* metadata */0][/* args */1], /* array */[connection[/* metadata */0][/* path */0]])));
                        atom.config.set("agda-mode.agdaPath", path);
                        Event$AgdaMode.emitOk(connection, instance$1[/* view */2][/* updateConnection */4]);
                        return connection;
                      }))(Async$AgdaMode.thenOk((function (param) {
                            return getConnection(instance, param);
                          }))(Async$AgdaMode.thenOk((function (param) {
                                return getMetadata(instance, param);
                              }))(Async$AgdaMode.thenError((function (err) {
                                    return inquireConnection(/* AutoSearch */Block.variant("AutoSearch", 0, [err]), instance);
                                  }))(getAgdaPath(/* () */0))))));
  }
}

function disconnect(instance) {
  var match = instance[/* connection */5];
  if (match !== undefined) {
    Connection$AgdaMode.disconnect(/* DisconnectedByUser */0, match);
    instance[/* connection */5] = undefined;
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function get(instance) {
  var match = instance[/* connection */5];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return connect(instance);
  }
}

var Connections = /* module */Block.localModule([
    "connect",
    "disconnect",
    "get"
  ], [
    connect,
    disconnect,
    get
  ]);

function display(text, style, body, handles) {
  Event$AgdaMode.emitOk(/* tuple */[
        /* record */Block.record([
            "text",
            "style"
          ], [
            text,
            style
          ]),
        body
      ], handles[/* display */0]);
  return Async$AgdaMode.resolve(/* () */0);
}

function inquire(text, placeholder, value, handles) {
  var promise = Event$AgdaMode.once(handles[/* onInquireQuery */7]);
  Event$AgdaMode.emitOk(/* tuple */[
        /* record */Block.record([
            "text",
            "style"
          ], [
            text,
            0
          ]),
        placeholder,
        value
      ], handles[/* inquire */1]);
  return Async$AgdaMode.mapError((function (param) {
                  return /* Cancelled */0;
                }))(promise);
}

function toggleDocking(handles) {
  Event$AgdaMode.emitOk(/* () */0, handles[/* toggleDocking */2]);
  return Async$AgdaMode.resolve(/* () */0);
}

var Views = /* module */Block.localModule([
    "display",
    "inquire",
    "toggleDocking"
  ], [
    display,
    inquire,
    toggleDocking
  ]);

function getPointedGoal(instance) {
  var pointed = Editors$AgdaMode.pointingAt(undefined, instance[/* goals */4], instance[/* editors */1]);
  if (pointed !== undefined) {
    return Async$AgdaMode.resolve(pointed);
  } else {
    return Async$AgdaMode.reject(/* OutOfGoal */2);
  }
}

function getPointedGoalAt(cursor, instance) {
  var pointed = Editors$AgdaMode.pointingAt(Caml_option.some(cursor), instance[/* goals */4], instance[/* editors */1]);
  if (pointed !== undefined) {
    return Async$AgdaMode.resolve(pointed);
  } else {
    return Async$AgdaMode.reject(/* OutOfGoal */2);
  }
}

function handleOutOfGoal(callback) {
  return Async$AgdaMode.thenError((function (error) {
                if (typeof error === "number" && error >= 2) {
                  return Curry._1(callback, /* () */0);
                } else {
                  return Async$AgdaMode.reject(error);
                }
              }));
}

function getGoalIndex(goal) {
  var match = goal[/* index */1];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(/* tuple */[
                goal,
                match
              ]);
  } else {
    return Async$AgdaMode.reject(/* GoalNotIndexed */1);
  }
}

function recoverCursor(callback, instance) {
  var cursor = instance[/* editors */1][/* source */1].getCursorBufferPosition();
  var result = Curry._1(callback, /* () */0);
  handleOutOfGoal((function (param) {
            instance[/* editors */1][/* source */1].setCursorBufferPosition(cursor);
            return Async$AgdaMode.resolve(/* () */0);
          }))(Async$AgdaMode.thenOk((function (goal) {
                var fresh = Goal$AgdaMode.isEmpty(goal);
                if (fresh) {
                  var delta = new Atom.Point(0, 3);
                  var newPosition = goal[/* range */2].start.translate(delta);
                  setTimeout((function (param) {
                          instance[/* editors */1][/* source */1].setCursorBufferPosition(newPosition);
                          return /* () */0;
                        }), 0);
                  return Async$AgdaMode.resolve(/* () */0);
                } else {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(cursor);
                  return Async$AgdaMode.resolve(/* () */0);
                }
              }))(getPointedGoalAt(cursor, instance)));
  return result;
}

function handleCommandError(instance) {
  return Async$AgdaMode.thenError((function (error) {
                if (typeof error === "number") {
                  switch (error) {
                    case 0 : 
                        display("Query Cancelled", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]), instance[/* view */2]);
                        break;
                    case 1 : 
                        display("Goal not indexed", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please reload to re-index the goal"])]), instance[/* view */2]);
                        break;
                    case 2 : 
                        display("Out of goal", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Please place the cursor in a goal"])]), instance[/* view */2]);
                        break;
                    
                  }
                } else {
                  display("Connection-related Error", /* Error */1, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, [""])]), instance[/* view */2]);
                }
                return Async$AgdaMode.resolve(/* () */0);
              }));
}

function getSelectedTextNode(instance) {
  var getLargerSyntaxNode = function (param) {
    instance[/* editors */1][/* source */1].selectLargerSyntaxNode();
    return instance[/* editors */1][/* source */1].getSelectedText();
  };
  var getPointedWord = function (param) {
    instance[/* editors */1][/* source */1].selectWordsContainingCursors();
    return instance[/* editors */1][/* source */1].getSelectedText();
  };
  var selectedText = instance[/* editors */1][/* source */1].getSelectedText();
  if (Rebase.$$String[/* isEmpty */5](selectedText)) {
    var largerNode = getLargerSyntaxNode(/* () */0);
    if (Rebase.$$String[/* isEmpty */5](largerNode)) {
      return getPointedWord(/* () */0);
    } else {
      var pointedText = getPointedWord(/* () */0);
      if (pointedText === "_") {
        return getLargerSyntaxNode(/* () */0);
      } else {
        return pointedText;
      }
    }
  } else {
    return selectedText;
  }
}

function handleLocalCommand(command, instance) {
  var buff = function (command, instance) {
    return Async$AgdaMode.mapError((function (param) {
                    return /* Cancelled */0;
                  }))(Async$AgdaMode.mapOk((function (connection) {
                        return /* record */Block.record([
                                  "connection",
                                  "filepath",
                                  "command"
                                ], [
                                  connection,
                                  instance[/* editors */1][/* source */1].getPath(),
                                  command
                                ]);
                      }))(get(instance)));
  };
  if (typeof command === "number") {
    switch (command) {
      case 0 : 
          return Async$AgdaMode.thenOk((function (param) {
                          instance[/* loaded */0] = true;
                          return buff(/* Load */0, instance);
                        }))(Async$AgdaMode.mapError((function (param) {
                              return /* Cancelled */0;
                            }))(Async$AgdaMode.fromPromise(instance[/* editors */1][/* source */1].save())));
      case 1 : 
          disconnect(instance);
          destroyAll(instance);
          destroyAll$1(instance);
          instance[/* loaded */0] = false;
          return Async$AgdaMode.resolve(undefined);
      case 2 : 
          disconnect(instance);
          return buff(/* Load */0, instance);
      case 3 : 
          return buff(/* Abort */1, instance);
      case 4 : 
          return buff(/* Compile */2, instance);
      case 5 : 
          return buff(/* ToggleDisplayOfImplicitArguments */3, instance);
      case 6 : 
          return buff(/* SolveConstraints */4, instance);
      case 7 : 
          return buff(/* ShowConstraints */5, instance);
      case 8 : 
          return buff(/* ShowGoals */6, instance);
      case 9 : 
          var nextGoal = /* record */Block.record(["contents"], [undefined]);
          var cursor = instance[/* editors */1][/* source */1].getCursorBufferPosition();
          var positions = Rebase.$$Array[/* map */0]((function (goal) {
                  return goal[/* range */2].start.translate(new Atom.Point(0, 3));
                }), instance[/* goals */4]);
          Rebase.$$Array[/* forEach */8]((function (position) {
                  if (position.isGreaterThan(cursor) && nextGoal[0] === undefined) {
                    nextGoal[0] = Caml_option.some(position);
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }), positions);
          if (nextGoal[0] === undefined) {
            nextGoal[0] = Rebase.$$Array[/* get */17](positions, 0);
          }
          Rebase.Option[/* forEach */8]((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), nextGoal[0]);
          return Async$AgdaMode.resolve(undefined);
      case 10 : 
          var previousGoal = /* record */Block.record(["contents"], [undefined]);
          var cursor$1 = instance[/* editors */1][/* source */1].getCursorBufferPosition();
          var positions$1 = Rebase.$$Array[/* map */0]((function (goal) {
                  return goal[/* range */2].start.translate(new Atom.Point(0, 3));
                }), instance[/* goals */4]);
          Rebase.$$Array[/* forEach */8]((function (position) {
                  if (position.isLessThan(cursor$1) && previousGoal[0] === undefined) {
                    previousGoal[0] = Caml_option.some(position);
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }), positions$1);
          if (previousGoal[0] === undefined) {
            previousGoal[0] = Rebase.$$Array[/* get */17](positions$1, Rebase.$$Array[/* length */16](positions$1) - 1 | 0);
          }
          Rebase.Option[/* forEach */8]((function (position) {
                  instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                  return /* () */0;
                }), previousGoal[0]);
          return Async$AgdaMode.resolve(undefined);
      case 11 : 
          toggleDocking(instance[/* view */2]);
          return Async$AgdaMode.resolve(undefined);
      case 12 : 
          var selectedText = instance[/* editors */1][/* source */1].getSelectedText();
          if (Rebase.$$String[/* isEmpty */5](selectedText)) {
            return Async$AgdaMode.thenOk((function (expr) {
                            return Async$AgdaMode.thenOk((function (param) {
                                            return buff(/* WhyInScope */Block.variant("WhyInScope", 0, [
                                                          expr,
                                                          param[1]
                                                        ]), instance);
                                          }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
                          }))(inquire("Scope info", "name:", "", instance[/* view */2]));
          } else {
            return buff(/* WhyInScopeGlobal */Block.variant("WhyInScopeGlobal", 1, [selectedText]), instance);
          }
      case 13 : 
          return Async$AgdaMode.thenOk((function (param) {
                          var index = param[1];
                          var goal = param[0];
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return Async$AgdaMode.thenOk((function (result) {
                                            Goal$AgdaMode.setContent(result, goal);
                                            return buff(/* Give */Block.variant("Give", 9, [
                                                          goal,
                                                          index
                                                        ]), instance);
                                          }))(inquire("Give", "expression to give:", "", instance[/* view */2]));
                          } else {
                            return buff(/* Give */Block.variant("Give", 9, [
                                          goal,
                                          index
                                        ]), instance);
                          }
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 14 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Refine */Block.variant("Refine", 10, [
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 15 : 
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Refine */Block.variant("Refine", 10, [
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 16 : 
          return Async$AgdaMode.thenOk((function (param) {
                          var index = param[1];
                          var goal = param[0];
                          if (Goal$AgdaMode.isEmpty(goal)) {
                            return Async$AgdaMode.thenOk((function (result) {
                                            Goal$AgdaMode.setContent(result, goal);
                                            return buff(/* Case */Block.variant("Case", 12, [
                                                          goal,
                                                          index
                                                        ]), instance);
                                          }))(inquire("Case", "expression to case:", "", instance[/* view */2]));
                          } else {
                            return buff(/* Case */Block.variant("Case", 12, [
                                          goal,
                                          index
                                        ]), instance);
                          }
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 17 : 
          return buff(/* Load */0, instance);
      case 18 : 
          if (instance[/* loaded */0]) {
            var name = recoverCursor((function (param) {
                    return getSelectedTextNode(instance);
                  }), instance);
            return handleOutOfGoal((function (param) {
                            return buff(/* GotoDefinitionGlobal */Block.variant("GotoDefinitionGlobal", 18, [name]), instance);
                          }))(Async$AgdaMode.thenOk((function (param) {
                                return buff(/* GotoDefinition */Block.variant("GotoDefinition", 17, [
                                              name,
                                              param[1]
                                            ]), instance);
                              }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance))));
          } else {
            return Async$AgdaMode.thenOk((function (param) {
                            return handleLocalCommand(/* GotoDefinition */18, instance);
                          }))(handleCommandError(instance)(dispatch(/* Load */0, instance)));
          }
      
    }
  } else {
    switch (command.tag | 0) {
      case 0 : 
          var normalization = command[0];
          return Async$AgdaMode.thenOk((function (expr) {
                          return buff(/* SearchAbout */Block.variant("SearchAbout", 2, [
                                        normalization,
                                        expr
                                      ]), instance);
                        }))(inquire("Searching through definitions [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization) + "]"), "expression to infer:", "", instance[/* view */2]));
      case 1 : 
          var normalization$1 = command[0];
          return handleOutOfGoal((function (param) {
                          return Async$AgdaMode.thenOk((function (expr) {
                                          return buff(/* InferTypeGlobal */Block.variant("InferTypeGlobal", 4, [
                                                        normalization$1,
                                                        expr
                                                      ]), instance);
                                        }))(inquire("Infer type [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$1) + "]"), "expression to infer:", "", instance[/* view */2]));
                        }))(Async$AgdaMode.thenOk((function (param) {
                              var index = param[1];
                              var goal = param[0];
                              if (Goal$AgdaMode.isEmpty(goal)) {
                                return Async$AgdaMode.thenOk((function (expr) {
                                                return buff(/* InferType */Block.variant("InferType", 3, [
                                                              normalization$1,
                                                              expr,
                                                              index
                                                            ]), instance);
                                              }))(inquire("Infer type [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$1) + "]"), "expression to infer:", "", instance[/* view */2]));
                              } else {
                                return buff(/* Give */Block.variant("Give", 9, [
                                              goal,
                                              index
                                            ]), instance);
                              }
                            }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance))));
      case 2 : 
          var normalization$2 = command[0];
          return Async$AgdaMode.thenOk((function (expr) {
                          return handleOutOfGoal((function (param) {
                                          return buff(/* ModuleContentsGlobal */Block.variant("ModuleContentsGlobal", 6, [
                                                        normalization$2,
                                                        expr
                                                      ]), instance);
                                        }))(Async$AgdaMode.thenOk((function (param) {
                                              return buff(/* ModuleContents */Block.variant("ModuleContents", 5, [
                                                            normalization$2,
                                                            expr,
                                                            param[1]
                                                          ]), instance);
                                            }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance))));
                        }))(inquire("Module contents [" + (Command$AgdaMode.Normalization[/* of_string */0](normalization$2) + "]"), "module name:", "", instance[/* view */2]));
      case 3 : 
          var computeMode = command[0];
          return handleOutOfGoal((function (param) {
                          return Async$AgdaMode.thenOk((function (expr) {
                                          return buff(/* ComputeNormalFormGlobal */Block.variant("ComputeNormalFormGlobal", 8, [
                                                        computeMode,
                                                        expr
                                                      ]), instance);
                                        }))(inquire("Compute normal form", "expression to normalize:", "", instance[/* view */2]));
                        }))(Async$AgdaMode.thenOk((function (param) {
                              var index = param[1];
                              var goal = param[0];
                              if (Goal$AgdaMode.isEmpty(goal)) {
                                return Async$AgdaMode.thenOk((function (expr) {
                                                return buff(/* ComputeNormalForm */Block.variant("ComputeNormalForm", 7, [
                                                              computeMode,
                                                              expr,
                                                              index
                                                            ]), instance);
                                              }))(inquire("Compute normal form", "expression to normalize:", "", instance[/* view */2]));
                              } else {
                                var expr = Goal$AgdaMode.getContent(goal);
                                return buff(/* ComputeNormalForm */Block.variant("ComputeNormalForm", 7, [
                                              computeMode,
                                              expr,
                                              index
                                            ]), instance);
                              }
                            }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance))));
      case 4 : 
          var normalization$3 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalType */Block.variant("GoalType", 13, [
                                        normalization$3,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 5 : 
          var normalization$4 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* Context */Block.variant("Context", 14, [
                                        normalization$4,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 6 : 
          var normalization$5 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalTypeAndContext */Block.variant("GoalTypeAndContext", 15, [
                                        normalization$5,
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 7 : 
          var normalization$6 = command[0];
          return Async$AgdaMode.thenOk((function (param) {
                          return buff(/* GoalTypeAndInferredType */Block.variant("GoalTypeAndInferredType", 16, [
                                        normalization$6,
                                        param[0],
                                        param[1]
                                      ]), instance);
                        }))(Async$AgdaMode.thenOk(getGoalIndex)(getPointedGoal(instance)));
      case 8 : 
          var enabled = atom.config.get("agda-mode.inputMethod");
          if (enabled) {
            switch (command[0]) {
              case 0 : 
                  Event$AgdaMode.emitOk(true, instance[/* view */2][/* activatePanel */3]);
                  Event$AgdaMode.emitOk(true, instance[/* view */2][/* activateInputMethod */13]);
                  break;
              case 1 : 
                  Event$AgdaMode.emitOk("{", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 2 : 
                  Event$AgdaMode.emitOk("[", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 3 : 
                  Event$AgdaMode.emitOk("(", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 4 : 
                  Event$AgdaMode.emitOk("\"", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 5 : 
                  Event$AgdaMode.emitOk("'", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              case 6 : 
                  Event$AgdaMode.emitOk("`", instance[/* view */2][/* interceptAndInsertKey */14]);
                  break;
              
            }
          } else {
            Editors$AgdaMode.Focus[/* get */0](instance[/* editors */1]).insertText("\\");
          }
          return Async$AgdaMode.resolve(undefined);
      case 9 : 
          var range = command[0];
          var filePath = instance[/* editors */1][/* source */1].getPath();
          var shouldJump;
          if (range) {
            var match = range[0];
            shouldJump = match !== undefined ? match === filePath : true;
          } else {
            shouldJump = false;
          }
          if (shouldJump) {
            var ranges = Type__Location$AgdaMode.Range[/* toAtomRanges */1](range);
            if (Rebase.Option[/* isSome */13](Rebase.$$Array[/* get */17](ranges, 0))) {
              setTimeout((function (param) {
                      instance[/* editors */1][/* source */1].setSelectedBufferRanges(ranges);
                      return /* () */0;
                    }), 0);
            }
            
          }
          return Async$AgdaMode.resolve(undefined);
      
    }
  }
}

function handleResponse(instance, response) {
  var textEditor = instance[/* editors */1][/* source */1];
  var filePath = textEditor.getPath();
  var textBuffer = textEditor.getBuffer();
  if (typeof response === "number") {
    if (response === 1) {
      destroyAll$1(instance);
      return Async$AgdaMode.resolve(/* () */0);
    } else {
      console.log(response);
      return Async$AgdaMode.resolve(/* () */0);
    }
  } else {
    switch (response.tag | 0) {
      case 0 : 
          Rebase.$$Array[/* forEach */8]((function (annotation) {
                  return add(annotation, instance);
                }), Rebase.$$Array[/* filter */10](Highlighting$AgdaMode.Annotation[/* shouldHighlight */3], response[1]));
          return Async$AgdaMode.resolve(/* () */0);
      case 1 : 
          var filepath = response[0];
          return Async$AgdaMode.mapError((function (param) {
                          return /* Cancelled */0;
                        }))(Async$AgdaMode.mapOk((function (param) {
                              Fs.unlink(filepath, (function (param) {
                                      return /* () */0;
                                    }));
                              return /* () */0;
                            }))(addFromFile(filepath, instance)));
      case 2 : 
          var checked = response[1];
          var displayImplicit = response[0];
          if (displayImplicit || checked) {
            display("Status", /* PlainText */0, /* Emacs */Block.variant("Emacs", 0, [/* PlainText */Block.variant("PlainText", 7, ["Typechecked: " + (Pervasives.string_of_bool(checked) + ("\nDisplay implicit arguments: " + Pervasives.string_of_bool(displayImplicit)))])]), instance[/* view */2]);
          }
          return Async$AgdaMode.resolve(/* () */0);
      case 3 : 
          if (response[0] === filePath) {
            var point = textBuffer.positionForCharacterIndex(response[1] - 1 | 0);
            setTimeout((function (param) {
                    textEditor.setCursorBufferPosition(point);
                    return /* () */0;
                  }), 0);
          }
          return Async$AgdaMode.resolve(/* () */0);
      case 4 : 
          instantiateAll(response[0], instance);
          return Async$AgdaMode.resolve(/* () */0);
      case 5 : 
          var give = response[1];
          var index = response[0];
          var match = find(index, instance);
          if (match !== undefined) {
            var goal = match;
            if (typeof give === "number") {
              if (give === 0) {
                var content = Goal$AgdaMode.getContent(goal);
                Goal$AgdaMode.setContent("(" + (content + ")"), goal);
              }
              
            } else {
              Goal$AgdaMode.setContent(give[0].replace((/\\n/g), "\n"), goal);
            }
            Goal$AgdaMode.removeBoundary(goal);
            Goal$AgdaMode.destroy(goal);
            return Async$AgdaMode.resolve(/* () */0);
          } else {
            console.log("error: cannot find goal #" + String(index));
            return Async$AgdaMode.resolve(/* () */0);
          }
      case 6 : 
          var lines = response[1];
          var pointed = Editors$AgdaMode.pointingAt(undefined, instance[/* goals */4], instance[/* editors */1]);
          if (pointed !== undefined) {
            var goal$1 = pointed;
            if (response[0]) {
              Goal$AgdaMode.writeLambda(lines, goal$1);
            } else {
              Goal$AgdaMode.writeLines(lines, goal$1);
            }
            return dispatch(/* Load */0, instance);
          } else {
            return Async$AgdaMode.reject(/* OutOfGoal */2);
          }
      case 8 : 
          Event$AgdaMode.emitOk(true, instance[/* view */2][/* activatePanel */3]);
          return Response$AgdaMode.Info[/* handle */1](response[0], (function (x, y, z) {
                        return display(x, y, z, instance[/* view */2]);
                      }));
      default:
        console.log(response);
        return Async$AgdaMode.resolve(/* () */0);
    }
  }
}

function dispatch(command, instance) {
  return Async$AgdaMode.thenOk((function (result) {
                  var responses = Rebase.$$Array[/* filterMap */23](Rebase.Option[/* fromResult */12], result);
                  return Async$AgdaMode.mapOk((function (param) {
                                  return /* () */0;
                                }))(Async$AgdaMode.all(recoverCursor((function (param) {
                                        return Rebase.$$Array[/* map */0]((function (param) {
                                                      return handleResponse(instance, param);
                                                    }), responses);
                                      }), instance)));
                }))(Async$AgdaMode.thenOk((function (remote) {
                      if (remote !== undefined) {
                        var cmd = remote;
                        var serialized = Command$AgdaMode.Remote[/* serialize */0](cmd);
                        var partial_arg = Rebase.Result[/* flatMap */6];
                        var partial_arg$1 = function (param) {
                          return partial_arg(Response$AgdaMode.parse, param);
                        };
                        var partial_arg$2 = Rebase.$$Array[/* map */0];
                        return Async$AgdaMode.mapError((function (param) {
                                        return /* Cancelled */0;
                                      }))(Async$AgdaMode.mapOk((function (param) {
                                            return partial_arg$2(partial_arg$1, param);
                                          }))(Async$AgdaMode.mapOk(Emacs__Parser$AgdaMode.SExpression[/* parseFile */5])(Connection$AgdaMode.send(serialized, cmd[/* connection */0]))));
                      } else {
                        return Async$AgdaMode.resolve(/* array */[]);
                      }
                    }))(handleLocalCommand(command, instance)));
}

function make(textEditor) {
  atom.views.getView(textEditor).classList.add("agda");
  var editors = Editors$AgdaMode.make(textEditor);
  var instsance = /* record */Block.record([
      "loaded",
      "editors",
      "view",
      "highlightings",
      "goals",
      "connection"
    ], [
      false,
      editors,
      View$AgdaMode.initialize(editors),
      [],
      [],
      undefined
    ]);
  var destructor = Event$AgdaMode.onOk((function (ev) {
            switch (ev.tag | 0) {
              case 0 : 
                  dispatch(/* Jump */Block.variant("Jump", 9, [ev[0]]), instsance);
                  return /* () */0;
              case 1 : 
              case 2 : 
                  return /* () */0;
              
            }
          }))(instsance[/* view */2][/* onMouseEvent */15]);
  Async$AgdaMode.finalOk((function (param) {
          return Curry._1(destructor, /* () */0);
        }), Event$AgdaMode.once(instsance[/* view */2][/* destroy */12]));
  return instsance;
}

function dispatchUndo(_instance) {
  console.log("Undo");
  return /* () */0;
}

var Event = 0;

exports.Event = Event;
exports.activate = activate;
exports.deactivate = deactivate;
exports.destroy = destroy;
exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.Views = Views;
exports.getPointedGoal = getPointedGoal;
exports.getPointedGoalAt = getPointedGoalAt;
exports.handleOutOfGoal = handleOutOfGoal;
exports.getGoalIndex = getGoalIndex;
exports.recoverCursor = recoverCursor;
exports.handleCommandError = handleCommandError;
exports.getSelectedTextNode = getSelectedTextNode;
exports.handleLocalCommand = handleLocalCommand;
exports.handleResponse = handleResponse;
exports.dispatch = dispatch;
exports.make = make;
exports.dispatchUndo = dispatchUndo;
/* fs Not a pure module */
