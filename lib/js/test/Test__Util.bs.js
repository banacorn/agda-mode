// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Diff = require("diff");
var Path = require("path");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var base = Path.join(__dirname, "../../../");

function file(path) {
  return Path.join(base, path);
}

function asset(path) {
  return Path.join(Path.join(base, "test/asset"), path);
}

function openFile(uri) {
  return atom.workspace.open(uri);
}

function closeFile(uri) {
  var pane = atom.workspace.paneForURI(uri);
  if (pane !== undefined) {
    var p = Caml_option.valFromOption(pane);
    var item = p.itemForURI(uri);
    if (item !== undefined) {
      return p.destroyItem(item, true);
    } else {
      return Promise.resolve(false);
    }
  } else {
    return Promise.resolve(false);
  }
}

function getActivePackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getActivePackages());
}

function getLoadedPackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getLoadedPackages());
}

var DispatchFailure = Caml_exceptions.create("Test__Util-AgdaMode.DispatchFailure");

function dispatch(editor, $$event) {
  var element = atom.views.getView(editor);
  var result = atom.commands.dispatch(element, $$event);
  if (result !== undefined) {
    return Promise.resolve(/* () */0);
  } else {
    return Promise.reject([
                DispatchFailure,
                $$event
              ]);
  }
}

function dispatchAt(element, $$event) {
  var result = atom.commands.dispatch(element, $$event);
  if (result !== undefined) {
    return Promise.resolve(/* () */0);
  } else {
    return Promise.reject([
                DispatchFailure,
                $$event
              ]);
  }
}

function getGoldenFilepaths(dirname) {
  var readdir = Util.promisify((function (prim, prim$1) {
          Fs.readdir(prim, prim$1);
          return /* () */0;
        }));
  var isInFile = function (param) {
    return param.endsWith(".in");
  };
  var toBasename = function (path) {
    return Path.join(dirname, Path.basename(path, ".in"));
  };
  return readdir(dirname).then((function (paths) {
                return Promise.resolve(Rebase.$$Array[/* map */0](toBasename, Rebase.$$Array[/* filter */10](isInFile, paths)));
              }));
}

function getGoldenFilepathsSync(dirname) {
  var isInFile = function (param) {
    return param.endsWith(".in");
  };
  var toBasename = function (path) {
    return Path.join(dirname, Path.basename(path, ".in"));
  };
  return Rebase.$$Array[/* map */0](toBasename, Rebase.$$Array[/* filter */10](isInFile, Fs.readdirSync(dirname)));
}

var FileMissing = Caml_exceptions.create("Test__Util-AgdaMode.Golden.FileMissing");

function map(f, param) {
  return /* Golden */Caml_chrome_debugger.simpleVariant("Golden", [
            param[0],
            Curry._1(f, param[1]),
            param[2]
          ]);
}

function readFile(filepath) {
  var readFile$1 = Util.promisify((function (prim, prim$1) {
          Fs.readFile(prim, prim$1);
          return /* () */0;
        }));
  return Promise.all(/* array */[
                readFile$1(filepath + ".in"),
                readFile$1(filepath + ".out")
              ]).then((function (param) {
                if (param.length !== 2) {
                  return Promise.reject([
                              FileMissing,
                              filepath
                            ]);
                } else {
                  var input = param[0];
                  var output = param[1];
                  return Promise.resolve(/* Golden */Caml_chrome_debugger.simpleVariant("Golden", [
                                filepath,
                                input.toString(),
                                output.toString()
                              ]));
                }
              }));
}

function compare(param) {
  var expected = param[2];
  var actual = param[1];
  var erred = /* record */Caml_chrome_debugger.record(["contents"], [false]);
  var count = /* record */Caml_chrome_debugger.record(["contents"], [0]);
  Rebase.$$Array[/* forEach */8]((function (diff) {
          var match = Rebase.$$String[/* length */1](diff.value) > 100;
          var change = match ? Rebase.$$String[/* sub */9](0, 100, diff.value) + " ..." : diff.value;
          var expected$prime = Rebase.$$String[/* sub */9](Caml_primitive.caml_int_max(0, count[0] - 50 | 0), (50 + Rebase.$$String[/* length */1](diff.value) | 0) + 50 | 0, expected);
          var actual$prime = Rebase.$$String[/* sub */9](Caml_primitive.caml_int_max(0, count[0] - 50 | 0), (50 + Rebase.$$String[/* length */1](diff.value) | 0) + 50 | 0, actual);
          var message = "\n\nexpected => " + (expected$prime + ("\n\nactual   => " + (actual$prime + "\n\nchange => ")));
          if (diff.added) {
            Assert$BsMocha.fail(message + (" added " + (change + ("\n at position " + String(count[0])))));
          }
          if (diff.removed) {
            return Assert$BsMocha.fail(message + (" removed " + (change + ("\n\n at position " + String(count[0])))));
          } else {
            return 0;
          }
        }), Rebase.$$Array[/* filter */10]((function (diff) {
              if (diff.added || diff.removed) {
                if (!erred[0]) {
                  erred[0] = true;
                }
                return true;
              } else {
                if (!erred[0]) {
                  count[0] = count[0] + Rebase.$$String[/* length */1](diff.value) | 0;
                }
                return false;
              }
            }), Diff.diffWordsWithSpace(expected, actual)));
  return Promise.resolve(/* () */0);
}

var Golden = /* module */Caml_chrome_debugger.localModule([
    "FileMissing",
    "map",
    "readFile",
    "compare"
  ], [
    FileMissing,
    map,
    readFile,
    compare
  ]);

var partial_arg = Rebase.$$String[/* joinWith */11];

var serialize = Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], Rebase.List[/* fromArray */12], (function (param) {
            return partial_arg("\n", param);
          })), (function (x) {
        return x + "\n";
      }));

function serializeWith(f) {
  var partial_arg = Rebase.$$Array[/* map */0];
  var partial_arg$1 = Rebase.$$String[/* joinWith */11];
  return Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], (function (param) {
                        return partial_arg(f, param);
                      }), Rebase.List[/* fromArray */12]), (function (param) {
                    return partial_arg$1("\n", param);
                  })), (function (x) {
                return x + "\n";
              }));
}

function breakInput(breakpoints, input) {
  var breakpoints$prime = Rebase.$$Array[/* concat */11](breakpoints, /* array */[0]);
  return Rebase.$$Array[/* map */0]((function (param) {
                return Rebase.$$String[/* sub */9](param[0], param[1], input);
              }), Rebase.$$Array[/* mapi */27]((function (x, i) {
                    var match = Rebase.$$Array[/* get */17](breakpoints$prime, i + 1 | 0);
                    if (match !== undefined) {
                      return /* tuple */[
                              x,
                              match - x | 0
                            ];
                    } else {
                      return /* tuple */[
                              x,
                              Rebase.$$String[/* length */1](input) - x | 0
                            ];
                    }
                  }), breakpoints$prime));
}

exports.base = base;
exports.file = file;
exports.asset = asset;
exports.openFile = openFile;
exports.closeFile = closeFile;
exports.getActivePackageNames = getActivePackageNames;
exports.getLoadedPackageNames = getLoadedPackageNames;
exports.DispatchFailure = DispatchFailure;
exports.dispatch = dispatch;
exports.dispatchAt = dispatchAt;
exports.getGoldenFilepaths = getGoldenFilepaths;
exports.getGoldenFilepathsSync = getGoldenFilepathsSync;
exports.Golden = Golden;
exports.serialize = serialize;
exports.serializeWith = serializeWith;
exports.breakInput = breakInput;
/* base Not a pure module */
