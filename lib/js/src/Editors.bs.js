// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var QueryCancelled = Caml_exceptions.create("Editors-AgdaMode.QueryCancelled");

function make(editor) {
  return {
          focused: /* Source */0,
          source: editor,
          query: undefined
        };
}

function getID(self) {
  return String(self.source.id);
}

function get(editors) {
  var match = editors.focused;
  if (match) {
    var match$1 = editors.query;
    if (match$1 !== undefined) {
      return Caml_option.valFromOption(match$1);
    } else {
      return editors.source;
    }
  } else {
    return editors.source;
  }
}

function on(sort, editors) {
  if (sort) {
    Rebase.$$Option.forEach((function (prim) {
            prim.focus();
            return /* () */0;
          }), Rebase.$$Option.map((function (prim) {
                return atom.views.getView(prim);
              }), editors.query));
    editors.focused = /* Query */1;
    return /* () */0;
  } else {
    atom.views.getView(editors.source).focus();
    editors.focused = /* Source */0;
    return /* () */0;
  }
}

var Focus = {
  get: get,
  on: on
};

function getSelectedSymbol(editors) {
  return Rebase.$$String.sub(0, 1, get(editors).getSelectedText());
}

function getSelectedTextNode(editors) {
  var getLargerSyntaxNode = function (param) {
    get(editors).selectLargerSyntaxNode();
    return get(editors).getSelectedText();
  };
  var getPointedWord = function (param) {
    get(editors).selectWordsContainingCursors();
    return get(editors).getSelectedText();
  };
  var selectedText = get(editors).getSelectedText();
  if (Rebase.$$String.isEmpty(selectedText)) {
    var largerNode = getLargerSyntaxNode(/* () */0);
    if (Rebase.$$String.isEmpty(largerNode)) {
      return getPointedWord(/* () */0);
    } else {
      var pointedText = getPointedWord(/* () */0);
      if (pointedText === "_") {
        return getLargerSyntaxNode(/* () */0);
      } else {
        return pointedText;
      }
    }
  } else {
    return selectedText;
  }
}

exports.QueryCancelled = QueryCancelled;
exports.make = make;
exports.getID = getID;
exports.Focus = Focus;
exports.getSelectedSymbol = getSelectedSymbol;
exports.getSelectedTextNode = getSelectedTextNode;
/* No side effect */
