// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Instance$AgdaMode = require("../src/Instance.bs.js");
var Response$AgdaMode = require("../src/Response.bs.js");
var Connection$AgdaMode = require("../src/Connection.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Instance__Handler$AgdaMode = require("../src/Instance/Instance__Handler.bs.js");
var Instance__Connections$AgdaMode = require("../src/Instance/Instance__Connections.bs.js");
var Test__Parser__SExpression$AgdaMode = require("./Parser/Test__Parser__SExpression.bs.js");

Mocha$BsMocha.describe("when loading files")(undefined, undefined, undefined, (function (param) {
        return Mocha$BsMocha.describe("when parsing responses from Agda")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("should succeed")(undefined, undefined, undefined, (function (param) {
                                    var path = Test__Util$AgdaMode.asset("Algebra.agda");
                                    return Test__Util$AgdaMode.openFile(path).then((function (editor) {
                                                  var instance = Instance$AgdaMode.make(editor);
                                                  return Async$AgdaMode.thenOk((function (param) {
                                                                  return Async$AgdaMode.mapError((function (param) {
                                                                                  Assert$BsMocha.fail(editor.getPath());
                                                                                  return /* () */0;
                                                                                }))(Async$AgdaMode.thenOk((function (param) {
                                                                                      Assert$BsMocha.ok(true);
                                                                                      return Async$AgdaMode.resolve(/* () */0);
                                                                                    }))(Async$AgdaMode.thenOk((function (param) {
                                                                                          return Instance__Handler$AgdaMode.handleRemoteCommand(instance, (function (param, param$1) {
                                                                                                        return Async$AgdaMode.resolve(/* () */0);
                                                                                                      }), param);
                                                                                        }))(Instance__Handler$AgdaMode.handleLocalCommand(/* Load */0, instance))));
                                                                }))(Async$AgdaMode.mapError((function (param) {
                                                                      return Assert$BsMocha.fail(editor.getPath());
                                                                    }))(Async$AgdaMode.mapOk((function (param) {
                                                                          return Instance__Connections$AgdaMode.set(instance, param);
                                                                        }))(Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.thenOk(Connection$AgdaMode.connect)(Async$AgdaMode.thenOk(Connection$AgdaMode.validateAndMake)(Async$AgdaMode.mapOk((function (x) {
                                                                                          return x + " --no-libraries";
                                                                                        }))(Connection$AgdaMode.autoSearch("agda"))))))));
                                                }));
                                  }));
                    }));
      }));

function toResponses(exprs) {
  var result = Rebase.$$Array[/* map */0](Response$AgdaMode.parse, exprs);
  var extractError = function (param) {
    if (param.tag) {
      return Caml_option.some(param[0]);
    }
    
  };
  var extractOk = Rebase.$$Option[/* fromResult */12];
  var failures = Rebase.$$Array[/* filterMap */23](extractError, result);
  Rebase.$$Array[/* forEach */8](Assert$BsMocha.fail, failures);
  return Rebase.$$Array[/* filterMap */23](extractOk, result);
}

Mocha$BsMocha.describe("When doing regression tests")(undefined, undefined, undefined, (function (param) {
        return Rebase.$$Array[/* forEach */8]((function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    var partial_arg = Curry._2(Rebase.Fn[/* >> */6], Curry._2(Rebase.Fn[/* >> */6], Test__Parser__SExpression$AgdaMode.parseSExpression, toResponses), Test__Util$AgdaMode.serializeWith(Response$AgdaMode.toString));
                                    var partial_arg$1 = Test__Util$AgdaMode.Golden[/* map */1];
                                    var partial_arg$2 = Curry._2(Rebase.Fn[/* >> */6], (function (param) {
                                            return partial_arg$1(partial_arg, param);
                                          }), Test__Util$AgdaMode.Golden[/* compare */3]);
                                    return Test__Util$AgdaMode.Golden[/* readFile */2](filepath).then(Curry.__1(partial_arg$2));
                                  }));
                    }), Test__Util$AgdaMode.getGoldenFilepathsSync("test/TestInputs"));
      }));

exports.toResponses = toResponses;
/*  Not a pure module */
