// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");

var component = ReasonReact.statelessComponent("Dashboard");

function make(isPending, mountAt, onMountChange, settingsViewOn, onSettingsViewToggle, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                var spinnerClassList = Util$AgdaMode.toClassName(Util$AgdaMode.addClass("pending", isPending, /* :: */Block.simpleVariant("::", [
                            "loading",
                            /* :: */Block.simpleVariant("::", [
                                "loading-spinner-tiny",
                                /* :: */Block.simpleVariant("::", [
                                    "inline-block",
                                    /* [] */0
                                  ])
                              ])
                          ])));
                var settingsViewClassList = Util$AgdaMode.toClassName(Util$AgdaMode.addClass("activated", settingsViewOn, /* :: */Block.simpleVariant("::", [
                            "no-btn",
                            /* [] */0
                          ])));
                var toggleMountingPosition = Util$AgdaMode.toClassName(Util$AgdaMode.addClass("activated", mountAt === "pane", /* :: */Block.simpleVariant("::", [
                            "no-btn",
                            /* [] */0
                          ])));
                return React.createElement("ul", {
                            className: "agda-dashboard"
                          }, React.createElement("li", undefined, React.createElement("span", {
                                    className: spinnerClassList,
                                    id: "spinner"
                                  })), React.createElement("li", undefined, React.createElement("button", {
                                    className: settingsViewClassList,
                                    onClick: (function () {
                                        return Curry._1(onSettingsViewToggle, !settingsViewOn);
                                      })
                                  }, React.createElement("span", {
                                        className: "icon icon-settings"
                                      }))), React.createElement("li", undefined, React.createElement("button", {
                                    className: toggleMountingPosition,
                                    onClick: (function () {
                                        var match = mountAt === "pane";
                                        if (match) {
                                          return Curry._1(onMountChange, "bottom");
                                        } else {
                                          return Curry._1(onMountChange, "pane");
                                        }
                                      })
                                  }, React.createElement("span", {
                                        className: "icon icon-versions"
                                      }))));
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.isPending, jsProps.mountAt, jsProps.onMountChange, jsProps.settingsViewOn, jsProps.onSettingsViewToggle, /* array */[]);
      }));

exports.component = component;
exports.make = make;
exports.jsComponent = jsComponent;
/* component Not a pure module */
