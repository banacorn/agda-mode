// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util/Util.bs.js");
var Parser$AgdaMode = require("../../Parser.bs.js");
var Request$AgdaMode = require("../../Request.bs.js");
var Response$AgdaMode = require("../../Response.bs.js");
var Connection$AgdaMode = require("../../Connection.bs.js");

function Settings__Log$Entry(Props) {
  var entry = Props.entry;
  var match = Hook$AgdaMode.useState(true);
  var setHidden = match[1];
  var hidden = match[0];
  var className = hidden ? "hidden" : "";
  var rawTexts = Rebase.$$Array.mapi((function (text, i) {
          return React.createElement("li", {
                      key: String(i)
                    }, text);
        }), entry.response.rawText);
  var sexpressions = Rebase.$$Array.mapi((function (text, i) {
          return React.createElement("li", {
                      key: String(i)
                    }, Curry._1(Parser$AgdaMode.SExpression.toString, text));
        }), entry.response.sexpression);
  var responses = Rebase.$$Array.mapi((function (text, i) {
          return React.createElement("li", {
                      key: String(i)
                    }, Response$AgdaMode.toString(text));
        }), entry.response.response);
  var hasError = Rebase.$$Array.length(entry.response.error) > 0;
  var errors = Rebase.$$Array.mapi((function (text, i) {
          return React.createElement("li", {
                      key: String(i)
                    }, Parser$AgdaMode.$$Error.toString(text));
        }), entry.response.error);
  return React.createElement("li", {
              className: "agda-settings-log-entry"
            }, React.createElement("h2", {
                  onClick: (function (param) {
                      return Curry._1(setHidden, !hidden);
                    })
                }, Request$AgdaMode.toString(entry.request)), React.createElement("section", {
                  className: className
                }, React.createElement("h3", undefined, "raw text"), React.createElement("ol", undefined, rawTexts), React.createElement("hr", undefined), React.createElement("h3", undefined, "s-expression"), React.createElement("ol", undefined, sexpressions), React.createElement("hr", undefined), React.createElement("h3", undefined, "response"), React.createElement("ol", undefined, responses), hasError ? React.createElement(React.Fragment, undefined, React.createElement("hr", undefined), React.createElement("h3", undefined, "error"), React.createElement("ol", undefined, errors)) : null));
}

var Entry = {
  make: Settings__Log$Entry
};

function Settings__Log(Props) {
  var connection = Props.connection;
  var hidden = Props.hidden;
  var match = Hook$AgdaMode.useState(false);
  var setShowInstruction = match[1];
  var match$1 = Hook$AgdaMode.useState(true);
  var setRefreshOnLoad = match$1[1];
  var refreshOnLoad = match$1[0];
  Rebase.$$Option.forEach((function (conn) {
          conn.resetLogOnLoad = refreshOnLoad;
          
        }), connection);
  var entries = Rebase.$$Array.mapi((function (entry, i) {
          return React.createElement(Settings__Log$Entry, {
                      entry: entry,
                      key: String(i)
                    });
        }), Rebase.$$Option.mapOr((function (conn) {
              return conn.log;
            }), [], connection));
  return React.createElement("section", {
              className: "agda-settings-log" + Util$AgdaMode.React.showWhen(!hidden)
            }, React.createElement("h1", undefined, React.createElement("span", {
                      className: "icon icon-comment-discussion"
                    }), React.createElement("span", undefined, "Log")), React.createElement("hr", undefined), React.createElement("p", undefined, "Keeps track of what Agda said what we've parsed. For reporting parse errors. "), React.createElement("p", undefined, React.createElement("label", {
                      className: "input-label"
                    }, React.createElement("input", {
                          className: "input-toggle",
                          checked: refreshOnLoad,
                          type: "checkbox",
                          onChange: (function (param) {
                              return Curry._1(setRefreshOnLoad, !refreshOnLoad);
                            })
                        }), "Refresh on Load (C-c C-l)")), React.createElement("p", undefined, React.createElement("button", {
                      className: "btn btn-primary icon icon-clippy",
                      onClick: (function (param) {
                          Curry._1(setShowInstruction, true);
                          return Rebase.$$Option.forEach(Connection$AgdaMode.dump, connection);
                        })
                    }, "Dump log")), match[0] ? React.createElement("p", {
                    className: "text-warning"
                  }, "In case of parse error, please copy the log and paste it ", React.createElement("a", {
                        href: "https://github.com/banacorn/agda-mode/issues/new"
                      }, "here")) : null, React.createElement("hr", undefined), React.createElement("ol", undefined, entries));
}

var make = Settings__Log;

exports.Entry = Entry;
exports.make = make;
/* react Not a pure module */
