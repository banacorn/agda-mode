// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Semver = require("semver");
var Child_process = require("child_process");
var Async$AgdaMode = require("./Util/Async.bs.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");

function disconnect(error, self) {
  Rebase.$$Array[/* forEach */8]((function (ev) {
          return Event$AgdaMode.emitError(error, ev);
        }), self[/* queue */2]);
  self[/* queue */2] = /* array */[];
  Event$AgdaMode.removeAllListeners(self[/* errorEmitter */3]);
  self[/* connected */4] = false;
  self[/* process */1].kill("SIGTERM");
  return /* () */0;
}

function autoSearch(path) {
  return Async$AgdaMode.make((function (resolve, reject) {
                var os = Os.type();
                var exit = 0;
                switch (os) {
                  case "Darwin" : 
                  case "Linux" : 
                      exit = 1;
                      break;
                  case "Windows_NT" : 
                      return Curry._1(reject, /* NotSupported */Block.variant("NotSupported", 0, ["Windows_NT"]));
                  default:
                    return Curry._1(reject, /* NotSupported */Block.variant("NotSupported", 0, [os]));
                }
                if (exit === 1) {
                  var hangTimeout = setTimeout((function (param) {
                          return Curry._1(reject, /* ProcessHanging */0);
                        }), 1000);
                  Child_process.exec("which " + path, (function (error, stdout, stderr) {
                          clearTimeout(hangTimeout);
                          if (!(error == null)) {
                            Curry._1(reject, /* NotFound */Block.variant("NotFound", 1, [Rebase.Option[/* getOr */16]("", error.message)]));
                          }
                          var stderr$prime = stderr.toString();
                          if (!Rebase.$$String[/* isEmpty */5](stderr$prime)) {
                            Curry._1(reject, /* NotFound */Block.variant("NotFound", 1, [stderr$prime]));
                          }
                          var stdout$prime = stdout.toString();
                          if (Rebase.$$String[/* isEmpty */5](stdout$prime)) {
                            return Curry._1(reject, /* NotFound */Block.variant("NotFound", 1, [""]));
                          } else {
                            return Curry._1(resolve, Parser$AgdaMode.filepath(stdout$prime));
                          }
                        }));
                  return /* () */0;
                }
                
              }));
}

function validateAndMake(path, args) {
  var parseError = function (error) {
    if (error == null) {
      return undefined;
    } else {
      var message = Rebase.Option[/* getOr */16]("", error.message);
      if ((/No such file or directory/).test(message) || (/command not found/).test(message)) {
        return /* NotFound */Block.variant("NotFound", 1, [error]);
      } else {
        return /* ShellError */Block.variant("ShellError", 2, [error]);
      }
    }
  };
  var parseStdout = function (stdout) {
    var message = stdout.toString();
    var match = message.match((/Agda version (.*)/));
    if (match !== null) {
      var match$1 = Rebase.$$Array[/* get */17](match, 1);
      if (match$1 !== undefined) {
        var match$2 = (/--interaction-json/).test(message);
        return /* Ok */Block.variant("Ok", 0, [/* record */Block.record([
                      "path",
                      "args",
                      "version",
                      "protocol"
                    ], [
                      path,
                      args,
                      Semver.coerce(match$1),
                      match$2 ? /* EmacsAndJSON */1 : /* EmacsOnly */0
                    ])]);
      } else {
        return /* Error */Block.variant("Error", 1, [/* IsNotAgda */Block.variant("IsNotAgda", 4, [message])]);
      }
    } else {
      return /* Error */Block.variant("Error", 1, [/* IsNotAgda */Block.variant("IsNotAgda", 4, [message])]);
    }
  };
  return Async$AgdaMode.make((function (resolve, reject) {
                if (Rebase.$$String[/* isEmpty */5](path)) {
                  Curry._1(reject, /* PathMalformed */Block.variant("PathMalformed", 0, ["the path must not be empty"]));
                }
                var hangTimeout = setTimeout((function (param) {
                        return Curry._1(reject, /* ProcessHanging */0);
                      }), 1000);
                Child_process.exec(path, (function (error, stdout, stderr) {
                        clearTimeout(hangTimeout);
                        var match = parseError(error);
                        if (match !== undefined) {
                          Curry._1(reject, match);
                        }
                        var stderr$prime = stderr.toString();
                        if (!Rebase.$$String[/* isEmpty */5](stderr$prime)) {
                          Curry._1(reject, /* ProcessError */Block.variant("ProcessError", 3, [stderr$prime]));
                        }
                        var match$1 = parseStdout(stdout);
                        if (match$1.tag) {
                          return Curry._1(reject, match$1[0]);
                        } else {
                          return Curry._1(resolve, match$1[0]);
                        }
                      }));
                return /* () */0;
              }));
}

function useJSON(metadata) {
  if (atom.config.get("agda-mode.enableJSONProtocol")) {
    return metadata[/* protocol */3] === /* EmacsAndJSON */1;
  } else {
    return false;
  }
}

function connect(metadata) {
  return Async$AgdaMode.make((function (resolve, reject) {
                var match = useJSON(metadata);
                var args = Rebase.$$Array[/* concat */11](metadata[/* args */1], match ? /* array */["--interaction-json"] : /* array */["--interaction"]);
                var $$process = Child_process.spawn(metadata[/* path */0], args, {
                      shell: true
                    });
                var connection = /* record */Block.record([
                    "metadata",
                    "process",
                    "queue",
                    "errorEmitter",
                    "connected"
                  ], [
                    metadata,
                    $$process,
                    [],
                    Event$AgdaMode.make(/* () */0),
                    true
                  ]);
                $$process.on("error", (function (exn) {
                          disconnect(/* ShellError */Block.variant("ShellError", 0, [exn]), connection);
                          return Curry._1(reject, /* ShellError */Block.variant("ShellError", 0, [exn]));
                        })).on("close", (function (code, signal) {
                        disconnect(/* ClosedByProcess */Block.variant("ClosedByProcess", 1, [
                                code,
                                signal
                              ]), connection);
                        return Curry._1(reject, /* ClosedByProcess */Block.variant("ClosedByProcess", 1, [
                                      code,
                                      signal
                                    ]));
                      }));
                $$process.stdout.once("data", (function (param) {
                        return Curry._1(resolve, connection);
                      }));
                return /* () */0;
              }));
}

function wire(self) {
  var response = function (data) {
    console.log("receiving <<< " + data);
    var match = Rebase.$$Array[/* get */17](self[/* queue */2], 0);
    if (match !== undefined) {
      Event$AgdaMode.emitOk(data, match);
      self[/* queue */2].pop();
      return /* () */0;
    } else {
      return Event$AgdaMode.emitOk(data, self[/* errorEmitter */3]);
    }
  };
  var buffer = /* record */Block.record(["contents"], [""]);
  var onData = function (chunk) {
    var string = chunk.toString();
    var endOfResponse = Rebase.$$String[/* endsWith */4]("Agda2> ", string);
    if (endOfResponse) {
      var withoutSuffix = string.substring(0, Rebase.$$String[/* length */1](string) - 7 | 0);
      var data = buffer[0] + withoutSuffix;
      if (!Rebase.$$String[/* isEmpty */5](data)) {
        response(data);
      }
      buffer[0] = "";
      return /* () */0;
    } else {
      buffer[0] = buffer[0] + string;
      return /* () */0;
    }
  };
  self[/* process */1].stdout.on("data", onData);
  return self;
}

function send(request, self) {
  console.log("sending >>> " + request);
  var reqPromise = Event$AgdaMode.make(/* () */0);
  self[/* queue */2].push(reqPromise);
  var promise = Event$AgdaMode.once(reqPromise);
  self[/* process */1].stdin.write(Buffer.from(request + "\n"));
  return promise;
}

exports.disconnect = disconnect;
exports.autoSearch = autoSearch;
exports.validateAndMake = validateAndMake;
exports.useJSON = useJSON;
exports.connect = connect;
exports.wire = wire;
exports.send = send;
/* os Not a pure module */
