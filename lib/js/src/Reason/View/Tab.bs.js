// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function createItemDescriptor(editor) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  var uri = "agda-mode://" + editor.getPath();
  var title = "[Agda Mode] " + editor.getTitle();
  return {
          element: element,
          getURI: (function (param) {
              return uri;
            }),
          getTitle: (function (param) {
              return title;
            }),
          getDefaultLocation: (function (param) {
              return "right";
            })
        };
}

var component = ReasonReact.reducerComponentWithRetainedProps("Tab");

function trigger(callback) {
  if (callback !== undefined) {
    return Curry._1(callback, /* () */0);
  } else {
    return /* () */0;
  }
}

function triggerArg(callback, arg) {
  if (callback !== undefined) {
    return Curry._1(callback, arg);
  } else {
    return /* () */0;
  }
}

function make(editor, $staropt$star, $staropt$star$1, onOpen, onKill, onClose, onDidChangeActive, _children) {
  var active = $staropt$star !== undefined ? $staropt$star : false;
  var open_ = $staropt$star$1 !== undefined ? $staropt$star$1 : false;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            (function (param) {
                var newSelf = param[/* newSelf */1];
                var oldSelf = param[/* oldSelf */0];
                var match = oldSelf[/* retainedProps */2][/* open_ */0];
                var match$1 = newSelf[/* retainedProps */2][/* open_ */0];
                if (match) {
                  if (match$1) {
                    
                  } else {
                    Curry._1(newSelf[/* send */3], /* Kill */1);
                  }
                } else if (match$1) {
                  Curry._1(newSelf[/* send */3], /* Open */0);
                }
                var match$2 = oldSelf[/* retainedProps */2][/* active */1];
                var match$3 = newSelf[/* retainedProps */2][/* active */1];
                if (match$2 || !match$3) {
                  return /* () */0;
                } else {
                  return Curry._1(newSelf[/* send */3], /* Activate */2);
                }
              }),
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                return null;
              }),
            (function (param) {
                return /* record */Block.record([
                          "item",
                          "closedDeliberately"
                        ], [
                          undefined,
                          false
                        ]);
              }),
            Block.record([
                "open_",
                "active"
              ], [
                open_,
                active
              ]),
            (function (action, state) {
                var match = state[/* item */0];
                if (typeof action === "number") {
                  switch (action) {
                    case 0 : 
                        if (match !== undefined) {
                          return /* NoUpdate */0;
                        } else {
                          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                                        var subscriptions = new Atom.CompositeDisposable();
                                        var itemDescriptor = createItemDescriptor(editor);
                                        atom.workspace.open(itemDescriptor).then((function (newItem) {
                                                var pane = atom.workspace.paneForItem(newItem);
                                                Curry._1(self[/* send */3], /* UpdatePaneItem */Block.simpleVariant("UpdatePaneItem", [newItem]));
                                                triggerArg(onOpen, newItem);
                                                subscriptions.add(pane.onWillDestroyItem((function ($$event) {
                                                            var destroyedTitle = $$event.item.getTitle();
                                                            var getTitle = itemDescriptor.getTitle;
                                                            if (destroyedTitle === Curry._1(getTitle, /* () */0)) {
                                                              if (state[/* closedDeliberately */1]) {
                                                                trigger(onKill);
                                                              } else {
                                                                trigger(onClose);
                                                              }
                                                              subscriptions.dispose();
                                                              return /* () */0;
                                                            } else {
                                                              return 0;
                                                            }
                                                          })));
                                                subscriptions.add(pane.onDidChangeActiveItem((function (item) {
                                                            var activatedTitle = item.getTitle();
                                                            var getTitle = itemDescriptor.getTitle;
                                                            if (activatedTitle === Curry._1(getTitle, /* () */0)) {
                                                              return triggerArg(onDidChangeActive, true);
                                                            } else {
                                                              return triggerArg(onDidChangeActive, false);
                                                            }
                                                          })));
                                                return Promise.resolve(atom.workspace.getActivePane());
                                              }));
                                        return /* () */0;
                                      })]);
                        }
                    case 1 : 
                        if (match !== undefined) {
                          var oldItem = Js_primitive.valFromOption(match);
                          return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                    /* record */Block.record([
                                        "item",
                                        "closedDeliberately"
                                      ], [
                                        undefined,
                                        true
                                      ]),
                                    (function (_self) {
                                        ((function (eta) {
                                                return eta.destroyItem(oldItem, undefined);
                                              })(atom.workspace.paneForItem(oldItem)));
                                        return /* () */0;
                                      })
                                  ]);
                        } else {
                          return /* NoUpdate */0;
                        }
                    case 2 : 
                        if (match !== undefined) {
                          var oldItem$1 = Js_primitive.valFromOption(match);
                          return /* SideEffects */Block.variant("SideEffects", 1, [(function (_self) {
                                        ((function (eta) {
                                                var param = undefined;
                                                var param$1 = eta;
                                                param$1.activateItem(oldItem$1, param !== undefined ? Js_primitive.valFromOption(param) : undefined);
                                                return /* () */0;
                                              })(atom.workspace.paneForItem(oldItem$1)));
                                        return /* () */0;
                                      })]);
                        } else {
                          return /* NoUpdate */0;
                        }
                    
                  }
                } else if (match !== undefined) {
                  return /* NoUpdate */0;
                } else {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "item",
                                "closedDeliberately"
                              ], [
                                Js_primitive.some(action[0]),
                                state[/* closedDeliberately */1]
                              ])]);
                }
              }),
            component[/* jsElementWrapped */13]
          ]);
}

exports.createItemDescriptor = createItemDescriptor;
exports.component = component;
exports.trigger = trigger;
exports.triggerArg = triggerArg;
exports.make = make;
/* component Not a pure module */
