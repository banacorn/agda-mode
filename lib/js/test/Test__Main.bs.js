// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var N$AgdaMode = require("../src/Node/N.bs.js");
var GitBranch = require("git-branch");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");

var CannotReadPackageJson = Caml_exceptions.create("Test__Main-AgdaMode.CannotReadPackageJson");

function on(br, test) {
  return GitBranch().then((function (name) {
                if (name === br) {
                  return Promise.resolve(Curry._1(test, /* () */0));
                } else {
                  return Promise.resolve(/* () */0);
                }
              }));
}

var readFile = Util.promisify((function (prim, prim$1) {
        Fs.readFile(prim, prim$1);
        return /* () */0;
      }));

function readPackageJSONMain(param) {
  return readFile("./package.json").then((function (buffer) {
                return Rebase.$$Option[/* mapOr */18]((function (prim) {
                              return Promise.resolve(prim);
                            }), Promise.reject(CannotReadPackageJson), Rebase.$$Option[/* flatMap */5](Js_json.decodeString, Rebase.$$Option[/* flatMap */5]((function (obj) {
                                      return Js_dict.get(obj, "main");
                                    }), Js_json.decodeObject(JSON.parse(buffer.toString())))));
              }));
}

Mocha$BsMocha.describe("Development")(undefined, undefined, undefined, (function (param) {
        return Promise$BsMocha.it("Entry points to AgdaMode.bs")(undefined, undefined, undefined, (function (param) {
                      return readPackageJSONMain(/* () */0).then((function (path) {
                                    Assert$BsMocha.equal(undefined, path, "./lib/js/src/AgdaMode.bs");
                                    return Promise.resolve(/* () */0);
                                  }));
                    }));
      }));

on("test", (function (param) {
        return Mocha$BsMocha.describe("Development")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("Entry points to AgdaMode.bs")(undefined, undefined, undefined, (function (param) {
                                    return readPackageJSONMain(/* () */0).then((function (path) {
                                                  Assert$BsMocha.equal(undefined, path, "./lib/js/src/AgdaMode.bs");
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

on("master", (function (param) {
        return Mocha$BsMocha.describe("Release")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("Production bundle exists")(undefined, undefined, undefined, (function (param) {
                              return new Promise((function (resolve, reject) {
                                            Fs.access("./lib/js/bundled.js", (function (err) {
                                                    if (err !== undefined) {
                                                      return reject([
                                                                  N$AgdaMode.Exception,
                                                                  Caml_option.valFromOption(err)
                                                                ]);
                                                    } else {
                                                      return resolve(0);
                                                    }
                                                  }));
                                            return /* () */0;
                                          }));
                            }));
                      return Promise$BsMocha.it("Entry points to the production bundle")(undefined, undefined, undefined, (function (param) {
                                    return readPackageJSONMain(/* () */0).then((function (path) {
                                                  Assert$BsMocha.equal(undefined, path, "./lib/js/bunbled.js");
                                                  return Promise.resolve(/* () */0);
                                                }));
                                  }));
                    }));
      }));

exports.CannotReadPackageJson = CannotReadPackageJson;
exports.on = on;
exports.readFile = readFile;
exports.readPackageJSONMain = readPackageJSONMain;
/* readFile Not a pure module */
