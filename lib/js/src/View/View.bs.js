// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Channel$AgdaMode = require("../Util/Channel.bs.js");

function make(events, channels) {
  var activate = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels.activatePanel);
  };
  var deactivate = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels.deactivatePanel);
  };
  var toggleDocking = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels.toggleDocking);
  };
  var display = function (text, style, body) {
    return Channel$AgdaMode.send(/* tuple */[
                {
                  text: text,
                  style: style
                },
                body
              ], channels.display);
  };
  var inquire = function (text, placeholder, value) {
    return $$Promise.flatMap(Channel$AgdaMode.send(/* () */0, channels.activatePanel), (function (param) {
                  return Channel$AgdaMode.send(/* tuple */[
                              {
                                text: text,
                                style: /* PlainText */0
                              },
                              placeholder,
                              value
                            ], channels.inquire);
                }));
  };
  var updateIsPending = function (isPending) {
    return Channel$AgdaMode.send(isPending, channels.updateIsPending);
  };
  var onMouseEvent = events.onMouseEvent;
  var activateInputMethod = function (activate) {
    return Channel$AgdaMode.send(activate, channels.activateInputMethod);
  };
  var interceptAndInsertKey = function (symbol) {
    return Channel$AgdaMode.send(symbol, channels.interceptAndInsertKey);
  };
  var onInputMethodChange = events.onInputMethodChange;
  var navigateSettings = function (where) {
    return Channel$AgdaMode.send(where, channels.navigateSettings);
  };
  var updateConnection = function (connection, error) {
    return Channel$AgdaMode.send(/* tuple */[
                connection,
                error
              ], channels.updateConnection);
  };
  var inquireConnection = function (param) {
    return Channel$AgdaMode.send(/* () */0, channels.inquireConnection);
  };
  var onDestroy = Event$AgdaMode.make(/* () */0);
  var destroy = function (param) {
    return $$Promise.tap($$Promise.flatMap($$Promise.flatMap(Channel$AgdaMode.send(/* () */0, channels.deactivatePanel), (function (param) {
                          return Channel$AgdaMode.send(false, channels.activateInputMethod);
                        })), (function (param) {
                      return Channel$AgdaMode.send(/* () */0, channels.destroy);
                    })), (function (param) {
                  return Curry._1(onDestroy.emit, /* () */0);
                }));
  };
  return {
          activate: activate,
          deactivate: deactivate,
          toggleDocking: toggleDocking,
          display: display,
          inquire: inquire,
          updateIsPending: updateIsPending,
          destroy: destroy,
          onDestroy: onDestroy,
          onMouseEvent: onMouseEvent,
          activateInputMethod: activateInputMethod,
          interceptAndInsertKey: interceptAndInsertKey,
          onInputMethodChange: onInputMethodChange,
          navigateSettings: navigateSettings,
          updateConnection: updateConnection,
          inquireConnection: inquireConnection
        };
}

exports.make = make;
/* Promise Not a pure module */
