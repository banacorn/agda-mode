// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Emacs__Parser$AgdaMode = require("./Emacs__Parser.bs.js");
var Emacs__Component$AgdaMode = require("./Emacs__Component.bs.js");

function parse(raw) {
  var lines = Emacs__Parser$AgdaMode.unindent(raw.split("\n"));
  return Rebase.$$Array[/* filterMap */23]((function (x) {
                return x;
              }), Rebase.$$Array[/* map */0](Emacs__Component$AgdaMode.Output[/* parse */2], lines));
}

var component = ReasonReact.statelessComponent("EmacsContext");

function make(body, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                var parsed = parse(body);
                return React.createElement(React.Fragment, undefined, ReactDOMRe.createElementVariadic("ul", undefined, Rebase.$$Array[/* map */0]((function (value) {
                                      return ReasonReact.element(undefined, undefined, Emacs__Component$AgdaMode.Output[/* make */4](value, /* array */[]));
                                    }), parsed)));
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.parse = parse;
exports.component = component;
exports.make = make;
/* component Not a pure module */
