// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Goal$AgdaMode = require("./Goal.bs.js");
var Util$AgdaMode = require("./Util/Util.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Command$AgdaMode = require("./Command.bs.js");

function toAgdaReadableString(version, filepath, request) {
  var path = atom.config.get("agda-mode.libraryPath");
  path.unshift(".");
  var libraryPath = Caml_splice_call.spliceObjApply(", ", "concat", [Belt_Array.map(path, (function (x) {
                return "\"" + (Parser$AgdaMode.filepath(x) + "\"");
              }))]);
  var match = atom.config.get("agda-mode.highlightingMethod");
  var highlightingMethod = match === "Direct" ? "Direct" : "Indirect";
  var commonPart = function (param) {
    if (param) {
      return "IOTCM \"" + filepath + "\" NonInteractive " + highlightingMethod + " ";
    } else {
      return "IOTCM \"" + filepath + "\" None " + highlightingMethod + " ";
    }
  };
  var buildRange = function (goal) {
    if (Util$AgdaMode.Version.gte(version, "2.5.1")) {
      return Goal$AgdaMode.buildHaskellRange(false, filepath, goal);
    } else {
      return Goal$AgdaMode.buildHaskellRange(true, filepath, goal);
    }
  };
  if (typeof request === "number") {
    switch (request) {
      case /* Load */0 :
          if (Util$AgdaMode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + filepath + "\" [] )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + filepath + "\" [" + libraryPath + "] )");
          }
      case /* Abort */1 :
          return commonPart(/* NonInteractive */1) + "( Cmd_abort )";
      case /* Compile */2 :
          var backend = atom.config.get("agda-mode.backend");
          if (Util$AgdaMode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + backend + " \"" + filepath + "\" [] )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + backend + " \"" + filepath + "\" [" + libraryPath + "] )");
          }
      case /* ToggleDisplayOfImplicitArguments */3 :
          return commonPart(/* NonInteractive */1) + "( ToggleImplicitArgs )";
      case /* SolveConstraints */4 :
          return commonPart(/* NonInteractive */1) + "( Cmd_solveAll Instantiated )";
      case /* ShowConstraints */5 :
          return commonPart(/* NonInteractive */1) + "( Cmd_constraints )";
      case /* ShowGoals */6 :
          return commonPart(/* NonInteractive */1) + "( Cmd_metas )";
      
    }
  } else {
    switch (request.TAG | 0) {
      case /* WhyInScope */0 :
          var index = request._1.index;
          var content = Parser$AgdaMode.userInput(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + index + " noRange \"" + content + "\" )");
      case /* WhyInScopeGlobal */1 :
          var content$1 = Parser$AgdaMode.userInput(request._0);
          return commonPart(/* None' */0) + ("( Cmd_why_in_scope_toplevel \"" + content$1 + "\" )");
      case /* SearchAbout */2 :
          var normalization$prime = Command$AgdaMode.Normalization.toString(request._0);
          var content$2 = Parser$AgdaMode.userInput(request._1);
          return commonPart(/* None' */0) + ("( Cmd_search_about_toplevel " + normalization$prime + "  \"" + content$2 + "\" )");
      case /* InferType */3 :
          var index$1 = request._2.index;
          var normalization$prime$1 = Command$AgdaMode.Normalization.toString(request._0);
          var content$3 = Parser$AgdaMode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_infer " + normalization$prime$1 + " " + index$1 + " noRange \"" + content$3 + "\" )");
      case /* InferTypeGlobal */4 :
          var normalization$prime$2 = Command$AgdaMode.Normalization.toString(request._0);
          var content$4 = Parser$AgdaMode.userInput(request._1);
          return commonPart(/* None' */0) + ("( Cmd_infer_toplevel " + normalization$prime$2 + " \"" + content$4 + "\" )");
      case /* ModuleContents */5 :
          var index$2 = request._2.index;
          var normalization$prime$3 = Command$AgdaMode.Normalization.toString(request._0);
          var content$5 = Parser$AgdaMode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_show_module_contents " + normalization$prime$3 + " " + index$2 + " noRange \"" + content$5 + "\" )");
      case /* ModuleContentsGlobal */6 :
          var normalization$prime$4 = Command$AgdaMode.Normalization.toString(request._0);
          var content$6 = Parser$AgdaMode.userInput(request._1);
          return commonPart(/* None' */0) + ("( Cmd_show_module_contents_toplevel " + normalization$prime$4 + " \"" + content$6 + "\" )");
      case /* ComputeNormalForm */7 :
          var computeMode = request._0;
          var index$3 = request._2.index;
          var computeMode$prime = Command$AgdaMode.ComputeMode.toString(computeMode);
          var ignoreAbstract = Command$AgdaMode.ComputeMode.ignoreAbstract(computeMode);
          var content$7 = Parser$AgdaMode.userInput(request._1);
          if (Util$AgdaMode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + computeMode$prime + " " + index$3 + " noRange \"" + content$7 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + ignoreAbstract + " " + index$3 + " noRange \"" + content$7 + "\" )");
          }
      case /* ComputeNormalFormGlobal */8 :
          var computeMode$1 = request._0;
          var computeMode$prime$1 = Command$AgdaMode.ComputeMode.toString(computeMode$1);
          var ignoreAbstract$1 = Command$AgdaMode.ComputeMode.ignoreAbstract(computeMode$1);
          var content$8 = Parser$AgdaMode.userInput(request._1);
          if (Util$AgdaMode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + computeMode$prime$1 + " \"" + content$8 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + ignoreAbstract$1 + " \"" + content$8 + "\" )");
          }
      case /* Give */9 :
          var goal = request._0;
          var index$4 = goal.index;
          var content$9 = Goal$AgdaMode.getContent(goal);
          var range = buildRange(goal);
          if (Util$AgdaMode.Version.gte(version, "2.5.3")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give WithoutForce " + index$4 + " " + range + " \"" + content$9 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give " + index$4 + " " + range + " \"" + content$9 + "\" )");
          }
      case /* Refine */10 :
          var goal$1 = request._0;
          var index$5 = goal$1.index;
          var content$10 = Goal$AgdaMode.getContent(goal$1);
          var range$1 = buildRange(goal$1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_refine_or_intro False " + index$5 + " " + range$1 + " \"" + content$10 + "\" )");
      case /* Auto */11 :
          var goal$2 = request._0;
          var index$6 = goal$2.index;
          var content$11 = Goal$AgdaMode.getContent(goal$2);
          var range$2 = buildRange(goal$2);
          if (Util$AgdaMode.Version.gte(version, "2.6.0.1")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_autoOne " + index$6 + " " + range$2 + " \"" + content$11 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_auto " + index$6 + " " + range$2 + " \"" + content$11 + "\" )");
          }
      case /* Case */12 :
          var goal$3 = request._0;
          var index$7 = goal$3.index;
          var content$12 = Goal$AgdaMode.getContent(goal$3);
          var range$3 = buildRange(goal$3);
          return commonPart(/* NonInteractive */1) + ("( Cmd_make_case " + index$7 + " " + range$3 + " \"" + content$12 + "\" )");
      case /* GoalType */13 :
          var index$8 = request._1.index;
          var normalization$prime$5 = Command$AgdaMode.Normalization.toString(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type " + normalization$prime$5 + " " + index$8 + " noRange \"\" )");
      case /* Context */14 :
          var index$9 = request._1.index;
          var normalization$prime$6 = Command$AgdaMode.Normalization.toString(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_context " + normalization$prime$6 + " " + index$9 + " noRange \"\" )");
      case /* GoalTypeAndContext */15 :
          var index$10 = request._1.index;
          var normalization$prime$7 = Command$AgdaMode.Normalization.toString(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context " + normalization$prime$7 + " " + index$10 + " noRange \"\" )");
      case /* GoalTypeAndInferredType */16 :
          var goal$4 = request._1;
          var index$11 = goal$4.index;
          var content$13 = Goal$AgdaMode.getContent(goal$4);
          var normalization$prime$8 = Command$AgdaMode.Normalization.toString(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context_infer " + normalization$prime$8 + " " + index$11 + " noRange \"" + content$13 + "\" )");
      case /* GotoDefinition */17 :
          var index$12 = request._1.index;
          var content$14 = Parser$AgdaMode.userInput(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + index$12 + " noRange \"" + content$14 + "\" )");
      case /* GotoDefinitionGlobal */18 :
          var content$15 = Parser$AgdaMode.userInput(request._0);
          return commonPart(/* None' */0) + ("( Cmd_why_in_scope_toplevel \"" + content$15 + "\" )");
      
    }
  }
}

function isLoad(param) {
  if (typeof param === "number") {
    return param === 0;
  } else {
    return false;
  }
}

function toString(string) {
  if (typeof string === "number") {
    switch (string) {
      case /* Load */0 :
          return "Load";
      case /* Abort */1 :
          return "Abort";
      case /* Compile */2 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */3 :
          return "ToggleDisplayOfImplicitArguments";
      case /* SolveConstraints */4 :
          return "SolveConstraints";
      case /* ShowConstraints */5 :
          return "ShowConstraints";
      case /* ShowGoals */6 :
          return "ShowGoals";
      
    }
  } else {
    switch (string.TAG | 0) {
      case /* WhyInScope */0 :
          return "WhyInScope \"" + (string._0 + ("\" (Goal " + (String(string._1.index) + ")")));
      case /* WhyInScopeGlobal */1 :
          return "WhyInScope \"" + (string._0 + "\" (Global)");
      case /* SearchAbout */2 :
          return "SearchAbout \"" + (string._1 + ("\" (" + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* InferType */3 :
          return "InferType \"" + (string._1 + ("\" (Goal " + (String(string._2.index) + (", " + (Command$AgdaMode.Normalization.toString(string._0) + ")")))));
      case /* InferTypeGlobal */4 :
          return "InferType \"" + (string._1 + ("\" (Global, " + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* ModuleContents */5 :
          return "ModuleContents \"" + (string._1 + ("\" (Goal " + (String(string._2.index) + (", " + (Command$AgdaMode.Normalization.toString(string._0) + ")")))));
      case /* ModuleContentsGlobal */6 :
          return "ModuleContents \"" + (string._1 + ("\" (Global, " + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* ComputeNormalForm */7 :
          return "ComputeNormalForm \"" + (string._1 + ("\" (Goal " + (String(string._2.index) + (", " + (Command$AgdaMode.ComputeMode.toString(string._0) + ")")))));
      case /* ComputeNormalFormGlobal */8 :
          return "ComputeNormalForm \"" + (string._1 + ("\" (Global, " + (Command$AgdaMode.ComputeMode.toString(string._0) + ")")));
      case /* Give */9 :
          return "Give (Goal " + (String(string._0.index) + ")");
      case /* Refine */10 :
          return "Refine (Goal " + (String(string._0.index) + ")");
      case /* Auto */11 :
          return "Auto (Goal " + (String(string._0.index) + ")");
      case /* Case */12 :
          return "Case (Goal " + (String(string._0.index) + ")");
      case /* GoalType */13 :
          return "GoalType (Goal " + (String(string._1.index) + (", " + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* Context */14 :
          return "Context (Goal " + (String(string._1.index) + (", " + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* GoalTypeAndContext */15 :
          return "GoalTypeAndContext (Goal " + (String(string._1.index) + (", " + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* GoalTypeAndInferredType */16 :
          return "GoalTypeAndInferredType (Goal " + (String(string._1.index) + (", " + (Command$AgdaMode.Normalization.toString(string._0) + ")")));
      case /* GotoDefinition */17 :
          return "GotoDefinition \"" + (string._0 + ("\" (Goal " + (String(string._1.index) + ")")));
      case /* GotoDefinitionGlobal */18 :
          return "GotoDefinition \"" + (string._0 + "\" (Global)");
      
    }
  }
}

exports.toAgdaReadableString = toAgdaReadableString;
exports.isLoad = isLoad;
exports.toString = toString;
/* Goal-AgdaMode Not a pure module */
