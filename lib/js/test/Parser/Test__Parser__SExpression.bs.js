// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Diff = require("diff");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Parser$AgdaMode = require("../../src/Parser.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Connection$AgdaMode = require("../../src/Connection.bs.js");
var Test__Util$AgdaMode = require("../Test__Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function parse(input) {
  var output = /* record */Caml_chrome_debugger.record(["contents"], [""]);
  var parser = Parser$AgdaMode.SExpression[/* makeIncr */5]((function (param) {
          if (param) {
            var match = param[0];
            if (match.tag) {
              return Assert$BsMocha.fail("Parsing failed");
            } else {
              output[0] = output[0] + (Curry._1(Parser$AgdaMode.SExpression[/* toString */0], match[0]) + "\n");
              return /* () */0;
            }
          } else {
            return /* () */0;
          }
        }));
  Connection$AgdaMode.parseAgdaOutput(parser, input);
  return output[0];
}

function parseAndCompare(param) {
  var actual = parse(param[1]);
  Rebase.$$Array[/* forEach */8]((function (diff) {
          if (diff.added) {
            Assert$BsMocha.fail("Unexpected string added: " + diff.value);
          }
          if (diff.removed) {
            return Assert$BsMocha.fail("Unexpected string missing: ");
          } else {
            return 0;
          }
        }), Rebase.$$Array[/* filter */10]((function (diff) {
              if (diff.added) {
                return true;
              } else {
                return diff.removed;
              }
            }), Diff.diffLines(param[2], actual)));
  return Promise.resolve(/* () */0);
}

Mocha$BsMocha.describe("when parsing S-expressions")(undefined, undefined, undefined, (function (param) {
        return Rebase.$$Array[/* forEach */8]((function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    return Test__Util$AgdaMode.readGoldenFile(filepath).then(parseAndCompare);
                                  }));
                    }), Test__Util$AgdaMode.getGoldenFilepathsSync("test/Parser/SExpression"));
      }));

exports.parse = parse;
exports.parseAndCompare = parseAndCompare;
/*  Not a pure module */
