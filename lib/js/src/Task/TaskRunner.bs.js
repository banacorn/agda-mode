// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Log$AgdaMode = require("../Log.bs.js");
var Request$AgdaMode = require("../Request.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Task__Error$AgdaMode = require("./Task__Error.bs.js");
var Task__Command$AgdaMode = require("./Task__Command.bs.js");
var Task__Response$AgdaMode = require("./Task__Response.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Instance__Connections$AgdaMode = require("../Instance/Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");

function handleError(x) {
  return $$Promise.map(x, (function (param) {
                if (param.tag) {
                  return Task__Error$AgdaMode.handle(param[0]);
                } else {
                  return param[0];
                }
              }));
}

function sendRequest(instance, request) {
  var match = $$Promise.pending(/* () */0);
  var resolve = match[1];
  $$Promise.getOk($$Promise.tapError(Instance__Connections$AgdaMode.get(instance), (function (_error) {
              return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Cancelled */0]));
            })), (function (connection) {
          var packedRequest_000 = /* version */connection[/* metadata */0][/* version */2];
          var packedRequest_001 = /* filepath */Instance__TextEditors$AgdaMode.getPath(instance);
          var packedRequest = /* record */Caml_chrome_debugger.record([
              "version",
              "filepath",
              "request"
            ], [
              packedRequest_000,
              packedRequest_001,
              request
            ]);
          if (Request$AgdaMode.isLoad(packedRequest) && connection[/* resetLogOnLoad */3]) {
            Connection$AgdaMode.resetLog(connection);
          }
          Log$AgdaMode.createEntry(request, connection[/* log */5]);
          var inputForAgda = Request$AgdaMode.toAgdaReadableString(packedRequest);
          var responseTasks = /* record */Caml_chrome_debugger.record(["contents"], [0]);
          var parseErrors = /* record */Caml_chrome_debugger.record(["contents"], [0]);
          var onResponse = function (param) {
            if (param.tag) {
              return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* ConnectionError */Caml_chrome_debugger.variant("ConnectionError", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [param[0]])])]));
            } else {
              var match = param[0];
              if (match) {
                var match$1 = match[0];
                if (match$1.tag) {
                  parseErrors[0] = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      match$1[0],
                      parseErrors[0]
                    ]);
                  return /* () */0;
                } else {
                  var tasks = Task__Response$AgdaMode.handle(match$1[0]);
                  responseTasks[0] = Rebase.List.concat(tasks, responseTasks[0]);
                  return /* () */0;
                }
              } else if (Rebase.List.isEmpty(parseErrors[0])) {
                return Curry._1(resolve, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [responseTasks[0]]));
              } else {
                return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [/* ParseError */Caml_chrome_debugger.variant("ParseError", 0, [Rebase.$$Array.fromList(parseErrors[0])])]));
              }
            }
          };
          Curry._1(Connection$AgdaMode.send(inputForAgda, connection)[/* on */3], onResponse);
          return /* () */0;
        }));
  return match[0];
}

function execute(tasks, instance) {
  var filterDispatchCommand = function (tasks) {
    var otherTasks = /* array */[];
    var commands = /* array */[];
    var go = function (_param) {
      while(true) {
        var param = _param;
        if (param) {
          var task = param[0];
          if (typeof task === "number") {
            otherTasks.push(task);
            _param = param[1];
            continue ;
          } else if (task.tag === /* DispatchCommand */6) {
            commands.push(task[0]);
            _param = param[1];
            continue ;
          } else {
            otherTasks.push(task);
            _param = param[1];
            continue ;
          }
        } else {
          return /* () */0;
        }
      };
    };
    go(tasks);
    return /* tuple */[
            otherTasks,
            commands
          ];
  };
  var executeTasks = function (tasks) {
    var match = filterDispatchCommand(tasks);
    var commands = match[1];
    return $$Promise.map(execute(match[0], instance), (function (newCommands) {
                  return Rebase.$$Array.concat(newCommands, commands);
                }));
  };
  var executeTask = function (task) {
    if (typeof task === "number") {
      switch (task) {
        case /* Disconnect */0 :
            return $$Promise.map(Instance__Connections$AgdaMode.disconnect(instance), (function (param) {
                          return /* array */[];
                        }));
        case /* Activate */1 :
            return $$Promise.map(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                          return /* array */[];
                        }));
        case /* Deactivate */2 :
            return $$Promise.map(Curry._1(instance[/* view */2][/* deactivate */1], /* () */0), (function (param) {
                          return /* array */[];
                        }));
        
      }
    } else {
      switch (task.tag | 0) {
        case /* WithInstance */0 :
            return $$Promise.flatMap(handleError(Curry._1(task[0], instance)), executeTasks);
        case /* WithConnection */1 :
            return $$Promise.flatMap(handleError($$Promise.flatMapOk($$Promise.mapError(Instance__Connections$AgdaMode.get(instance), (function (param) {
                                      return /* Cancelled */0;
                                    })), task[0])), executeTasks);
        case /* Display */2 :
            return $$Promise.map(Curry._3(instance[/* view */2][/* display */3], task[0], task[1], task[2]), (function (param) {
                          return /* array */[];
                        }));
        case /* Inquire */3 :
            return $$Promise.flatMap(handleError($$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], task[0], task[1], task[2]), (function (param) {
                                      return /* Cancelled */0;
                                    })), task[3])), executeTasks);
        case /* Editor */4 :
            return $$Promise.flatMap(handleError($$Promise.mapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(instance[/* editors */1][/* source */1].save())), (function (param) {
                                      return /* Cancelled */0;
                                    })), (function (param) {
                                  return /* [] */0;
                                }))), executeTasks);
        case /* Goals */5 :
            var match = task[0];
            if (typeof match === "number") {
              if (match === /* JumpToTheNext */0) {
                Rebase.$$Option.forEach((function (position) {
                        instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                        return /* () */0;
                      }), Instance__Goals$AgdaMode.getNextGoalPosition(instance));
                return $$Promise.resolved(/* array */[]);
              } else {
                Rebase.$$Option.forEach((function (position) {
                        instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                        return /* () */0;
                      }), Instance__Goals$AgdaMode.getPreviousGoalPosition(instance));
                return $$Promise.resolved(/* array */[]);
              }
            } else if (match.tag) {
              var handler = match[1];
              return $$Promise.flatMap(handleError($$Promise.map($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), match[0]), (function (others) {
                                    if (others.tag) {
                                      var match = others[0];
                                      if (typeof match === "number" && match >= 2) {
                                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [Curry._1(handler, /* () */0)]);
                                      } else {
                                        return others;
                                      }
                                    } else {
                                      return others;
                                    }
                                  }))), executeTasks);
            } else {
              return $$Promise.flatMap(handleError($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), match[0])), executeTasks);
            }
        case /* DispatchCommand */6 :
            return $$Promise.resolved(/* array */[task[0]]);
        case /* SendRequest */7 :
            var request = task[0];
            return Instance__TextEditors$AgdaMode.restoreCursorPosition((function (param) {
                          return $$Promise.flatMap(handleError(sendRequest(instance, request)), executeTasks);
                        }), instance);
        
      }
    }
  };
  var runEachTask = function (param) {
    if (param) {
      var tasks = param[1];
      return $$Promise.flatMap(executeTask(param[0]), (function (xs) {
                    return $$Promise.map(runEachTask(tasks), (function (xss) {
                                  return Rebase.$$Array.concat(xs, xss);
                                }));
                  }));
    } else {
      return $$Promise.resolved(/* array */[]);
    }
  };
  return runEachTask(Rebase.List.fromArray(tasks));
}

function dispatchCommand(command, instance) {
  var dispatchCommands = function (param) {
    if (param) {
      var xs = param[1];
      return $$Promise.flatMap(dispatchCommand(param[0], instance), (function (param) {
                    return dispatchCommands(xs);
                  }));
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  var before = function (param) {
    Instance__TextEditors$AgdaMode.startCheckpoint(command, instance);
    return Curry._1(instance[/* view */2][/* updateIsPending */5], true);
  };
  var after = function (param) {
    Instance__TextEditors$AgdaMode.endCheckpoint(instance);
    return Curry._1(instance[/* view */2][/* updateIsPending */5], false);
  };
  var tasks = Rebase.$$Array.fromList(Task__Command$AgdaMode.handle(command));
  return $$Promise.flatMap($$Promise.flatMap($$Promise.map($$Promise.tap($$Promise.flatMap(before(/* () */0), (function (param) {
                                return execute(tasks, instance);
                              })), (function (param) {
                            return Curry._1(instance[/* onDispatch */8][/* emit */1], /* () */0);
                          })), Rebase.List.fromArray), dispatchCommands), after);
}

exports.handleError = handleError;
exports.sendRequest = sendRequest;
exports.execute = execute;
exports.dispatchCommand = dispatchCommand;
/* Promise Not a pure module */
