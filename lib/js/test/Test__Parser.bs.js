// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var NodeDir = require("node-dir");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Instance$AgdaMode = require("../src/Instance.bs.js");
var Connection$AgdaMode = require("../src/Connection.bs.js");
var Instance__Handler$AgdaMode = require("../src/Instance/Instance__Handler.bs.js");
var Instance__Connections$AgdaMode = require("../src/Instance/Instance__Connections.bs.js");

var base = Path.join(__dirname, "../../../");

function file(path) {
  return Path.join(base, path);
}

function openFile(path) {
  return atom.workspace.open(Path.join(base, path));
}

var DispatchFailure = Caml_exceptions.create("Test__Parser-AgdaMode.DispatchFailure");

function dispatch(editor, $$event) {
  var element = atom.views.getView(editor);
  var result = atom.commands.dispatch(element, $$event);
  if (result !== undefined) {
    return Promise.resolve(/* () */0);
  } else {
    return Promise.reject([
                DispatchFailure,
                $$event
              ]);
  }
}

function getActivePackageNames(param) {
  return Rebase.$$Array[/* map */0]((function (o) {
                return o.name;
              }), atom.packages.getActivePackages());
}

Mocha$BsMocha.describe("when loading files")(undefined, undefined, undefined, (function (param) {
        return Mocha$BsMocha.describe("when parsing responses from Agda")(undefined, undefined, undefined, (function (param) {
                      var loadAndParse = function (path) {
                        return atom.workspace.open(Path.join(base, path)).then((function (editor) {
                                      var instance = Instance$AgdaMode.make(editor);
                                      return Async$AgdaMode.thenOk((function (param) {
                                                      return Async$AgdaMode.mapError((function (param) {
                                                                      Assert$BsMocha.fail(editor.getPath());
                                                                      return /* () */0;
                                                                    }))(Async$AgdaMode.thenOk((function (param) {
                                                                          Assert$BsMocha.ok(true);
                                                                          return Async$AgdaMode.resolve(/* () */0);
                                                                        }))(Async$AgdaMode.thenOk((function (param) {
                                                                              return Instance__Handler$AgdaMode.handleRemoteCommand(instance, (function (param, param$1) {
                                                                                            return Async$AgdaMode.resolve(/* () */0);
                                                                                          }), param);
                                                                            }))(Instance__Handler$AgdaMode.handleLocalCommand(/* Load */0, instance))));
                                                    }))(Async$AgdaMode.mapError((function (param) {
                                                          return /* () */0;
                                                        }))(Async$AgdaMode.mapOk((function (param) {
                                                              return Instance__Connections$AgdaMode.set(instance, param);
                                                            }))(Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.thenOk(Connection$AgdaMode.connect)(Async$AgdaMode.thenOk(Connection$AgdaMode.validateAndMake)(Async$AgdaMode.mapOk((function (x) {
                                                                              return x + " --no-libraries";
                                                                            }))(Connection$AgdaMode.autoSearch("agda"))))))));
                                    }));
                      };
                      return Promise$BsMocha.it("should success")(undefined, undefined, undefined, (function (param) {
                                    return NodeDir.promiseFiles("test/asset/agda-stdlib-1.0").then((function (paths) {
                                                    return Promise.resolve(Rebase.$$Array[/* slice */25](0, 1, paths));
                                                  })).then((function (paths) {
                                                  return Promise.all(Rebase.$$Array[/* map */0](loadAndParse, paths));
                                                }));
                                  }));
                    }));
      }));

exports.base = base;
exports.file = file;
exports.openFile = openFile;
exports.DispatchFailure = DispatchFailure;
exports.dispatch = dispatch;
exports.getActivePackageNames = getActivePackageNames;
/* base Not a pure module */
