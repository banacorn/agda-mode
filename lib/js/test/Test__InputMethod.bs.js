// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var AgdaMode$AgdaMode = require("../src/AgdaMode.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");

Mocha$BsMocha.describe("Input Method")(undefined, undefined, undefined, (function (param) {
        Promise$BsMocha.before_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* activate */2]);
        Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package[/* deactivate */3]);
        var deactivateAllInputMethod = function (param) {
          Rebase.$$Array[/* forEach */8]((function (param) {
                  return Curry._1(param[1][/* view */2][/* activateInputMethod */10], false);
                }), Js_dict.entries(AgdaMode$AgdaMode.instances));
          return Promise.resolve(/* () */0);
        };
        Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, deactivateAllInputMethod);
        Promise$BsMocha.it("should not add class '.agda-mode-input-method-activated' to the editor element before triggering")(undefined, undefined, undefined, (function (param) {
                return Curry._1(Test__Util$AgdaMode.$$File[/* openAsset */1], "Blank1.agda").then((function (param) {
                                return Test__Util$AgdaMode.dispatch("agda-mode:load", param);
                              })).then((function (instance) {
                              Assert$BsMocha.equal(undefined, false, atom.views.getView(instance[/* editors */1][/* source */1]).classList.contains("agda-mode-input-method-activated"));
                              return Promise.resolve(/* () */0);
                            }));
              }));
        Promise$BsMocha.it("should add class '.agda-mode-input-method-activated' to the editor element after triggering")(undefined, undefined, undefined, (function (param) {
                var partial_arg = Test__Util$AgdaMode.Keyboard[/* press */1];
                return Curry._1(Test__Util$AgdaMode.$$File[/* openAsset */1], "Blank1.agda").then((function (param) {
                                  return Test__Util$AgdaMode.dispatch("agda-mode:load", param);
                                })).then((function (param) {
                                return partial_arg("\\", param);
                              })).then((function (instance) {
                              Assert$BsMocha.ok(atom.views.getView(instance[/* editors */1][/* source */1]).classList.contains("agda-mode-input-method-activated"));
                              return Promise.resolve(/* () */0);
                            }));
              }));
        return Promise$BsMocha.it("should not display the keyboard before triggering")(undefined, undefined, undefined, (function (param) {
                      return Curry._1(Test__Util$AgdaMode.$$File[/* openAsset */1], "Blank1.agda").then((function (param) {
                                        return Test__Util$AgdaMode.dispatch("agda-mode:load", param);
                                      })).then(Test__Util$AgdaMode.View[/* getPanelAtBottom */1]).then((function (panel) {
                                    var match = panel.querySelector(".input-method");
                                    if (match == null) {
                                      Assert$BsMocha.fail("cannot find `.input-method`");
                                    } else {
                                      Assert$BsMocha.ok(match.classList.contains("hidden"));
                                    }
                                    return Promise.resolve(/* () */0);
                                  }));
                    }));
      }));

/*  Not a pure module */
