// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");

Mocha$BsMocha.describe("Connection")(undefined, undefined, undefined, (function (param) {
        return Mocha$BsMocha.describe("Path")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, Test__Util$AgdaMode.Package.after_each);
                      Promise$BsMocha.it("should success when trying to search for the path of program called 'agda'")(undefined, undefined, undefined, (function (param) {
                              atom.config.set("agda-mode.agdaName", "agda");
                              return Test__Util$AgdaMode.openAndLoad("Temp.agda").then(function (param) {
                                          Test__Util$AgdaMode.Assert.ok(undefined);
                                          return Promise.resolve(undefined);
                                        });
                            }));
                      return Promise$BsMocha.it("should fail when trying to search for the path of program called 'non-agda'")(undefined, undefined, undefined, (function (param) {
                                    atom.config.set("agda-mode.agdaName", "non-agda");
                                    return Test__Util$AgdaMode.$$File.openAsset("Temp.agda").then(Test__Util$AgdaMode.getInstance).then(function (instance) {
                                                var onConnectionError = $$Promise.Js.toBsPromise(Curry._1(instance.onConnectionError.once, undefined));
                                                Test__Util$AgdaMode.dispatch("agda-mode:load", instance).then(function (param) {
                                                      Curry._1(Test__Util$AgdaMode.Assert.fail, "should fail on connection");
                                                      return Promise.resolve(undefined);
                                                    });
                                                return onConnectionError.then(function (error) {
                                                            switch (error.TAG | 0) {
                                                              case /* PathSearch */0 :
                                                                  var match = error._0;
                                                                  switch (match.TAG | 0) {
                                                                    case /* ProcessHanging */0 :
                                                                    case /* NotSupported */1 :
                                                                        Curry._1(Test__Util$AgdaMode.Assert.fail, "wrong connection error");
                                                                        break;
                                                                    case /* NotFound */2 :
                                                                        if (match._0 === "non-agda") {
                                                                          Test__Util$AgdaMode.Assert.ok(undefined);
                                                                        } else {
                                                                          Curry._1(Test__Util$AgdaMode.Assert.fail, "wrong connection error");
                                                                        }
                                                                        break;
                                                                    
                                                                  }
                                                                  break;
                                                              case /* Validation */1 :
                                                              case /* Process */2 :
                                                                  Curry._1(Test__Util$AgdaMode.Assert.fail, "wrong connection error");
                                                                  break;
                                                              
                                                            }
                                                            return Promise.resolve(undefined);
                                                          });
                                              });
                                  }));
                    }));
      }));

/*  Not a pure module */
