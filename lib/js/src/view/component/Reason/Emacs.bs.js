// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function allGoalsWarnings(title, body) {
  var shitpile = body.split("\n");
  var hasMetas = Js_option.isSome(Js_primitive.null_to_opt(title.match((/Goals/))));
  var hasWarnings = Js_option.isSome(Js_primitive.null_to_opt(title.match((/Warnings/))));
  var hasErrors = Js_option.isSome(Js_primitive.null_to_opt(title.match((/Errors/))));
  var indexOfWarnings = shitpile.findIndex((function (s) {
          return Js_option.isSome(Js_primitive.null_to_opt(s.slice(5, 13).match((/Warnings/))));
        }));
  var indexOfErrors = shitpile.findIndex((function (s) {
          return Js_option.isSome(Js_primitive.null_to_opt(s.slice(5, 11).match((/Errors/))));
        }));
  if (hasMetas) {
    if (hasWarnings) {
      if (hasErrors) {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  shitpile.slice(0, indexOfWarnings),
                  shitpile.slice(indexOfWarnings + 1 | 0, indexOfErrors),
                  shitpile.slice(indexOfErrors + 1 | 0)
                ]);
      } else {
        return /* record */Block.record([
                  "metas",
                  "warnings",
                  "errors"
                ], [
                  shitpile.slice(0, indexOfWarnings),
                  shitpile.slice(indexOfWarnings + 1 | 0),
                  []
                ]);
      }
    } else if (hasErrors) {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                shitpile.slice(0, indexOfErrors),
                [],
                shitpile.slice(indexOfErrors + 1 | 0)
              ]);
    } else {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                shitpile,
                [],
                []
              ]);
    }
  } else if (hasWarnings) {
    if (hasErrors) {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                [],
                shitpile.slice(0, indexOfErrors),
                shitpile.slice(indexOfErrors + 1 | 0)
              ]);
    } else {
      return /* record */Block.record([
                "metas",
                "warnings",
                "errors"
              ], [
                [],
                shitpile,
                []
              ]);
    }
  } else if (hasErrors) {
    return /* record */Block.record([
              "metas",
              "warnings",
              "errors"
            ], [
              [],
              [],
              shitpile
            ]);
  } else {
    return /* record */Block.record([
              "metas",
              "warnings",
              "errors"
            ], [
              [],
              [],
              []
            ]);
  }
}

var Parser = /* module */Block.localModule(["allGoalsWarnings"], [allGoalsWarnings]);

var jsParseAllGoalsWarnings = allGoalsWarnings;

exports.Parser = Parser;
exports.jsParseAllGoalsWarnings = jsParseAllGoalsWarnings;
/* No side effect */
