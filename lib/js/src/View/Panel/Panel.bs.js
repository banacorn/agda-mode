// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Body$AgdaMode = require("./Body.bs.js");
var Hook$AgdaMode = require("../Hook.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Async$AgdaMode = require("../../Util/Async.bs.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Editors$AgdaMode = require("../../Editors.bs.js");
var Channels$AgdaMode = require("../../Channels.bs.js");
var Dashboard$AgdaMode = require("./Dashboard.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");
var InputMethod$AgdaMode = require("./InputMethod.bs.js");
var SizingHandle$AgdaMode = require("./SizingHandle.bs.js");

function Panel(Props) {
  var editors = Props.editors;
  var containerElement = Props.containerElement;
  var onMountAtChange = Props.onMountAtChange;
  var body = Props.body;
  var header = Props.header;
  var mountAt = Props.mountAt;
  var mode = Props.mode;
  var hidden = Props.hidden;
  var settingsView = Props.settingsView;
  var isActive = Props.isActive;
  var panelRef = Props.panelRef;
  var onInquireQuery = Props.onInquireQuery;
  var onQueryEditorRef = Props.onQueryEditorRef;
  var editorPlaceholder = Props.editorPlaceholder;
  var editorValue = Props.editorValue;
  var onInputMethodChange = Props.onInputMethodChange;
  var onSettingsViewToggle = Props.onSettingsViewToggle;
  var channels = React.useContext(Channels$AgdaMode.context);
  var match = Hook$AgdaMode.useState(170);
  var setMaxHeight = match[1];
  var match$1 = Hook$AgdaMode.useState(false);
  var setInputMethodActivation = match$1[1];
  var match$2 = Hook$AgdaMode.useState(false);
  Hook$AgdaMode.useChannel(Curry._2(Rebase.Fn[/* >> */6], match$2[1], Async$AgdaMode.resolve), channels[/* updateIsPending */5]);
  React.useEffect((function () {
          return Event$AgdaMode.onOk((function (state) {
                          return Curry._1(setInputMethodActivation, state[/* activated */0]);
                        }))(onInputMethodChange);
        }), /* array */[]);
  var mountAtBottom;
  mountAtBottom = mountAt.tag ? false : true;
  var style = mountAtBottom ? ({
        maxHeight: String(match[0]) + "px"
      }) : undefined;
  var id = "agda-mode:" + Editors$AgdaMode.getID(editors);
  var tmp = {
    className: "agda-body-container"
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  return ReactDom.createPortal(React.createElement("section", {
                  ref: panelRef,
                  className: "agda-mode-panel" + Util$AgdaMode.React[/* showWhen */5](!hidden),
                  id: id
                }, React.createElement("section", {
                      className: "panel-heading agda-header-container"
                    }, React.createElement(SizingHandle$AgdaMode.make, {
                          onResizeStart: setMaxHeight,
                          onResizeEnd: (function (height) {
                              setTimeout((function (param) {
                                      Curry._1(setMaxHeight, height);
                                      atom.config.set("agda-mode.maxBodyHeight", String(height));
                                      return /* () */0;
                                    }), 0);
                              return /* () */0;
                            }),
                          mountAtBottom: mountAtBottom
                        }), React.createElement(InputMethod$AgdaMode.make, {
                          editors: editors,
                          onChange: onInputMethodChange,
                          isActive: isActive
                        }), React.createElement(Dashboard$AgdaMode.make, {
                          header: header,
                          hidden: match$1[0],
                          isPending: match$2[0],
                          mountAt: mountAt,
                          settingsView: settingsView,
                          onMountAtChange: onMountAtChange,
                          onSettingsViewToggle: onSettingsViewToggle
                        })), React.createElement("section", tmp, React.createElement(Body$AgdaMode.make, {
                          body: body,
                          hidden: mode !== /* Display */0
                        }), React.createElement(MiniEditor$AgdaMode.make, {
                          value: editorValue,
                          placeholder: editorPlaceholder,
                          hidden: mode !== /* Inquire */1,
                          grammar: "agda",
                          onConfirm: (function (result) {
                              return Event$AgdaMode.emitOk(result, onInquireQuery);
                            }),
                          onCancel: (function (param) {
                              Event$AgdaMode.emitError(/* Cancelled */0, onInquireQuery);
                              return /* () */0;
                            }),
                          onEditorRef: onQueryEditorRef
                        }))), containerElement);
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
