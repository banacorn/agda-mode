// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Async$AgdaMode = require("../Util/Async.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");

function inquireAgdaPath(error, instance) {
  Curry._1(instance[/* view */2][/* activate */0], /* () */0);
  return Async$AgdaMode.then_((function (param) {
                  Curry._1(instance[/* view */2][/* navigateSettings */12], /* Connection */1);
                  Curry._2(instance[/* view */2][/* updateConnection */15], undefined, error);
                  return Curry._1(instance[/* view */2][/* inquireConnection */16], /* () */0);
                }), (function (param) {
                  return Async$AgdaMode.reject(/* Cancelled */0);
                }))(Curry._1(instance[/* view */2][/* openSettings */14], /* () */0));
}

function getAgdaPath(instance) {
  var storedPath = Parser$AgdaMode.filepath(atom.config.get("agda-mode.agdaPath"));
  var searchingFor = Rebase.$$String[/* trim */8](atom.config.get("agda-mode.agdaName"));
  return Async$AgdaMode.thenError((function (err) {
                  Event$AgdaMode.emitOk(err, instance[/* onConnectionError */11]);
                  return inquireAgdaPath(err, instance);
                }))(Rebase.$$String[/* isEmpty */5](storedPath) || storedPath === "." ? Connection$AgdaMode.autoSearch(searchingFor) : Async$AgdaMode.resolve(storedPath));
}

function persistConnection(instance, connection) {
  instance[/* connection */6] = connection;
  var path = Rebase.$$String[/* joinWith */11](" ", Rebase.List[/* fromArray */12](Rebase.$$Array[/* concat */11](connection[/* metadata */0][/* args */1], /* array */[connection[/* metadata */0][/* path */0]])));
  atom.config.set("agda-mode.agdaPath", path);
  Curry._2(instance[/* view */2][/* updateConnection */15], connection, undefined);
  return connection;
}

function connectWithAgdaPath(instance, path) {
  var getMetadata = function (instance, pathAndParams) {
    return Async$AgdaMode.thenError((function (err) {
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getMetadata(instance, param);
                                  }))(inquireAgdaPath(err, instance));
                  }))(Connection$AgdaMode.validateAndMake(pathAndParams));
  };
  var getConnection = function (instance, metadata) {
    return Async$AgdaMode.thenError((function (err) {
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getConnection(instance, param);
                                  }))(Async$AgdaMode.thenOk((function (param) {
                                        return getMetadata(instance, param);
                                      }))(inquireAgdaPath(err, instance)));
                  }))(Connection$AgdaMode.connect(metadata));
  };
  return Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.mapOk((function (param) {
                      var instance$1 = instance;
                      var connection = param;
                      Event$AgdaMode.onOk((function (res) {
                                Curry._2(instance$1[/* handleResponse */8], instance$1, res);
                                return /* () */0;
                              }))(connection[/* errorEmitter */3]);
                      return connection;
                    }))(Async$AgdaMode.mapOk((function (param) {
                          return persistConnection(instance, param);
                        }))(Async$AgdaMode.thenOk((function (param) {
                              return getConnection(instance, param);
                            }))(getMetadata(instance, path)))));
}

function connect(instance) {
  var match = instance[/* connection */6];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return Async$AgdaMode.thenOk((function (param) {
                    return connectWithAgdaPath(instance, param);
                  }))(getAgdaPath(instance));
  }
}

function disconnect(instance) {
  var match = instance[/* connection */6];
  if (match !== undefined) {
    Connection$AgdaMode.disconnect(/* DisconnectedByUser */0, match);
    instance[/* connection */6] = undefined;
    return Curry._2(instance[/* view */2][/* updateConnection */15], undefined, undefined);
  } else {
    return Async$AgdaMode.resolve(/* () */0);
  }
}

var get = connect;

var set = persistConnection;

exports.inquireAgdaPath = inquireAgdaPath;
exports.getAgdaPath = getAgdaPath;
exports.persistConnection = persistConnection;
exports.connectWithAgdaPath = connectWithAgdaPath;
exports.connect = connect;
exports.disconnect = disconnect;
exports.get = get;
exports.set = set;
/* Async-AgdaMode Not a pure module */
