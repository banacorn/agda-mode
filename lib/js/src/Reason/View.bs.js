// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReactDom = require("react-dom");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Tab$AgdaMode = require("./View/Tab.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var Panel$AgdaMode = require("./View/Panel/Panel.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Editors$AgdaMode = require("./View/Editors.bs.js");

var EditorNotSet = Caml_exceptions.create("View-AgdaMode.EditorNotSet");

function initialState(editor, param) {
  return /* record */Block.record([
            "header",
            "body",
            "mountAt",
            "editors",
            "mode"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                ""
              ]),
            Block.record([
                "maxHeight",
                "raw"
              ], [
                170,
                0
              ]),
            0,
            Editors$AgdaMode.make(editor),
            0
          ]);
}

function createElement(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function mountPanel(self, editor, mountTo) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(editor, undefined, undefined, (function (param) {
                  return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 2, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */2];
  if (typeof match === "number") {
    switch (mountTo) {
      case 0 : 
          var element = createElement(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 3, [/* Bottom */Block.variant("Bottom", 0, [element])]));
      case 1 : 
          var tab = createTab(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 3, [/* Pane */Block.variant("Pane", 1, [tab])]));
      case 2 : 
          return /* () */0;
      
    }
  } else if (match.tag) {
    var tab$1 = match[0];
    switch (mountTo) {
      case 0 : 
          Curry._1(tab$1[/* kill */1], /* () */0);
          var element$1 = createElement(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 3, [/* Bottom */Block.variant("Bottom", 0, [element$1])]));
      case 1 : 
          return /* () */0;
      case 2 : 
          Curry._1(tab$1[/* kill */1], /* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 3, [/* Nowhere */0]));
      
    }
  } else {
    var element$2 = match[0];
    switch (mountTo) {
      case 0 : 
          return /* () */0;
      case 1 : 
          ReactDom.unmountComponentAtNode(element$2);
          var tab$2 = createTab(/* () */0);
          return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 3, [/* Pane */Block.variant("Pane", 1, [tab$2])]));
      case 2 : 
          Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 3, [/* Nowhere */0]));
          ReactDom.unmountComponentAtNode(element$2);
          return /* () */0;
      
    }
  }
}

function renderPanel(self) {
  var match = self[/* state */1];
  var editors = match[/* editors */3];
  var mountAt = match[/* mountAt */2];
  var component = ReasonReact.element(undefined, undefined, Panel$AgdaMode.make((function (mountTo) {
              return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 2, [mountTo]));
            }), match[/* body */1], match[/* header */0], mountAt, match[/* mode */4], (function (result) {
              Editors$AgdaMode.focusMain(editors);
              Curry._1(Editors$AgdaMode.answerGeneral(editors), result);
              return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 6, [/* Display */0]));
            }), (function () {
              Editors$AgdaMode.focusMain(editors);
              Curry._1(Editors$AgdaMode.rejectGeneral(editors), Editors$AgdaMode.QueryCanceled);
              return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 6, [/* Display */0]));
            }), (function (ref) {
              var init = editors[/* general */1];
              return Curry._1(self[/* send */3], /* UpdateEditors */Block.variant("UpdateEditors", 0, [/* record */Block.record([
                                "main",
                                "general"
                              ], [
                                editors[/* main */0],
                                Block.record([
                                    "value",
                                    "placeholder",
                                    "ref",
                                    "focused",
                                    "telePromise"
                                  ], [
                                    init[/* value */0],
                                    init[/* placeholder */1],
                                    Js_primitive.some(ref),
                                    init[/* focused */3],
                                    init[/* telePromise */4]
                                  ])
                              ])]));
            }), editors[/* general */1][/* placeholder */1], editors[/* general */1][/* value */0], /* array */[]));
  if (typeof mountAt === "number") {
    return /* () */0;
  } else if (mountAt.tag) {
    ReactDom.render(component, mountAt[0][/* element */0]);
    return /* () */0;
  } else {
    ReactDom.render(component, mountAt[0]);
    return /* () */0;
  }
}

function reducer(action, state) {
  switch (action.tag | 0) {
    case 0 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      action[0],
                      state[/* mode */4]
                    ]),
                  renderPanel
                ]);
    case 1 : 
        var init = state[/* editors */3];
        var init$1 = state[/* editors */3][/* general */1];
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      Block.record([
                          "main",
                          "general"
                        ], [
                          init[/* main */0],
                          Block.record([
                              "value",
                              "placeholder",
                              "ref",
                              "focused",
                              "telePromise"
                            ], [
                              action[1],
                              action[0],
                              init$1[/* ref */2],
                              init$1[/* focused */3],
                              init$1[/* telePromise */4]
                            ])
                        ]),
                      state[/* mode */4]
                    ]),
                  (function (self) {
                      Editors$AgdaMode.focusGeneral(self[/* state */1][/* editors */3]);
                      return renderPanel(self);
                    })
                ]);
    case 2 : 
        var mountTo = action[0];
        return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                      return mountPanel(self, state[/* editors */3][/* main */0], mountTo);
                    })]);
    case 3 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      action[0],
                      state[/* editors */3],
                      state[/* mode */4]
                    ]),
                  renderPanel
                ]);
    case 4 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editors",
                      "mode"
                    ], [
                      action[0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* editors */3],
                      state[/* mode */4]
                    ]),
                  renderPanel
                ]);
    case 5 : 
        var init$2 = state[/* body */1];
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      Block.record([
                          "maxHeight",
                          "raw"
                        ], [
                          init$2[/* maxHeight */0],
                          action[0]
                        ]),
                      state[/* mountAt */2],
                      state[/* editors */3],
                      state[/* mode */4]
                    ]),
                  renderPanel
                ]);
    case 6 : 
        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                  /* record */Block.record([
                      "header",
                      "body",
                      "mountAt",
                      "editors",
                      "mode"
                    ], [
                      state[/* header */0],
                      state[/* body */1],
                      state[/* mountAt */2],
                      state[/* editors */3],
                      action[0]
                    ]),
                  renderPanel
                ]);
    
  }
}

var updateHeader = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateRawBody = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateMode = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var updateMountTo = /* record */Block.record(["contents"], [(function (param) {
        return /* () */0;
      })]);

var queryGeneral = /* record */Block.record(["contents"], [(function (param, param$1) {
        return Promise.reject(Util$AgdaMode.TelePromise[/* Uninitialized */0]);
      })]);

function jsUpdateEmacsBody(raw) {
  return Curry._1(updateRawBody[0], /* RawEmacs */Block.variant("RawEmacs", 0, [/* record */Block.record([
                    "kind",
                    "header",
                    "body"
                  ], [
                    raw.kind,
                    raw.header,
                    raw.body
                  ])]));
}

function jsUpdateJSONBody(raw) {
  return Curry._1(updateRawBody[0], /* RawJSON */Block.variant("RawJSON", 1, [/* record */Block.record([
                    "kind",
                    "rawJSON",
                    "rawString"
                  ], [
                    raw.kind,
                    raw.rawJSON,
                    raw.rawString
                  ])]));
}

function jsUpdateHeader(raw) {
  return Curry._1(updateHeader[0], /* record */Block.record([
                "text",
                "style"
              ], [
                raw.text,
                raw.style
              ]));
}

function jsUpdateMode(mode) {
  if (mode === "display") {
    return Curry._1(updateMode[0], /* Display */0);
  } else {
    return Curry._1(updateMode[0], /* Query */1);
  }
}

function jsQueryGeneral(placeholder, value) {
  return Curry._2(queryGeneral[0], placeholder, value);
}

function jsMountPanel(jsMountTo) {
  var translateJSMountTo = function (jsMountTo) {
    switch (jsMountTo) {
      case "bottom" : 
          return /* ToBottom */0;
      case "pane" : 
          return /* ToPane */1;
      default:
        return /* ToNowhere */2;
    }
  };
  return Curry._1(updateMountTo[0], translateJSMountTo(jsMountTo));
}

var component = ReasonReact.reducerComponent("View");

function make(editor, updateRawBody, updateHeader, updateMode, updateMountTo, queryGeneral, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                Curry._1(updateMountTo, (function (mountTo) {
                        return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 2, [mountTo]));
                      }));
                Curry._1(updateHeader, (function (header) {
                        return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 4, [header]));
                      }));
                Curry._1(updateRawBody, (function (rawBody) {
                        return Curry._1(self[/* send */3], /* UpdateRawBody */Block.variant("UpdateRawBody", 5, [rawBody]));
                      }));
                Curry._1(updateMode, (function (mode) {
                        return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 6, [mode]));
                      }));
                return Curry._1(queryGeneral, (function (placeholder, value) {
                              Curry._1(self[/* send */3], /* QueryGeneral */Block.variant("QueryGeneral", 1, [
                                      placeholder,
                                      value
                                    ]));
                              var promise = Util$AgdaMode.TelePromise[/* make */2](/* () */0);
                              Curry._2(self[/* handle */0], (function (param, newSelf) {
                                      Editors$AgdaMode.queryGeneral(newSelf[/* state */1][/* editors */3]).then((function (answer) {
                                              return Promise.resolve(Curry._1(promise[/* resolve */1], answer));
                                            }));
                                      return /* () */0;
                                    }), /* () */0);
                              return Curry._1(promise[/* wire */0], /* () */0);
                            }));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                return null;
              }),
            (function (param) {
                return initialState(editor, param);
              }),
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

function initialize(editor) {
  var element = document.createElement("article");
  ReactDom.render(ReasonReact.element(undefined, undefined, make(editor, (function (handle) {
                  updateRawBody[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateHeader[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateMode[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  updateMountTo[0] = handle;
                  return /* () */0;
                }), (function (handle) {
                  queryGeneral[0] = handle;
                  return /* () */0;
                }), /* array */[])), element);
  return /* () */0;
}

exports.EditorNotSet = EditorNotSet;
exports.initialState = initialState;
exports.createElement = createElement;
exports.mountPanel = mountPanel;
exports.renderPanel = renderPanel;
exports.reducer = reducer;
exports.updateHeader = updateHeader;
exports.updateRawBody = updateRawBody;
exports.updateMode = updateMode;
exports.updateMountTo = updateMountTo;
exports.queryGeneral = queryGeneral;
exports.jsUpdateEmacsBody = jsUpdateEmacsBody;
exports.jsUpdateJSONBody = jsUpdateJSONBody;
exports.jsUpdateHeader = jsUpdateHeader;
exports.jsUpdateMode = jsUpdateMode;
exports.jsQueryGeneral = jsQueryGeneral;
exports.jsMountPanel = jsMountPanel;
exports.component = component;
exports.make = make;
exports.initialize = initialize;
/* component Not a pure module */
