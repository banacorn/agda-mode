// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function sepBy(sep, item) {
  if (item) {
    var xs = item[1];
    var x = item[0];
    if (xs) {
      return ReactDOMRe.createElementVariadic("span", undefined, Rebase.$$Array[/* fromList */13](/* :: */Block.simpleVariant("::", [
                        x,
                        Rebase.List[/* map */0]((function (i) {
                                return React.createElement(React.Fragment, undefined, sep, i);
                              }), xs)
                      ])));
    } else {
      return x;
    }
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

function catMaybes(xs) {
  return Rebase.$$Array[/* fromList */13](Rebase.$$Array[/* reduceRight */4]((function (acc, x) {
                    if (x !== undefined) {
                      return /* :: */Block.simpleVariant("::", [
                                Js_primitive.valFromOption(x),
                                acc
                              ]);
                    } else {
                      return acc;
                    }
                  }), /* [] */0, xs));
}

var Array_ = /* module */Block.localModule(["catMaybes"], [catMaybes]);

function captures(re, x) {
  return Rebase.Option[/* map */0]((function (result) {
                return Rebase.$$Array[/* map */0]((function (prim) {
                              if (prim == null) {
                                return undefined;
                              } else {
                                return Js_primitive.some(prim);
                              }
                            }), result);
              }), Js_primitive.null_to_opt(re.exec(x)));
}

function parse(parser, raw) {
  if (parser.tag) {
    return Curry._1(parser[0], raw);
  } else {
    return Rebase.Option[/* flatMap */5](parser[1], captures(parser[0], raw));
  }
}

function parseArray(parser, xs) {
  return catMaybes(Rebase.$$Array[/* map */0]((function (raw) {
                    return parse(parser, raw);
                  }), xs));
}

function at(i, parser, captured) {
  if (i >= Rebase.$$Array[/* length */16](captured)) {
    return undefined;
  } else {
    return Rebase.Option[/* flatMap */5]((function (param) {
                  return parse(parser, param);
                }), Rebase.Option[/* flatten */20](Rebase.$$Array[/* get */17](captured, i)));
  }
}

function choice(res) {
  return /* String */Block.variant("String", 1, [(function (raw) {
                return Rebase.$$Array[/* reduce */3]((function (result, parser) {
                              if (result !== undefined) {
                                return Js_primitive.some(Js_primitive.valFromOption(result));
                              } else {
                                return parse(parser, raw);
                              }
                            }), undefined, res);
              })]);
}

var Parser = /* module */Block.localModule([
    "captures",
    "parse",
    "parseArray",
    "at",
    "choice"
  ], [
    captures,
    parse,
    parseArray,
    at,
    choice
  ]);

function sepBy$1(sep, item) {
  if (item) {
    return /* :: */Block.simpleVariant("::", [
              item[0],
              Rebase.List[/* flatMap */5]((function (i) {
                      return /* :: */Block.simpleVariant("::", [
                                sep,
                                /* :: */Block.simpleVariant("::", [
                                    i,
                                    /* [] */0
                                  ])
                              ]);
                    }), item[1])
            ]);
  } else {
    return /* [] */0;
  }
}

function init(xs) {
  if (xs) {
    var xs$1 = xs[1];
    if (xs$1) {
      return /* :: */Block.simpleVariant("::", [
                xs[0],
                init(xs$1)
              ]);
    } else {
      return /* [] */0;
    }
  } else {
    return Pervasives.failwith("init on empty list");
  }
}

function last(_xs) {
  while(true) {
    var xs = _xs;
    if (xs) {
      var xs$1 = xs[1];
      if (xs$1) {
        _xs = xs$1;
        continue ;
      } else {
        return xs[0];
      }
    } else {
      return Pervasives.failwith("last on empty list");
    }
  };
}

function span(p, xs) {
  if (xs) {
    var xs$1 = xs[1];
    var x = xs[0];
    if (Curry._1(p, x)) {
      var match = span(p, xs$1);
      return /* tuple */[
              /* :: */Block.simpleVariant("::", [
                  x,
                  match[0]
                ]),
              match[1]
            ];
    } else {
      return /* tuple */[
              /* [] */0,
              xs$1
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            /* [] */0
          ];
  }
}

function dropWhile(p, _xs) {
  while(true) {
    var xs = _xs;
    if (xs) {
      var xs$1 = xs[1];
      var x = xs[0];
      if (Curry._1(p, x)) {
        _xs = xs$1;
        continue ;
      } else {
        return /* :: */Block.simpleVariant("::", [
                  x,
                  xs$1
                ]);
      }
    } else {
      return /* [] */0;
    }
  };
}

var List_ = /* module */Block.localModule([
    "sepBy",
    "init",
    "last",
    "span",
    "dropWhile"
  ], [
    sepBy$1,
    init,
    last,
    span,
    dropWhile
  ]);

exports.sepBy = sepBy;
exports.enclosedBy = enclosedBy;
exports.Array_ = Array_;
exports.Parser = Parser;
exports.List_ = List_;
/* react Not a pure module */
