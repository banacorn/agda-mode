// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var View$AgdaMode = require("./View.bs.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Command$AgdaMode = require("./Command.bs.js");
var Editors$AgdaMode = require("./Editors.bs.js");
var Connection$AgdaMode = require("./Connection.bs.js");

function make(textEditor) {
  atom.views.getView(textEditor).classList.add("agda");
  var editors = Editors$AgdaMode.make(textEditor);
  return /* record */Block.record([
            "editors",
            "view",
            "goals",
            "connection"
          ], [
            editors,
            View$AgdaMode.initialize(editors),
            [],
            undefined
          ]);
}

function activate(self) {
  return Util$AgdaMode.Event[/* resolve */9](true, self[/* view */1][/* activatePanel */4]);
}

function connect(self) {
  var queryConnection = function (error, self) {
    activate(self);
    var p = Util$AgdaMode.$$Promise[/* then_ */6]((function (param) {
            Util$AgdaMode.Event[/* resolve */9](/* Connection */1, self[/* view */1][/* navigateSettingsView */11]);
            var promise = Util$AgdaMode.Event[/* once */8](self[/* view */1][/* onInquireConnection */7]);
            Util$AgdaMode.Event[/* resolve */9](/* tuple */[
                  error,
                  ""
                ], self[/* view */1][/* inquireConnection */6]);
            return promise;
          }), Util$AgdaMode.Event[/* once */8](self[/* view */1][/* onSettingsView */10]));
    Util$AgdaMode.Event[/* resolve */9](true, self[/* view */1][/* activateSettingsView */9]);
    return p;
  };
  var getAgdaPath = function (param) {
    var storedPath = Parser$AgdaMode.filepath(atom.config.get("agda-mode.agdaPath"));
    if (Rebase.$$String[/* isEmpty */5](storedPath)) {
      return Connection$AgdaMode.autoSearch("agda");
    } else {
      return Promise.resolve(storedPath);
    }
  };
  var getMetadata = function (self, path) {
    return Util$AgdaMode.$$Promise[/* catch */7]((function (param) {
                  return Connection$AgdaMode.handleValidationError((function (err) {
                                return Util$AgdaMode.$$Promise[/* then_ */6]((function (param) {
                                              return getMetadata(self, param);
                                            }), queryConnection(/* Validation */Block.variant("Validation", 1, [
                                                  path,
                                                  err
                                                ]), self));
                              }), param);
                }), Connection$AgdaMode.validateAndMake(path));
  };
  var match = self[/* connection */3];
  if (match !== undefined) {
    return Util$AgdaMode.$$Promise[/* resolve */1](match);
  } else {
    return Util$AgdaMode.$$Promise[/* then_ */6](Connection$AgdaMode.wire, Util$AgdaMode.$$Promise[/* then_ */6]((function (param) {
                      var self$1 = self;
                      var connection = param;
                      self$1[/* connection */3] = connection;
                      atom.config.set("agda-mode.agdaPath", connection[/* metadata */0][/* path */0]);
                      Util$AgdaMode.Event[/* resolve */9](connection, self$1[/* view */1][/* updateConnection */5]);
                      return Util$AgdaMode.$$Promise[/* resolve */1](connection);
                    }), Util$AgdaMode.$$Promise[/* then_ */6](Connection$AgdaMode.connect, Util$AgdaMode.$$Promise[/* then_ */6]((function (param) {
                              return getMetadata(self, param);
                            }), Util$AgdaMode.$$Promise[/* catch */7]((function (param) {
                                  return Connection$AgdaMode.handleAutoSearchError((function (err) {
                                                return queryConnection(/* AutoSearch */Block.variant("AutoSearch", 0, [err]), self);
                                              }), param);
                                }), getAgdaPath(/* () */0))))));
  }
}

function disconnect(self) {
  var match = self[/* connection */3];
  if (match !== undefined) {
    return Connection$AgdaMode.disconnect(match);
  } else {
    return /* () */0;
  }
}

function getConnection(self) {
  var match = self[/* connection */3];
  if (match !== undefined) {
    return Util$AgdaMode.$$Promise[/* resolve */1](match);
  } else {
    return connect(self);
  }
}

function deactivate(self) {
  return Util$AgdaMode.Event[/* resolve */9](false, self[/* view */1][/* activatePanel */4]);
}

function destroy(self) {
  deactivate(self);
  return Curry._1(self[/* view */1][/* destroy */12][0], /* () */0);
}

function prepareCommand(command, self) {
  var prepare = function (command, self) {
    return Util$AgdaMode.$$Promise[/* then_ */6]((function (connection) {
                  return Util$AgdaMode.$$Promise[/* resolve */1](/* record */Block.record([
                                "connection",
                                "filepath",
                                "command"
                              ], [
                                connection,
                                self[/* editors */0][/* source */1].getPath(),
                                command
                              ]));
                }), getConnection(self));
  };
  if (typeof command === "number") {
    switch (command) {
      case 0 : 
          return Util$AgdaMode.$$Promise[/* then_ */6]((function (param) {
                        return prepare(/* Load */0, self);
                      }), self[/* editors */0][/* source */1].save());
      case 1 : 
          disconnect(self);
          return Util$AgdaMode.$$Promise[/* resolve */1](undefined);
      case 2 : 
          disconnect(self);
          return prepare(/* Load */0, self);
      default:
        return prepare(/* Load */0, self);
    }
  } else if (command.tag === 8) {
    var enabled = atom.config.get("agda-mode.inputMethod");
    if (enabled) {
      switch (command[0]) {
        case 0 : 
            Util$AgdaMode.Event[/* resolve */9](true, self[/* view */1][/* activatePanel */4]);
            Util$AgdaMode.Event[/* resolve */9](true, self[/* view */1][/* activateInputMethod */13]);
            break;
        case 1 : 
            Util$AgdaMode.Event[/* resolve */9]("{", self[/* view */1][/* interceptAndInsertKey */14]);
            break;
        case 2 : 
            Util$AgdaMode.Event[/* resolve */9]("[", self[/* view */1][/* interceptAndInsertKey */14]);
            break;
        case 3 : 
            Util$AgdaMode.Event[/* resolve */9]("(", self[/* view */1][/* interceptAndInsertKey */14]);
            break;
        case 4 : 
            Util$AgdaMode.Event[/* resolve */9]("\"", self[/* view */1][/* interceptAndInsertKey */14]);
            break;
        case 5 : 
            Util$AgdaMode.Event[/* resolve */9]("'", self[/* view */1][/* interceptAndInsertKey */14]);
            break;
        case 6 : 
            Util$AgdaMode.Event[/* resolve */9]("`", self[/* view */1][/* interceptAndInsertKey */14]);
            break;
        
      }
    } else {
      Editors$AgdaMode.Focus[/* get */0](self[/* editors */0]).insertText("\\");
    }
    return Util$AgdaMode.$$Promise[/* resolve */1](undefined);
  } else {
    return prepare(/* Load */0, self);
  }
}

function dispatch(command, self) {
  return Util$AgdaMode.$$Promise[/* then_ */6]((function (prepared) {
                if (prepared !== undefined) {
                  var cmd = prepared;
                  var s = Command$AgdaMode.Packed[/* serialize */0](cmd);
                  return Util$AgdaMode.$$Promise[/* map */0](Rebase.Option[/* some */11], Connection$AgdaMode.send(s, cmd[/* connection */0]));
                } else {
                  return Util$AgdaMode.$$Promise[/* resolve */1](undefined);
                }
              }), prepareCommand(command, self));
}

function dispatchUndo(_self) {
  console.log("Undo");
  return /* () */0;
}

var Event = 0;

exports.Event = Event;
exports.make = make;
exports.activate = activate;
exports.connect = connect;
exports.disconnect = disconnect;
exports.getConnection = getConnection;
exports.deactivate = deactivate;
exports.destroy = destroy;
exports.prepareCommand = prepareCommand;
exports.dispatch = dispatch;
exports.dispatchUndo = dispatchUndo;
/* Util-AgdaMode Not a pure module */
