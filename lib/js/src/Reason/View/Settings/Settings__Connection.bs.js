// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var MiniEditor$AgdaMode = require("../MiniEditor.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "connected",
            "editorRef",
            "editorModel",
            "message"
          ], [
            false,
            Block.record(["contents"], [undefined]),
            Block.record(["contents"], [MiniEditor$AgdaMode.Model[/* make */0](/* () */0)]),
            ""
          ]);
}

function reducer(action, state) {
  if (typeof action === "number") {
    if (action !== 0) {
      return /* NoUpdate */0;
    } else {
      return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                    return /* () */0;
                  })]);
    }
  } else {
    return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
              /* record */Block.record([
                  "connected",
                  "editorRef",
                  "editorModel",
                  "message"
                ], [
                  state[/* connected */0],
                  state[/* editorRef */1],
                  state[/* editorModel */2],
                  action[0]
                ]),
              (function (_self) {
                  return Rebase.Option[/* forEach */8]((function (editor) {
                                atom.views.getView(editor).focus();
                                editor.selectAll();
                                return /* () */0;
                              }), state[/* editorRef */1][0]);
                })
            ]);
  }
}

var component = ReasonReact.reducerComponent("Connection");

function setEditorRef(theRef, param) {
  param[/* state */1][/* editorRef */1][0] = Caml_option.some(theRef);
  return /* () */0;
}

function make(inquireConnection, onInquireConnection, hidden, querying, checked, toggleAgdaConnection, agdaConnected, agdaPath, agdaVersion, supportedProtocol, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                return Util$AgdaMode.$$Promise[/* thenDrop */8]((function (param) {
                              Curry._1(self[/* send */3], /* Inquire */Block.simpleVariant("Inquire", [
                                      param[0],
                                      param[1]
                                    ]));
                              var promise = MiniEditor$AgdaMode.Model[/* inquire */1](self[/* state */1][/* editorModel */2][0]);
                              return Util$AgdaMode.Event[/* handlePromise */11](promise, onInquireConnection);
                            }), Util$AgdaMode.Event[/* destroyWhen */6](self[/* onUnmount */4], Util$AgdaMode.Event[/* on */7](inquireConnection)));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("querying", querying, Util$AgdaMode.ClassName[/* addWhen */1]("hidden", hidden, /* :: */Block.simpleVariant("::", [
                                "agda-settings-connection",
                                /* [] */0
                              ]))));
                var match = self[/* state */1];
                var message = match[/* message */3];
                var match$1 = Rebase.$$String[/* isEmpty */5](message);
                return React.createElement("section", {
                            className: className
                          }, React.createElement("form", undefined, React.createElement("ul", {
                                    className: "agda-settings-connection-dashboard"
                                  }, React.createElement("li", {
                                        id: "agda-settings-connection-agda"
                                      }, React.createElement("h2", undefined, React.createElement("label", {
                                                className: "input-label"
                                              }, React.createElement("span", undefined, "Connection to Agda"), React.createElement("input", {
                                                    className: "input-toggle",
                                                    checked: checked,
                                                    type: "checkbox",
                                                    onChange: toggleAgdaConnection
                                                  }))), React.createElement("div", undefined, React.createElement("p", undefined, "Connection: " + (
                                                agdaConnected ? "established" : "not established"
                                              )), React.createElement("p", undefined, "Established path: " + (
                                                agdaConnected ? agdaPath : "unknown"
                                              )), React.createElement("p", undefined, "Established path: " + (
                                                agdaConnected ? agdaVersion : "unknown"
                                              )), React.createElement("p", undefined, "Supported protocol: " + supportedProtocol), React.createElement("p", undefined, ReasonReact.element(undefined, undefined, MiniEditor$AgdaMode.make("", "path to Agda", false, undefined, (function (result) {
                                                          return MiniEditor$AgdaMode.Model[/* answer */2](result, self[/* state */1][/* editorModel */2][0]);
                                                        }), Caml_option.some((function () {
                                                              return /* () */0;
                                                            })), undefined, undefined, Curry._1(self[/* handle */0], setEditorRef), /* array */[]))), React.createElement("p", undefined, React.createElement("button", {
                                                    className: "btn icon icon-search inline-block-tight",
                                                    onClick: (function (param) {
                                                        return Curry._1(self[/* send */3], /* Search */0);
                                                      })
                                                  }, "auto search")), match$1 ? null : React.createElement("p", {
                                                  className: "inset-panel padded text-warning error"
                                                }, message))))));
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.setEditorRef = setEditorRef;
exports.make = make;
/* component Not a pure module */
