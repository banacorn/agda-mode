// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function calculateBodyHeight(handleRef, handleY) {
  return Rebase.$$Option.flatMap((function (elem) {
                var top = (elem.getBoundingClientRect().top | 0) + 51 | 0;
                return Rebase.$$Option.flatMap((function (element) {
                              var bottom = element.getBoundingClientRect().top | 0;
                              if (top > 0) {
                                return (bottom - handleY | 0) - 51 | 0;
                              }
                              
                            }), Caml_option.nullable_to_opt(document.querySelector("atom-panel-container.footer")));
              }), Caml_option.nullable_to_opt(handleRef.current));
}

function SizingHandle(Props) {
  var onResizeStart = Props.onResizeStart;
  var onResizeEnd = Props.onResizeEnd;
  var mountAtBottom = Props.mountAtBottom;
  var handleRef = React.useRef(null);
  if (mountAtBottom) {
    return React.createElement("div", {
                className: "sizing-handle-anchor"
              }, React.createElement("div", {
                    ref: handleRef,
                    className: "sizing-handle native-key-bindings",
                    draggable: true,
                    tabIndex: -1,
                    onDragEnd: (function (ev) {
                        return Rebase.$$Option.forEach(onResizeEnd, calculateBodyHeight(handleRef, ev.clientY));
                      }),
                    onDragStart: (function (ev) {
                        return Rebase.$$Option.forEach(onResizeStart, calculateBodyHeight(handleRef, ev.clientY));
                      })
                  }));
  } else {
    return null;
  }
}

var make = SizingHandle;

exports.calculateBodyHeight = calculateBodyHeight;
exports.make = make;
/* react Not a pure module */
