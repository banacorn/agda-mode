// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Parser$AgdaMode = require("./Parser.bs.js");
var Command$AgdaMode = require("./Command.bs.js");
var Instance$AgdaMode = require("./Instance.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var activated = /* record */Caml_chrome_debugger.record(["contents"], [false]);

var instances = { };

var textEditorID = Curry._2(Rebase.Fn.$great$great, (function (prim) {
        return prim.id;
      }), (function (prim) {
        return String(prim);
      }));

function get(textEditor) {
  return Js_dict.get(instances, Curry._1(textEditorID, textEditor));
}

function getThen(f, textEditor) {
  return Rebase.$$Option.forEach(f, Js_dict.get(instances, Curry._1(textEditorID, textEditor)));
}

function add(textEditor) {
  var match = Js_dict.get(instances, Curry._1(textEditorID, textEditor));
  if (match !== undefined) {
    return /* () */0;
  } else {
    instances[Curry._1(textEditorID, textEditor)] = Instance$AgdaMode.make(textEditor);
    return /* () */0;
  }
}

function delete_ (id){{delete instances[id]}};

function remove(textEditor) {
  var id = Curry._1(textEditorID, textEditor);
  var match = Js_dict.get(instances, id);
  if (match !== undefined) {
    Instance$AgdaMode.destroy(match);
    delete_(id);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function destroyAll(param) {
  return Rebase.$$Array.forEach((function (param) {
                Instance$AgdaMode.destroy(param[1]);
                delete_(param[0]);
                return /* () */0;
              }), Js_dict.entries(instances));
}

function contains(textEditor) {
  return Js_dict.get(instances, Curry._1(textEditorID, textEditor)) !== undefined;
}

function size(param) {
  return Rebase.$$Array.length(Object.keys(instances));
}

var Instances = {
  textEditorID: textEditorID,
  get: get,
  getThen: getThen,
  add: add,
  delete_: delete_,
  remove: remove,
  destroyAll: destroyAll,
  contains: contains,
  size: size
};

function isAgdaFile(textEditor) {
  var filepath = Parser$AgdaMode.filepath(Rebase.$$Option.getOr("untitled", textEditor.getPath()));
  var onWindows = Os.type() === "Windows_NT";
  if (onWindows) {
    return (/\.agda$|\.lagda$/i).test(filepath);
  } else {
    return (/\.agda$|\.lagda$/).test(filepath);
  }
}

var subscriptions = new Atom.CompositeDisposable();

function onEditorActivationChange(param) {
  var previous = /* record */Caml_chrome_debugger.record(["contents"], [atom.workspace.getActiveTextEditor()]);
  subscriptions.add(atom.workspace.onDidChangeActiveTextEditor((function (next) {
              var partial_arg = Curry._2(Rebase.Fn.$great$great, Instance$AgdaMode.deactivate, (function (prim) {
                      return /* () */0;
                    }));
              Rebase.$$Option.forEach((function (param) {
                      return getThen(partial_arg, param);
                    }), previous[0]);
              if (next !== undefined) {
                var nextEditor = Caml_option.valFromOption(next);
                getThen(Curry._2(Rebase.Fn.$great$great, Instance$AgdaMode.activate, (function (prim) {
                            return /* () */0;
                          })), nextEditor);
                previous[0] = Caml_option.some(nextEditor);
                return /* () */0;
              } else {
                return /* () */0;
              }
            })));
  return /* () */0;
}

function eventTargetEditor($$event) {
  var targetSubElement = $$event.target;
  var targetedEditors = Rebase.$$Array.filter(Curry._2(Rebase.Fn.$great$great, Curry._2(Rebase.Fn.$great$great, (function (prim) {
                  return atom.views.getView(prim);
                }), (function (prim) {
                  return prim;
                })), (function (param) {
              return param.contains(targetSubElement);
            })), atom.workspace.getTextEditors());
  return Rebase.$$Array.get(targetedEditors, 0);
}

function onTriggerCommand(param) {
  return Rebase.$$Array.forEach((function (command) {
                subscriptions.add(atom.commands.add("atom-text-editor", "agda-mode:" + command, (function ($$event) {
                            return Rebase.$$Option.forEach((function (instance) {
                                          Instance$AgdaMode.handleCommandError(Instance$AgdaMode.dispatch(Command$AgdaMode.Primitive.parse(command), instance), instance);
                                          return /* () */0;
                                        }), Rebase.$$Option.flatMap(get, eventTargetEditor($$event)));
                          })));
                return /* () */0;
              }), Command$AgdaMode.names);
}

function onUndo(param) {
  subscriptions.add(atom.commands.add("atom-text-editor", "core:undo", (function ($$event) {
              $$event.stopImmediatePropagation();
              var activated = atom.workspace.getActiveTextEditor();
              return Rebase.$$Option.forEach(Instance$AgdaMode.dispatchUndo, Rebase.$$Option.flatMap(get, activated));
            })));
  return /* () */0;
}

function onOpenEditor(param) {
  subscriptions.add(atom.workspace.observeTextEditors((function (textEditor) {
              var textEditorSubscriptions = new Atom.CompositeDisposable();
              if (isAgdaFile(textEditor)) {
                add(textEditor);
              }
              textEditorSubscriptions.add(textEditor.onDidChangePath((function (param) {
                          if (!isAgdaFile(textEditor) && contains(textEditor)) {
                            remove(textEditor);
                          }
                          if (isAgdaFile(textEditor) && !contains(textEditor)) {
                            return add(textEditor);
                          } else {
                            return 0;
                          }
                        })));
              textEditorSubscriptions.add(textEditor.onDidDestroy((function (param) {
                          if (isAgdaFile(textEditor) && contains(textEditor)) {
                            remove(textEditor);
                          }
                          textEditorSubscriptions.dispose();
                          return /* () */0;
                        })));
              return /* () */0;
            })));
  return /* () */0;
}

function setup(param) {
  onOpenEditor(/* () */0);
  onEditorActivationChange(/* () */0);
  onTriggerCommand(/* () */0);
  return onUndo(/* () */0);
}

function activate(param) {
  if (!activated[0]) {
    activated[0] = true;
    setup(/* () */0);
  }
  return Promise.resolve(/* () */0);
}

function deactivate(param) {
  if (activated[0]) {
    activated[0] = false;
    destroyAll(/* () */0);
    subscriptions.dispose();
    return /* () */0;
  } else {
    return 0;
  }
}

var config = {
  agdaPath: {
    title: "Agda path",
    description: "Path to the executable of Agda, automatically inferred when possible. Overwrite to override.",
    type: "string",
    default: "",
    order: 1
  },
  agdaName: {
    title: "Agda name",
    description: "Default to \"agda\", this is the name we use to search for the path",
    type: "string",
    default: "agda",
    order: 2
  },
  enableJSONProtocol: {
    title: "Enable the JSON protocol (experimental)",
    description: "Demand Agda to output in JSON format when possible",
    type: "boolean",
    default: false,
    order: 3
  },
  libraryPath: {
    title: "Libraries",
    description: "Paths to include (such as agda-stdlib), seperate with comma. Useless after Agda 2.5.0",
    type: "array",
    default: /* array */[],
    items: {
      type: "string"
    },
    order: 10
  },
  backend: {
    title: "Backend",
    description: "The backend which is used to compile Agda programs.",
    type: "string",
    default: "GHCNoMain",
    enum: /* array */[
      "GHC",
      "GHCNoMain"
    ],
    order: 11
  },
  highlightingMethod: {
    title: "Highlighting information passing",
    description: "Receive parsed result from Agda, directly from stdio, or indirectly from temporary files (which requires frequent disk access)",
    type: "string",
    default: "Direct",
    enum: /* array */[
      "Indirect",
      "Direct"
    ],
    order: 20
  },
  maxBodyHeight: {
    title: "Max panel size",
    description: "The max height the panel could strech",
    type: "integer",
    default: 170,
    minimum: 40,
    maximum: 1010,
    order: 30
  },
  inputMethod: {
    title: "Input method",
    description: "Enable input method",
    type: "boolean",
    default: true,
    order: 40
  },
  inputMethodExtension: {
    title: "Input method extension",
    description: "For adding or prioritizing key mappings. Please edit this from \"Settings > Input Method > Keymap extensions\"",
    type: "string",
    default: "{\"^r\":[\"ʳ\"],\"^l\":[\"ˡ\"]}",
    order: 41
  },
  trimSpaces: {
    title: "Trim spaces",
    description: "Remove leading and trailing spaces of an expression in an hole, when giving it to Agda. (Default to be False in Emacs, but True in here)",
    type: "boolean",
    default: true,
    order: 50
  }
};

exports.activated = activated;
exports.instances = instances;
exports.Instances = Instances;
exports.isAgdaFile = isAgdaFile;
exports.subscriptions = subscriptions;
exports.onEditorActivationChange = onEditorActivationChange;
exports.eventTargetEditor = eventTargetEditor;
exports.onTriggerCommand = onTriggerCommand;
exports.onUndo = onUndo;
exports.onOpenEditor = onOpenEditor;
exports.setup = setup;
exports.activate = activate;
exports.deactivate = deactivate;
exports.config = config;
/* textEditorID Not a pure module */
