// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var QueryCancelled = Caml_exceptions.create("Editors-AgdaMode.QueryCancelled");

function make(editor) {
  return /* record */Block.record([
            "focused",
            "source",
            "query"
          ], [
            0,
            editor,
            undefined
          ]);
}

function get(editors) {
  var match = editors[/* focused */0];
  if (match) {
    var match$1 = editors[/* query */2];
    if (match$1 !== undefined) {
      return Caml_option.valFromOption(match$1);
    } else {
      return editors[/* source */1];
    }
  } else {
    return editors[/* source */1];
  }
}

function on(sort, editors) {
  if (sort) {
    Rebase.$$Option[/* forEach */8]((function (editor) {
            atom.views.getView(editor).focus();
            return /* () */0;
          }), editors[/* query */2]);
    editors[/* focused */0] = /* Query */1;
    return /* () */0;
  } else {
    atom.views.getView(editors[/* source */1]).focus();
    editors[/* focused */0] = /* Source */0;
    return /* () */0;
  }
}

var Focus = /* module */Block.localModule([
    "get",
    "on"
  ], [
    get,
    on
  ]);

function getSelectedSymbol(editors) {
  return Rebase.$$String[/* sub */9](0, 1, get(editors).getSelectedText());
}

function getSelectedTextNode(editors) {
  var getLargerSyntaxNode = function (param) {
    get(editors).selectLargerSyntaxNode();
    return get(editors).getSelectedText();
  };
  var getPointedWord = function (param) {
    get(editors).selectWordsContainingCursors();
    return get(editors).getSelectedText();
  };
  var selectedText = get(editors).getSelectedText();
  if (Rebase.$$String[/* isEmpty */5](selectedText)) {
    var largerNode = getLargerSyntaxNode(/* () */0);
    if (Rebase.$$String[/* isEmpty */5](largerNode)) {
      return getPointedWord(/* () */0);
    } else {
      var pointedText = getPointedWord(/* () */0);
      if (pointedText === "_") {
        return getLargerSyntaxNode(/* () */0);
      } else {
        return pointedText;
      }
    }
  } else {
    return selectedText;
  }
}

exports.QueryCancelled = QueryCancelled;
exports.make = make;
exports.Focus = Focus;
exports.getSelectedSymbol = getSelectedSymbol;
exports.getSelectedTextNode = getSelectedTextNode;
/* No side effect */
