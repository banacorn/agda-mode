// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Resource$AgdaMode = require("../Util/Resource.bs.js");

function createPanelContainer(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode-panel-container");
  return element;
}

var itemOptions = {
  initialLine: 0,
  initialColumn: 0,
  split: "right",
  activatePane: true,
  activateItem: true,
  pending: false,
  searchAllPanes: true,
  location: undefined
};

function trigger(callback) {
  if (callback !== undefined) {
    return Curry._1(callback, /* () */0);
  } else {
    return /* () */0;
  }
}

function triggerArg(callback, arg) {
  if (callback !== undefined) {
    return Curry._1(callback, arg);
  } else {
    return /* () */0;
  }
}

function make(editor, getTitle, path, onOpen, onKill, onClose, onDidChangeActive, param) {
  var itemResource = Resource$AgdaMode.make(/* () */0);
  var closedDeliberately = {
    contents: false
  };
  var subscriptions = new Atom.CompositeDisposable();
  var previousItem = atom.workspace.getActivePane().getActiveItem();
  var itemURI = "agda-mode://" + (Rebase.$$Option.getOr("untitled", editor.getPath()) + ("/" + path));
  var itemOpener = {
    element: createPanelContainer(/* () */0),
    getTitle: getTitle
  };
  subscriptions.add(atom.workspace.addOpener((function (givenURI) {
              if (givenURI === itemURI) {
                return Caml_option.some(itemOpener);
              }
              
            })));
  atom.workspace.open(itemURI, itemOptions).then((function (newEditor) {
          Curry._1(itemResource.supply, newEditor);
          if (onOpen !== undefined) {
            Curry._3(onOpen, itemOpener.element, newEditor, previousItem);
          }
          var pane = atom.workspace.paneForItem(newEditor);
          Rebase.$$Option.forEach((function (pane$prime) {
                  subscriptions.add(pane$prime.onWillDestroyItem((function ($$event) {
                              var destroyedTitle = $$event.item.getTitle();
                              var getTitle = itemOpener.getTitle;
                              if (destroyedTitle === Curry._1(getTitle, /* () */0)) {
                                if (closedDeliberately.contents) {
                                  triggerArg(onKill, itemOpener.element);
                                } else {
                                  triggerArg(onClose, itemOpener.element);
                                }
                                subscriptions.dispose();
                                return /* () */0;
                              } else {
                                return 0;
                              }
                            })));
                  return /* () */0;
                }), pane);
          Rebase.$$Option.forEach((function (pane$prime) {
                  subscriptions.add(pane$prime.onDidChangeActiveItem((function (item) {
                              var activatedTitle = item.getTitle();
                              var getTitle = itemOpener.getTitle;
                              if (activatedTitle === Curry._1(getTitle, /* () */0)) {
                                return triggerArg(onDidChangeActive, true);
                              } else {
                                return triggerArg(onDidChangeActive, false);
                              }
                            })));
                  return /* () */0;
                }), pane);
          return Promise.resolve(atom.workspace.getActivePane());
        }));
  return {
          itemResource: itemResource,
          subscriptions: subscriptions,
          closedDeliberately: closedDeliberately,
          itemOpener: itemOpener
        };
}

function kill(self) {
  return $$Promise.get(Curry._1(self.itemResource.acquire, /* () */0), (function (item) {
                self.subscriptions.dispose();
                self.closedDeliberately.contents = true;
                return Rebase.$$Option.forEach((function (pane) {
                              pane.destroyItem(item);
                              return /* () */0;
                            }), atom.workspace.paneForItem(item));
              }));
}

function getElement(self) {
  return self.itemOpener.element;
}

function activate(self) {
  return $$Promise.get(Curry._1(self.itemResource.acquire, /* () */0), (function (item) {
                return Rebase.$$Option.forEach((function (pane) {
                              pane.activateItem(item);
                              return /* () */0;
                            }), atom.workspace.paneForItem(item));
              }));
}

exports.createPanelContainer = createPanelContainer;
exports.itemOptions = itemOptions;
exports.trigger = trigger;
exports.triggerArg = triggerArg;
exports.make = make;
exports.kill = kill;
exports.getElement = getElement;
exports.activate = activate;
/* atom Not a pure module */
