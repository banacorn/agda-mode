// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Async$AgdaMode = require("../Util/Async.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Response$AgdaMode = require("../Response.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");

function connect(instance) {
  var inquireConnection = function (error, instance) {
    View$AgdaMode.Handles[/* activate */2](instance[/* view */2]);
    var promise = Async$AgdaMode.thenOk((function (param) {
              View$AgdaMode.Handles[/* navigateSettingsView */9](/* Connection */1, instance[/* view */2]);
              var promise = View$AgdaMode.Handles[/* onInquireConnection */10](instance[/* view */2]);
              View$AgdaMode.Handles[/* inquireConnection */11](error, "", instance[/* view */2]);
              return promise;
            }))(View$AgdaMode.Handles[/* onOpenSettingsView */8](instance[/* view */2]));
    View$AgdaMode.Handles[/* activateSettingsView */12](instance[/* view */2]);
    return promise;
  };
  var getAgdaPath = function (param) {
    var storedPath = Parser$AgdaMode.filepath(atom.config.get("agda-mode.agdaPath"));
    if (Rebase.$$String[/* isEmpty */5](storedPath)) {
      return Connection$AgdaMode.autoSearch("agda");
    } else {
      return Async$AgdaMode.resolve(storedPath);
    }
  };
  var getMetadata = function (instance, pathAndParams) {
    var match = Parser$AgdaMode.commandLine(pathAndParams);
    return Async$AgdaMode.thenError((function (err) {
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getMetadata(instance, param);
                                  }))(inquireConnection(/* Validation */Block.variant("Validation", 1, [
                                      pathAndParams,
                                      err
                                    ]), instance));
                  }))(Connection$AgdaMode.validateAndMake(match[0], match[1]));
  };
  var getConnection = function (instance, metadata) {
    return Async$AgdaMode.thenError((function (err) {
                    console.log(err);
                    return Async$AgdaMode.thenOk((function (param) {
                                    return getConnection(instance, param);
                                  }))(Async$AgdaMode.thenOk((function (param) {
                                        return getMetadata(instance, param);
                                      }))(inquireConnection(/* Connection */Block.variant("Connection", 2, [err]), instance)));
                  }))(Connection$AgdaMode.connect(metadata));
  };
  var match = instance[/* connection */5];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.mapOk((function (param) {
                        var instance$1 = instance;
                        var connection = param;
                        Event$AgdaMode.onOk((function (responses) {
                                  Async$AgdaMode.thenOk(Curry._1(instance$1[/* handleResponses */7], instance$1))(Async$AgdaMode.mapError((function (e) {
                                                return /* ParseError */Block.variant("ParseError", 0, [e]);
                                              }))(Async$AgdaMode.lift(Response$AgdaMode.parse, responses)));
                                  return /* () */0;
                                }))(connection[/* errorEmitter */3]);
                        return connection;
                      }))(Async$AgdaMode.mapOk((function (param) {
                            var instance$1 = instance;
                            var connection = param;
                            instance$1[/* connection */5] = connection;
                            var path = Rebase.$$String[/* joinWith */11](" ", Rebase.List[/* fromArray */12](Rebase.$$Array[/* concat */11](connection[/* metadata */0][/* args */1], /* array */[connection[/* metadata */0][/* path */0]])));
                            atom.config.set("agda-mode.agdaPath", path);
                            Event$AgdaMode.emitOk(connection, instance$1[/* view */2][/* updateConnection */4]);
                            return connection;
                          }))(Async$AgdaMode.thenOk((function (param) {
                                return getConnection(instance, param);
                              }))(Async$AgdaMode.thenOk((function (param) {
                                    return getMetadata(instance, param);
                                  }))(Async$AgdaMode.thenError((function (err) {
                                        return inquireConnection(/* AutoSearch */Block.variant("AutoSearch", 0, [err]), instance);
                                      }))(getAgdaPath(/* () */0)))))));
  }
}

function disconnect(instance) {
  var match = instance[/* connection */5];
  if (match !== undefined) {
    Connection$AgdaMode.disconnect(/* DisconnectedByUser */0, match);
    instance[/* connection */5] = undefined;
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function get(instance) {
  var match = instance[/* connection */5];
  if (match !== undefined) {
    return Async$AgdaMode.resolve(match);
  } else {
    return connect(instance);
  }
}

exports.connect = connect;
exports.disconnect = disconnect;
exports.get = get;
/* View-AgdaMode Not a pure module */
