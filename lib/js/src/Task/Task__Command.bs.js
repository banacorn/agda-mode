// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Command$AgdaMode = require("../Command.bs.js");
var Editors$AgdaMode = require("../Editors.bs.js");
var Translator$AgdaMode = require("../View/Panel/InputMethod/Translator.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Type__Location$AgdaMode = require("../Type/Type__Location.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Instance__Connections$AgdaMode = require("../Instance/Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("../Instance/Instance__Highlightings.bs.js");

function handle(command) {
  if (typeof command === "number") {
    switch (command) {
      case /* Load */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.flatMapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(instance[/* editors */1][/* source */1].save())), (function (param) {
                                              return /* Cancelled */0;
                                            })), (function (param) {
                                          instance[/* isLoaded */0] = true;
                                          return $$Promise.map($$Promise.flatMap(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                                                            return Curry._3(instance[/* view */2][/* display */3], "Connecting ...", /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [""])]));
                                                          })), (function (param) {
                                                        return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Load */0]),
                                                                      /* [] */0
                                                                    ])]);
                                                      }));
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Quit */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Instance__Connections$AgdaMode.disconnect(instance), (function (param) {
                                                  Instance__Goals$AgdaMode.destroyAll(instance);
                                                  Instance__Highlightings$AgdaMode.destroyAll(instance);
                                                  return Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
                                                })), (function (param) {
                                              instance[/* isLoaded */0] = false;
                                              return Curry._1(instance[/* view */2][/* deactivate */1], /* () */0);
                                            })), (function (param) {
                                          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Restart */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.map(Instance__Connections$AgdaMode.disconnect(instance), (function (param) {
                                          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]);
                                        }));
                          })]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Load */0]),
                        /* [] */0
                      ])
                  ]);
      case /* Abort */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Abort */1]),
                    /* [] */0
                  ]);
      case /* Compile */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Compile */2]),
                    /* [] */0
                  ]);
      case /* ToggleDisplayOfImplicitArguments */5 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ToggleDisplayOfImplicitArguments */3]),
                    /* [] */0
                  ]);
      case /* SolveConstraints */6 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* SolveConstraints */4]),
                    /* [] */0
                  ]);
      case /* ShowConstraints */7 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ShowConstraints */5]),
                    /* [] */0
                  ]);
      case /* ShowGoals */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ShowGoals */6]),
                    /* [] */0
                  ]);
      case /* NextGoal */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            var nextGoal = Instance__Goals$AgdaMode.getNextGoalPosition(instance);
                            Rebase.$$Option.forEach((function (position) {
                                    instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                    return /* () */0;
                                  }), nextGoal);
                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                          })]),
                    /* [] */0
                  ]);
      case /* PreviousGoal */10 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            var previousGoal = Instance__Goals$AgdaMode.getPreviousGoalPosition(instance);
                            Rebase.$$Option.forEach((function (position) {
                                    instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                    return /* () */0;
                                  }), previousGoal);
                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                          })]),
                    /* [] */0
                  ]);
      case /* ToggleDocking */11 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.map(Curry._1(instance[/* view */2][/* toggleDocking */2], /* () */0), (function (param) {
                                          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* WhyInScope */12 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            var selectedText = instance[/* editors */1][/* source */1].getSelectedText();
                            if (Rebase.$$String.isEmpty(selectedText)) {
                              return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Scope info", "name:", ""), (function (param) {
                                                return /* Cancelled */0;
                                              })), (function (expr) {
                                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* WhyInScope */Caml_chrome_debugger.variant("WhyInScope", 0, [
                                                                            expr,
                                                                            param[1]
                                                                          ])]),
                                                                    /* [] */0
                                                                  ]);
                                                        }));
                                          }));
                            } else {
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* WhyInScopeGlobal */Caml_chrome_debugger.variant("WhyInScopeGlobal", 1, [selectedText])]),
                                                /* [] */0
                                              ])]));
                            }
                          })]),
                    /* [] */0
                  ]);
      case /* Give */13 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          var index = param[1];
                                          var goal = param[0];
                                          if (Goal$AgdaMode.isEmpty(goal)) {
                                            return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Give", "expression to give:", ""), (function (param) {
                                                              return /* Cancelled */0;
                                                            })), (function (result) {
                                                          Goal$AgdaMode.setContent(result, goal);
                                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Give */Caml_chrome_debugger.variant("Give", 9, [
                                                                            goal,
                                                                            index
                                                                          ])]),
                                                                    /* [] */0
                                                                  ]);
                                                        }));
                                          } else {
                                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Give */Caml_chrome_debugger.variant("Give", 9, [
                                                                      goal,
                                                                      index
                                                                    ])]),
                                                              /* [] */0
                                                            ])]));
                                          }
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Refine */14 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Refine */Caml_chrome_debugger.variant("Refine", 10, [
                                                            param[0],
                                                            param[1]
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Auto */15 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Auto */Caml_chrome_debugger.variant("Auto", 11, [
                                                            param[0],
                                                            param[1]
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Case */16 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          var index = param[1];
                                          var goal = param[0];
                                          if (Goal$AgdaMode.isEmpty(goal)) {
                                            return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Case", "expression to case:", ""), (function (param) {
                                                              return /* Cancelled */0;
                                                            })), (function (result) {
                                                          Goal$AgdaMode.setContent(result, goal);
                                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Case */Caml_chrome_debugger.variant("Case", 12, [
                                                                            goal,
                                                                            index
                                                                          ])]),
                                                                    /* [] */0
                                                                  ]);
                                                        }));
                                          } else {
                                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Case */Caml_chrome_debugger.variant("Case", 12, [
                                                                      goal,
                                                                      index
                                                                    ])]),
                                                              /* [] */0
                                                            ])]));
                                          }
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* QuerySymbol */17 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            var selected = Editors$AgdaMode.getSelectedSymbol(instance[/* editors */1]);
                            var getSymbol = Rebase.$$String.isEmpty(Rebase.$$String.trim(selected)) ? $$Promise.flatMap(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                                      return Curry._3(instance[/* view */2][/* inquire */4], "Lookup Unicode Symbol Input Sequence", "symbol to lookup:", "");
                                    })) : $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [selected]));
                            $$Promise.getOk(getSymbol, (function (symbol) {
                                    return Rebase.$$Option.forEach((function (sequences) {
                                                  Curry._3(instance[/* view */2][/* display */3], "Input sequence for " + symbol, /* PlainText */0, /* Emacs */Caml_chrome_debugger.variant("Emacs", 0, [/* PlainText */Caml_chrome_debugger.variant("PlainText", 8, [Rebase.$$String.joinWith("\n", Rebase.List.fromArray(sequences))])]));
                                                  return /* () */0;
                                                }), Translator$AgdaMode.lookup(symbol));
                                  }));
                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                          })]),
                    /* [] */0
                  ]);
      case /* GotoDefinition */18 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            if (instance[/* isLoaded */0]) {
                              var name = Instance__TextEditors$AgdaMode.updateCursorPosition((function (param) {
                                      return Editors$AgdaMode.getSelectedTextNode(instance[/* editors */1]);
                                    }), instance);
                              return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* GotoDefinition */Caml_chrome_debugger.variant("GotoDefinition", 17, [
                                                                  name,
                                                                  param[1]
                                                                ])]),
                                                          /* [] */0
                                                        ]);
                                              })), (function (param) {
                                            return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* GotoDefinitionGlobal */Caml_chrome_debugger.variant("GotoDefinitionGlobal", 18, [name])]),
                                                              /* [] */0
                                                            ])]));
                                          }));
                            } else {
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 1, [/* Load */0]),
                                                /* [] */0
                                              ])]));
                            }
                          })]),
                    /* [] */0
                  ]);
      
    }
  } else {
    switch (command.tag | 0) {
      case /* SearchAbout */0 :
          var normalization = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Searching through definitions [" + (Command$AgdaMode.Normalization.toString(normalization) + "]"), "expression to infer:", ""), (function (param) {
                                              return /* Cancelled */0;
                                            })), (function (expr) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 2, [
                                                            normalization,
                                                            expr
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* InferType */1 :
          var normalization$1 = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                              var index = param[1];
                                              var goal = param[0];
                                              if (Goal$AgdaMode.isEmpty(goal)) {
                                                return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Infer type [" + (Command$AgdaMode.Normalization.toString(normalization$1) + "]"), "expression to infer:", ""), (function (param) {
                                                                  return /* Cancelled */0;
                                                                })), (function (expr) {
                                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                        /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* InferType */Caml_chrome_debugger.variant("InferType", 3, [
                                                                                normalization$1,
                                                                                expr,
                                                                                index
                                                                              ])]),
                                                                        /* [] */0
                                                                      ]);
                                                            }));
                                              } else {
                                                var expr = Goal$AgdaMode.getContent(goal);
                                                return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* InferType */Caml_chrome_debugger.variant("InferType", 3, [
                                                                          normalization$1,
                                                                          expr,
                                                                          index
                                                                        ])]),
                                                                  /* [] */0
                                                                ])]));
                                              }
                                            })), (function (param) {
                                          return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Infer type [" + (Command$AgdaMode.Normalization.toString(normalization$1) + "]"), "expression to infer:", ""), (function (param) {
                                                            return /* Cancelled */0;
                                                          })), (function (expr) {
                                                        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* InferTypeGlobal */Caml_chrome_debugger.variant("InferTypeGlobal", 4, [
                                                                          normalization$1,
                                                                          expr
                                                                        ])]),
                                                                  /* [] */0
                                                                ]);
                                                      }));
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* ModuleContents */2 :
          var normalization$2 = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.flatMapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Module contents [" + (Command$AgdaMode.Normalization.toString(normalization$2) + "]"), "module name:", ""), (function (param) {
                                              return /* Cancelled */0;
                                            })), (function (expr) {
                                          return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                                            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 5, [
                                                                              normalization$2,
                                                                              expr,
                                                                              param[1]
                                                                            ])]),
                                                                      /* [] */0
                                                                    ]);
                                                          })), (function (param) {
                                                        return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                          /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ModuleContentsGlobal */Caml_chrome_debugger.variant("ModuleContentsGlobal", 6, [
                                                                                  normalization$2,
                                                                                  expr
                                                                                ])]),
                                                                          /* [] */0
                                                                        ])]));
                                                      }));
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* ComputeNormalForm */3 :
          var computeMode = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return Instance__TextEditors$AgdaMode.handleOutOfGoal($$Promise.flatMapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                              var index = param[1];
                                              var goal = param[0];
                                              if (Goal$AgdaMode.isEmpty(goal)) {
                                                return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Compute normal form", "expression to normalize:", ""), (function (param) {
                                                                  return /* Cancelled */0;
                                                                })), (function (expr) {
                                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                        /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 7, [
                                                                                computeMode,
                                                                                expr,
                                                                                index
                                                                              ])]),
                                                                        /* [] */0
                                                                      ]);
                                                            }));
                                              } else {
                                                var expr = Goal$AgdaMode.getContent(goal);
                                                return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 7, [
                                                                          computeMode,
                                                                          expr,
                                                                          index
                                                                        ])]),
                                                                  /* [] */0
                                                                ])]));
                                              }
                                            })), (function (param) {
                                          return $$Promise.mapOk($$Promise.mapError(Curry._3(instance[/* view */2][/* inquire */4], "Compute normal form", "expression to normalize:", ""), (function (param) {
                                                            return /* Cancelled */0;
                                                          })), (function (expr) {
                                                        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* ComputeNormalFormGlobal */Caml_chrome_debugger.variant("ComputeNormalFormGlobal", 8, [
                                                                          computeMode,
                                                                          expr
                                                                        ])]),
                                                                  /* [] */0
                                                                ]);
                                                      }));
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* GoalType */4 :
          var normalization$3 = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* GoalType */Caml_chrome_debugger.variant("GoalType", 13, [
                                                            normalization$3,
                                                            param[1]
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Context */5 :
          var normalization$4 = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* Context */Caml_chrome_debugger.variant("Context", 14, [
                                                            normalization$4,
                                                            param[1]
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* GoalTypeAndContext */6 :
          var normalization$5 = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 15, [
                                                            normalization$5,
                                                            param[1]
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* GoalTypeAndInferredType */7 :
          var normalization$6 = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            return $$Promise.mapOk($$Promise.flatMapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), Instance__TextEditors$AgdaMode.getGoalIndex), (function (param) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 2, [/* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 16, [
                                                            normalization$6,
                                                            param[0],
                                                            param[1]
                                                          ])]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* InputSymbol */8 :
          var symbol = command[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                            var enabled = atom.config.get("agda-mode.inputMethod");
                            if (enabled) {
                              return $$Promise.map($$Promise.flatMap(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                                                switch (symbol) {
                                                  case /* Ordinary */0 :
                                                      return $$Promise.flatMap(Curry._1(instance[/* view */2][/* activate */0], /* () */0), (function (param) {
                                                                    return Curry._1(instance[/* view */2][/* activateInputMethod */9], true);
                                                                  }));
                                                  case /* CurlyBracket */1 :
                                                      return Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "{");
                                                  case /* Bracket */2 :
                                                      return Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "[");
                                                  case /* Parenthesis */3 :
                                                      return Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "(");
                                                  case /* DoubleQuote */4 :
                                                      return Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "\"");
                                                  case /* SingleQuote */5 :
                                                      return Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "'");
                                                  case /* BackQuote */6 :
                                                      return Curry._1(instance[/* view */2][/* interceptAndInsertKey */10], "`");
                                                  case /* Abort */7 :
                                                      return Curry._1(instance[/* view */2][/* activateInputMethod */9], false);
                                                  
                                                }
                                              })), (function (param) {
                                            return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]);
                                          }));
                            } else {
                              Editors$AgdaMode.Focus.get(instance[/* editors */1]).insertText("\\");
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                            }
                          })]),
                    /* [] */0
                  ]);
      case /* Jump */9 :
          var match = command[0];
          if (match.tag) {
            var index = match[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                              var positions = Instance__Goals$AgdaMode.getPositions(instance);
                              Editors$AgdaMode.Focus.on(/* Source */0, instance[/* editors */1]);
                              Rebase.$$Option.forEach((function (position) {
                                      instance[/* editors */1][/* source */1].setCursorBufferPosition(position);
                                      return /* () */0;
                                    }), Rebase.$$Array.get(positions, index));
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                            })]),
                      /* [] */0
                    ]);
          } else {
            var range = match[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                              var filePath = Instance__TextEditors$AgdaMode.getPath(instance);
                              var match;
                              if (range) {
                                var match$1 = range[0];
                                if (match$1 !== undefined) {
                                  var path = match$1;
                                  var match$2 = path === filePath;
                                  match = /* tuple */[
                                    true,
                                    match$2 ? undefined : path
                                  ];
                                } else {
                                  match = /* tuple */[
                                    true,
                                    undefined
                                  ];
                                }
                              } else {
                                match = /* tuple */[
                                  false,
                                  undefined
                                ];
                              }
                              var otherFilePath = match[1];
                              if (match[0]) {
                                if (otherFilePath !== undefined) {
                                  var match$3;
                                  if (range) {
                                    var match$4 = Rebase.$$Array.get(range[1], 0);
                                    if (match$4 !== undefined) {
                                      var i = match$4;
                                      match$3 = /* tuple */[
                                        i[/* start */0][/* line */1] - 1 | 0,
                                        i[/* start */0][/* col */2] - 1 | 0
                                      ];
                                    } else {
                                      match$3 = /* tuple */[
                                        0,
                                        0
                                      ];
                                    }
                                  } else {
                                    match$3 = /* tuple */[
                                      0,
                                      0
                                    ];
                                  }
                                  var option = {
                                    initialLine: match$3[0],
                                    initialColumn: match$3[1],
                                    split: "right",
                                    activatePane: true,
                                    activateItem: true,
                                    pending: false,
                                    searchAllPanes: true,
                                    location: undefined
                                  };
                                  return $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(atom.workspace.open(otherFilePath, option))), (function (param) {
                                                if (param.tag) {
                                                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Cancelled */0]);
                                                } else {
                                                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]);
                                                }
                                              }));
                                } else {
                                  var ranges = Type__Location$AgdaMode.$$Range.toAtomRanges(range);
                                  if (Rebase.$$Option.isSome(Rebase.$$Array.get(ranges, 0))) {
                                    setTimeout((function (param) {
                                            instance[/* editors */1][/* source */1].setSelectedBufferRanges(ranges);
                                            return /* () */0;
                                          }), 0);
                                  }
                                  return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                                }
                              } else {
                                return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* [] */0]));
                              }
                            })]),
                      /* [] */0
                    ]);
          }
      
    }
  }
}

var Goals = 0;

var Highlightings = 0;

var Connections = 0;

var TextEditors = 0;

exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handle = handle;
/* Promise Not a pure module */
