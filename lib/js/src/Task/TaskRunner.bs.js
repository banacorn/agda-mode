// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Log$AgdaMode = require("../Log.bs.js");
var Request$AgdaMode = require("../Request.bs.js");
var Connection$AgdaMode = require("../Connection.bs.js");
var Task__Error$AgdaMode = require("./Task__Error.bs.js");
var Task__Command$AgdaMode = require("./Task__Command.bs.js");
var Task__Response$AgdaMode = require("./Task__Response.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Instance__Connections$AgdaMode = require("../Instance/Instance__Connections.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("../Instance/Instance__Highlightings.bs.js");

function sendRequest(instance, request) {
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  $$Promise.getOk($$Promise.tapError(Instance__Connections$AgdaMode.connect(instance), (function (e) {
              return Curry._1(resolve, {
                          TAG: 1,
                          _0: e,
                          [Symbol.for("name")]: "Error"
                        });
            })), (function (connection) {
          if (Request$AgdaMode.isLoad(request) && connection.resetLogOnLoad) {
            Connection$AgdaMode.resetLog(connection);
          }
          Log$AgdaMode.createEntry(request, connection.log);
          var version = connection.metadata.version;
          var filepath = Instance__TextEditors$AgdaMode.getPath(instance);
          var inputForAgda = Request$AgdaMode.toAgdaReadableString(version, filepath, request);
          var responseTasks = {
            contents: /* [] */0
          };
          var parseErrors = {
            contents: /* [] */0
          };
          var onResponse = function (error) {
            if (error.TAG) {
              return Curry._1(resolve, {
                          TAG: 1,
                          _0: {
                            TAG: 1,
                            _0: {
                              TAG: 2,
                              _0: error._0,
                              [Symbol.for("name")]: "Process"
                            },
                            [Symbol.for("name")]: "ConnectionError"
                          },
                          [Symbol.for("name")]: "Error"
                        });
            }
            var match = error._0;
            if (!match) {
              if (Rebase.List.isEmpty(parseErrors.contents)) {
                return Curry._1(resolve, {
                            TAG: 0,
                            _0: responseTasks.contents,
                            [Symbol.for("name")]: "Ok"
                          });
              } else {
                return Curry._1(resolve, {
                            TAG: 1,
                            _0: {
                              TAG: 0,
                              _0: Rebase.$$Array.fromList(parseErrors.contents),
                              [Symbol.for("name")]: "ParseError"
                            },
                            [Symbol.for("name")]: "Error"
                          });
              }
            }
            var response = match._0;
            if (response.TAG) {
              parseErrors.contents = {
                hd: response._0,
                tl: parseErrors.contents
              };
              return ;
            }
            var tasks = Task__Response$AgdaMode.handle(response._0);
            responseTasks.contents = Rebase.List.concat(tasks, responseTasks.contents);
            
          };
          Curry._1(Connection$AgdaMode.send(inputForAgda, connection).on, onResponse);
          
        }));
  return match[0];
}

function execute(tasks, instance) {
  var handleCallback = function (result) {
    var handleError = function (x) {
      return $$Promise.map(x, (function (tasks) {
                    if (tasks.TAG) {
                      return Task__Error$AgdaMode.handle(tasks._0);
                    } else {
                      return tasks._0;
                    }
                  }));
    };
    var filterDispatchCommand = function (tasks) {
      var otherTasks = [];
      var commands = [];
      var go = function (_param) {
        while(true) {
          var param = _param;
          if (!param) {
            return ;
          }
          var cmd = param.hd;
          if (typeof cmd === "number") {
            otherTasks.push(cmd);
            _param = param.tl;
            continue ;
          }
          if (cmd.TAG === /* DispatchCommand */7) {
            commands.push(cmd._0);
            _param = param.tl;
            continue ;
          }
          otherTasks.push(cmd);
          _param = param.tl;
          continue ;
        };
      };
      go(tasks);
      return [
              otherTasks,
              commands
            ];
    };
    var executeTasks = function (tasks) {
      var match = filterDispatchCommand(tasks);
      var commands = match[1];
      return $$Promise.map(execute(match[0], instance), (function (newCommands) {
                    return Rebase.$$Array.concat(newCommands, commands);
                  }));
    };
    return $$Promise.flatMap(handleError(result), executeTasks);
  };
  var executeTask = function (task) {
    if (typeof task === "number") {
      switch (task) {
        case /* Disconnect */0 :
            return $$Promise.map(Instance__Connections$AgdaMode.disconnect(instance), (function (param) {
                          return [];
                        }));
        case /* Activate */1 :
            return $$Promise.map(Curry._1(instance.view.activate, undefined), (function (param) {
                          return [];
                        }));
        case /* Deactivate */2 :
            return $$Promise.map(Curry._1(instance.view.deactivate, undefined), (function (param) {
                          return [];
                        }));
        
      }
    } else {
      switch (task.TAG | 0) {
        case /* WithInstance */0 :
            return handleCallback(Curry._1(task._0, instance));
        case /* WithConnection */1 :
            return handleCallback($$Promise.flatMapOk(Instance__Connections$AgdaMode.connect(instance), task._0));
        case /* Display */2 :
            return $$Promise.map(Curry._3(instance.view.display, task._0, task._1, task._2), (function (param) {
                          return [];
                        }));
        case /* Inquire */3 :
            return handleCallback($$Promise.mapOk($$Promise.mapError(Curry._3(instance.view.inquire, task._0, task._1, task._2), (function (param) {
                                  return /* Cancelled */0;
                                })), task._3));
        case /* Editor */4 :
            return handleCallback($$Promise.mapOk($$Promise.mapError($$Promise.Js.toResult($$Promise.Js.fromBsPromise(instance.editors.source.save())), (function (param) {
                                  return /* Cancelled */0;
                                })), (function (param) {
                              return /* [] */0;
                            })));
        case /* Goals */5 :
            var callback = task._0;
            if (typeof callback === "number") {
              if (callback === /* JumpToTheNext */0) {
                Rebase.$$Option.forEach((function (position) {
                        instance.editors.source.setCursorBufferPosition(position);
                        
                      }), Instance__Goals$AgdaMode.getNextGoalPosition(instance));
                return $$Promise.resolved([]);
              }
              Rebase.$$Option.forEach((function (position) {
                      instance.editors.source.setCursorBufferPosition(position);
                      
                    }), Instance__Goals$AgdaMode.getPreviousGoalPosition(instance));
              return $$Promise.resolved([]);
            } else {
              if (!callback.TAG) {
                return handleCallback($$Promise.mapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), callback._0));
              }
              var handler = callback._1;
              return handleCallback($$Promise.map($$Promise.mapOk(Instance__TextEditors$AgdaMode.getPointedGoal(instance), callback._0), (function (others) {
                                if (!others.TAG) {
                                  return others;
                                }
                                var match = others._0;
                                if (typeof match === "number" && match !== 0) {
                                  return {
                                          TAG: 0,
                                          _0: Curry._1(handler, undefined),
                                          [Symbol.for("name")]: "Ok"
                                        };
                                } else {
                                  return others;
                                }
                              })));
            }
        case /* Highlightings */6 :
            return Instance__Highlightings$AgdaMode.execute(instance, task._0);
        case /* DispatchCommand */7 :
            return $$Promise.resolved([task._0]);
        case /* SendRequest */8 :
            var request = task._0;
            return Instance__TextEditors$AgdaMode.restoreCursorPosition((function (param) {
                          return handleCallback(sendRequest(instance, request));
                        }), instance);
        
      }
    }
  };
  var runEachTask = function (param) {
    if (!param) {
      return $$Promise.resolved([]);
    }
    var tasks = param.tl;
    return $$Promise.flatMap(executeTask(param.hd), (function (xs) {
                  return $$Promise.map(runEachTask(tasks), (function (xss) {
                                return Rebase.$$Array.concat(xs, xss);
                              }));
                }));
  };
  return runEachTask(Rebase.List.fromArray(tasks));
}

function dispatchCommand(command, instance) {
  var dispatchCommands = function (param) {
    if (!param) {
      return $$Promise.resolved(undefined);
    }
    var xs = param.tl;
    return $$Promise.flatMap(dispatchCommand(param.hd, instance), (function (param) {
                  return dispatchCommands(xs);
                }));
  };
  var before = function (param) {
    Instance__TextEditors$AgdaMode.startCheckpoint(command, instance);
    return Curry._1(instance.view.updateIsPending, true);
  };
  var after = function (param) {
    Instance__TextEditors$AgdaMode.endCheckpoint(instance);
    return Curry._1(instance.view.updateIsPending, false);
  };
  var tasks = Rebase.$$Array.fromList(Task__Command$AgdaMode.handle(command));
  return $$Promise.flatMap($$Promise.flatMap($$Promise.map($$Promise.tap($$Promise.flatMap(before(undefined), (function (param) {
                                return execute(tasks, instance);
                              })), (function (param) {
                            return Curry._1(instance.onDispatch.emit, undefined);
                          })), Rebase.List.fromArray), dispatchCommands), after);
}

exports.sendRequest = sendRequest;
exports.execute = execute;
exports.dispatchCommand = dispatchCommand;
/* Promise Not a pure module */
