// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var C$AgdaMode = require("./C.bs.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Link$AgdaMode = require("./Link.bs.js");
var Util$AgdaMode = require("./Util.bs.js");
var Literal$AgdaMode = require("./Literal.bs.js");
var CommonPrim$AgdaMode = require("./CommonPrim.bs.js");

function appView(expr) {
  var arg = function (expr) {
    switch (expr.tag | 0) {
      case 8 : 
          return CommonPrim$AgdaMode.Arg[/* setArgInfoHiding */2](/* Hidden */0, CommonPrim$AgdaMode.Arg[/* default */0](expr[1]));
      case 9 : 
          return CommonPrim$AgdaMode.Arg[/* setArgInfoHiding */2](/* Instance */Block.simpleVariant("Instance", [/* NoOverlap */1]), CommonPrim$AgdaMode.Arg[/* default */0](expr[1]));
      default:
        return CommonPrim$AgdaMode.Arg[/* default */0](CommonPrim$AgdaMode.Named[/* unnamed */1](expr));
    }
  };
  switch (expr.tag | 0) {
    case 4 : 
        var match = expr[1];
        if (match) {
          return /* tuple */[
                  match[0],
                  List.map(arg, match[1])
                ];
        } else {
          return /* tuple */[
                  expr,
                  /* [] */0
                ];
        }
    case 5 : 
        var param = appView(expr[1]);
        var arg$1 = expr[2];
        return /* tuple */[
                param[0],
                List.append(param[1], /* :: */Block.simpleVariant("::", [
                        arg$1,
                        /* [] */0
                      ]))
              ];
    default:
      return /* tuple */[
              expr,
              /* [] */0
            ];
  }
}

var levelToString = (n => n.toString().split('').map(x => String.fromCharCode(0x2080 + parseInt(x))).join(
      ''));

var component = ReasonReact.statelessComponent("Expr");

function make(value, _, _$1) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                switch (value.tag | 0) {
                  case 0 : 
                      return ReasonReact.element(undefined, undefined, C$AgdaMode.QName[/* make */1](value[0], /* array */[]));
                  case 1 : 
                      return ReasonReact.element(undefined, undefined, Literal$AgdaMode.make(value[0], /* array */[]));
                  case 5 : 
                      var match = appView(value);
                      var items_000 = ReasonReact.element(undefined, undefined, make(match[0], undefined, /* array */[]));
                      var items_001 = List.map((function (value) {
                              return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Arg[/* make */4](undefined, value, (function (prec, value) {
                                                return ReasonReact.element(undefined, undefined, CommonPrim$AgdaMode.Named[/* make */4](prec, value, (function (prec, value) {
                                                                  return ReasonReact.element(undefined, undefined, make(value, prec, /* array */[]));
                                                                })));
                                              })));
                            }), match[1]);
                      var items = /* :: */Block.simpleVariant("::", [
                          items_000,
                          items_001
                        ]);
                      return Util$AgdaMode.sepBy(" ", items);
                  case 15 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Set"]));
                  case 16 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Prop"]));
                  case 17 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Set" + Curry._1(levelToString, value[1])]));
                  case 18 : 
                      return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(value[0], true, true, /* array */["Prop" + Curry._1(levelToString, value[1])]));
                  default:
                    return React.createElement("span", undefined, "unimplemented");
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

var Expr = /* module */Block.localModule([
    "appView",
    "levelToString",
    "component",
    "make"
  ], [
    appView,
    levelToString,
    component,
    make
  ]);

exports.Expr = Expr;
/* levelToString Not a pure module */
