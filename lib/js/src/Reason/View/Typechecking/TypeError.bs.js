// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Name$AgdaMode = require("../Syntax/Name.bs.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Range$AgdaMode = require("../Syntax/Range.bs.js");
var Concrete$AgdaMode = require("../Syntax/Concrete.bs.js");

var component = ReasonReact.statelessComponent("TypeError");

function make(typeError, rawString, _) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function () {
                console.log(rawString);
                switch (typeError.tag | 0) {
                  case 0 : 
                  case 1 : 
                      return React.createElement("div", undefined, typeError[0]);
                  case 2 : 
                      return React.createElement("div", undefined, "The target of a constructor must be the datatype applied to its parameters, ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[0], /* array */[])), " isn't");
                  case 3 : 
                      var dataOrRecord = typeError[2];
                      var type_ = dataOrRecord !== undefined ? (
                          dataOrRecord ? "(record) " : "(datatype) "
                        ) : "";
                      return React.createElement("div", undefined, "Duplicate definition of module ", ReasonReact.element(undefined, undefined, Name$AgdaMode.Name[/* make */4](typeError[1], /* array */[])), React.createElement("br", undefined), "Previous definition of " + (type_ + "module "), ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](typeError[0], /* array */[])));
                  case 4 : 
                      return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[0], /* array */[])), " should be a function type, but it isn't");
                  case 5 : 
                      return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[0], /* array */[])), " should be a sort, but it isn't");
                  case 6 : 
                      return React.createElement("div", undefined, "expected : ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[2], /* array */[])), React.createElement("br", undefined), "  actual : ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[1], /* array */[])), React.createElement("br", undefined), " of type : ", ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Expr[/* make */0](typeError[3], /* array */[])), React.createElement("br", undefined));
                  case 7 : 
                      return React.createElement("div", undefined, "Multiple definitions of ", ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](typeError[0], /* array */[])), React.createElement("br", undefined), "Previous definition at ", ReasonReact.element(undefined, undefined, Range$AgdaMode.make(typeError[1], undefined, /* array */[])));
                  case 8 : 
                      var tel = typeError[2];
                      var moduleName = typeError[0];
                      if (tel !== undefined) {
                        return React.createElement("div", undefined, "The arguments to ", ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](moduleName, /* array */[])), " do not fit the telescope ", React.createElement("br", undefined), ReasonReact.element(undefined, undefined, Concrete$AgdaMode.Telescope[/* make */0](tel, /* array */[])));
                      } else {
                        return React.createElement("div", undefined, "The module ", ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](moduleName, /* array */[])), " is not parameterized, but is being applied to arguments");
                      }
                  case 9 : 
                      return React.createElement("div", undefined, "The right-hand side can only be omitted if there is an absurd pattern, () or {}, in the left-hand side.");
                  case 10 : 
                      var forgetSpaceColon = function (name) {
                        var __x = Name$AgdaMode.QName[/* toString */0](name);
                        return Rebase.$$String[/* includes */2](__x, ":");
                      };
                      var forgetSpaceArrow = function (name) {
                        var __x = Name$AgdaMode.QName[/* toString */0](name);
                        return Rebase.$$String[/* includes */2](__x, "->");
                      };
                      var pair = function (param) {
                        var suggestions = param[1];
                        var name = param[0];
                        var colon = forgetSpaceColon(name);
                        var arrow = forgetSpaceArrow(name);
                        var hasSuggestions = Rebase.List[/* length */19](suggestions) !== 0;
                        var shouldRender = colon || arrow || hasSuggestions;
                        return React.createElement("li", undefined, ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](name, /* array */[])), " is not in scope", shouldRender ? React.createElement("p", undefined, colon ? React.createElement(React.Fragment, undefined, "did you forget space around the ':'?") : null, arrow ? React.createElement(React.Fragment, undefined, "did you forget space around the '->'?") : null, hasSuggestions ? React.createElement(React.Fragment, undefined, "did you mean ", Util$AgdaMode.sepBy(" or ", Rebase.List[/* map */0]((function (value) {
                                                          return ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](value, /* array */[]));
                                                        }), suggestions)), " ?") : null) : null);
                      };
                      return ReactDOMRe.createElementVariadic("ul", undefined, Rebase.$$Array[/* fromList */13](Rebase.List[/* map */0](pair, typeError[0])));
                  case 11 : 
                      return React.createElement("div", undefined, "No such module ", ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](typeError[0], /* array */[])));
                  case 12 : 
                      return React.createElement("div", undefined, "Ambiguous name ", ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](typeError[0], /* array */[])), ".", React.createElement("br", undefined), "It could refer to any one of ", React.createElement("br", undefined), ReactDOMRe.createElementVariadic("ul", undefined, Rebase.$$Array[/* fromList */13](Rebase.List[/* map */0]((function (value) {
                                                return React.createElement("li", undefined, "    ", ReasonReact.element(undefined, undefined, Name$AgdaMode.QName[/* make */5](value, /* array */[])));
                                              }), typeError[1]))));
                  case 13 : 
                      return React.createElement("div", undefined, JSON.stringify(typeError[0]));
                  
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
