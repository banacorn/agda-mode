// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Tab$AgdaMode = require("./View/Tab.bs.js");
var Async$AgdaMode = require("./Util/Async.bs.js");
var Event$AgdaMode = require("./Util/Event.bs.js");
var Panel$AgdaMode = require("./View/Panel/Panel.bs.js");
var Editors$AgdaMode = require("./Editors.bs.js");
var Settings$AgdaMode = require("./View/Settings/Settings.bs.js");
var MiniEditor$AgdaMode = require("./View/MiniEditor.bs.js");

function hook(f, handle) {
  f[0] = handle;
  return /* () */0;
}

function make(param) {
  var activatePanel = Event$AgdaMode.make(/* () */0);
  var updateHeader = Event$AgdaMode.make(/* () */0);
  var updateBody = Event$AgdaMode.make(/* () */0);
  var updateMode = Event$AgdaMode.make(/* () */0);
  var updateMountTo = Event$AgdaMode.make(/* () */0);
  var toggleDocking = Event$AgdaMode.make(/* () */0);
  var updateConnection = Event$AgdaMode.make(/* () */0);
  var inquireConnection = Event$AgdaMode.make(/* () */0);
  var onInquireConnection = Event$AgdaMode.make(/* () */0);
  var onInquireQuery = Event$AgdaMode.make(/* () */0);
  var inquireQuery = Event$AgdaMode.make(/* () */0);
  var activateSettingsView = Event$AgdaMode.make(/* () */0);
  var onSettingsView = Event$AgdaMode.make(/* () */0);
  var navigateSettingsView = Event$AgdaMode.make(/* () */0);
  var destroy = Event$AgdaMode.make(/* () */0);
  var interceptAndInsertKey = Event$AgdaMode.make(/* () */0);
  var activateInputMethod = Event$AgdaMode.make(/* () */0);
  return /* record */Block.record([
            "updateHeader",
            "updateBody",
            "updateMode",
            "toggleDocking",
            "updateMountTo",
            "activatePanel",
            "updateConnection",
            "inquireConnection",
            "onInquireConnection",
            "onInquireQuery",
            "inquireQuery",
            "activateSettingsView",
            "onSettingsView",
            "navigateSettingsView",
            "destroy",
            "activateInputMethod",
            "interceptAndInsertKey"
          ], [
            updateHeader,
            updateBody,
            updateMode,
            toggleDocking,
            updateMountTo,
            activatePanel,
            updateConnection,
            inquireConnection,
            onInquireConnection,
            onInquireQuery,
            inquireQuery,
            activateSettingsView,
            onSettingsView,
            navigateSettingsView,
            destroy,
            activateInputMethod,
            interceptAndInsertKey
          ]);
}

var Handles = /* module */Block.localModule([
    "hook",
    "make"
  ], [
    hook,
    make
  ]);

function createElement(param) {
  var element = document.createElement("article");
  element.classList.add("agda-mode");
  atom.workspace.addBottomPanel({
        item: element,
        visible: true
      });
  return element;
}

function initialState(param) {
  return /* record */Block.record([
            "header",
            "body",
            "maxHeight",
            "mountAt",
            "activated",
            "settingsView",
            "mode"
          ], [
            Block.record([
                "text",
                "style"
              ], [
                "",
                0
              ]),
            0,
            170,
            Block.variant("Bottom", 0, [createElement(/* () */0)]),
            false,
            undefined,
            0
          ]);
}

function mountPanel(editors, self, mountTo) {
  var createTab = function (param) {
    return Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                  return "[Agda Mode] " + editors[/* source */1].getTitle();
                }), (function (param, param$1, previousItem) {
                  var pane = atom.workspace.paneForItem(previousItem);
                  pane.activate();
                  pane.activateItem(previousItem);
                  return /* () */0;
                }), undefined, (function (param) {
                  return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [/* ToBottom */0]));
                }), undefined, /* () */0);
  };
  var match = self[/* state */1][/* mountAt */3];
  if (match.tag) {
    if (mountTo) {
      return /* () */0;
    } else {
      Curry._1(match[0][/* kill */1], /* () */0);
      return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 4, [/* Bottom */Block.variant("Bottom", 0, [createElement(/* () */0)])]));
    }
  } else if (mountTo) {
    return Curry._1(self[/* send */3], /* UpdateMountAt */Block.variant("UpdateMountAt", 4, [/* Pane */Block.variant("Pane", 1, [createTab(/* () */0)])]));
  } else {
    return /* () */0;
  }
}

function reducer(editors, handles, action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          var match = state[/* mountAt */3];
          if (match.tag) {
            return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                          return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [/* ToBottom */0]));
                        })]);
          } else {
            return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                          return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [/* ToPane */1]));
                        })]);
          }
      case 1 : 
          var match$1 = state[/* mountAt */3];
          if (match$1.tag) {
            var tab = match$1[0];
            return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                      /* record */Block.record([
                          "header",
                          "body",
                          "maxHeight",
                          "mountAt",
                          "activated",
                          "settingsView",
                          "mode"
                        ], [
                          state[/* header */0],
                          state[/* body */1],
                          state[/* maxHeight */2],
                          state[/* mountAt */3],
                          true,
                          state[/* settingsView */5],
                          state[/* mode */6]
                        ]),
                      (function (param) {
                          return Curry._1(tab[/* activate */2], /* () */0);
                        })
                    ]);
          } else {
            return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                          "header",
                          "body",
                          "maxHeight",
                          "mountAt",
                          "activated",
                          "settingsView",
                          "mode"
                        ], [
                          state[/* header */0],
                          state[/* body */1],
                          state[/* maxHeight */2],
                          state[/* mountAt */3],
                          true,
                          state[/* settingsView */5],
                          state[/* mode */6]
                        ])]);
          }
      case 2 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        false,
                        state[/* settingsView */5],
                        state[/* mode */6]
                      ])]);
      
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var sort = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (_self) {
                        return Editors$AgdaMode.Focus[/* on */1](sort, editors);
                      })]);
      case 1 : 
          var ref = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (_self) {
                        return MiniEditor$AgdaMode.Model[/* setRef */4](ref, editors[/* query */2]);
                      })]);
      case 2 : 
          var open_ = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                        var match = state[/* settingsView */5];
                        if (match !== undefined) {
                          if (open_) {
                            return Event$AgdaMode.resolve(true, handles[/* onSettingsView */12]);
                          } else {
                            Curry._1(match[/* kill */1], /* () */0);
                            Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 3, [undefined]));
                            return Event$AgdaMode.resolve(false, handles[/* onSettingsView */12]);
                          }
                        } else if (open_) {
                          var tab = Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                                  return "[Settings] " + editors[/* source */1].getTitle();
                                }), (function (element, param, param$1) {
                                  ReactDom.render(ReasonReact.element(undefined, undefined, Settings$AgdaMode.make(handles[/* inquireConnection */7], handles[/* onInquireConnection */8], handles[/* updateConnection */6], handles[/* navigateSettingsView */13], /* array */[])), element);
                                  return Event$AgdaMode.resolve(true, handles[/* onSettingsView */12]);
                                }), undefined, (function (element) {
                                  Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 2, [false]));
                                  ReactDom.unmountComponentAtNode(element);
                                  return Event$AgdaMode.resolve(false, handles[/* onSettingsView */12]);
                                }), undefined, /* () */0);
                          return Curry._1(self[/* send */3], /* UpdateSettingsView */Block.variant("UpdateSettingsView", 3, [tab]));
                        } else {
                          return 0;
                        }
                      })]);
      case 3 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* activated */4],
                        action[0],
                        state[/* mode */6]
                      ])]);
      case 4 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        action[0],
                        state[/* activated */4],
                        state[/* settingsView */5],
                        state[/* mode */6]
                      ])]);
      case 5 : 
          var mountTo = action[0];
          return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                        return mountPanel(editors, self, mountTo);
                      })]);
      case 6 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "mode"
                      ], [
                        action[0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* activated */4],
                        state[/* settingsView */5],
                        state[/* mode */6]
                      ])]);
      case 7 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "mode"
                      ], [
                        state[/* header */0],
                        action[0],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* activated */4],
                        state[/* settingsView */5],
                        state[/* mode */6]
                      ])]);
      case 8 : 
          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                        "header",
                        "body",
                        "maxHeight",
                        "mountAt",
                        "activated",
                        "settingsView",
                        "mode"
                      ], [
                        state[/* header */0],
                        state[/* body */1],
                        state[/* maxHeight */2],
                        state[/* mountAt */3],
                        state[/* activated */4],
                        state[/* settingsView */5],
                        action[0]
                      ])]);
      
    }
  }
}

var component = ReasonReact.reducerComponent("View");

function make$1(editors, handles, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (activate) {
                              return Curry._1(self[/* send */3], activate ? /* Activate */1 : /* Deactivate */2);
                            }))(handles[/* activatePanel */5]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (header) {
                              return Curry._1(self[/* send */3], /* UpdateHeader */Block.variant("UpdateHeader", 6, [header]));
                            }))(handles[/* updateHeader */0]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (body) {
                              return Curry._1(self[/* send */3], /* UpdateBody */Block.variant("UpdateBody", 7, [body]));
                            }))(handles[/* updateBody */1]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (where) {
                              return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [where]));
                            }))(handles[/* updateMountTo */4]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                              return Curry._1(self[/* send */3], /* ToggleDocking */0);
                            }))(handles[/* toggleDocking */3]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (mode) {
                              return Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 8, [mode]));
                            }))(handles[/* updateMode */2]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (payload) {
                              console.log(payload);
                              Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 8, [/* Query */1]));
                              return Curry._1(self[/* send */3], /* Focus */Block.variant("Focus", 0, [/* Query */1]));
                            }))(handles[/* inquireQuery */10]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (_result) {
                              Curry._1(self[/* send */3], /* UpdateMode */Block.variant("UpdateMode", 8, [/* Display */0]));
                              return Curry._1(self[/* send */3], /* Focus */Block.variant("Focus", 0, [/* Source */0]));
                            }))(handles[/* onInquireQuery */9]));
                Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (param) {
                              console.log("destroy!");
                              return /* () */0;
                            }))(handles[/* destroy */14]));
                return Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (activate) {
                                    return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 2, [activate]));
                                  }))(handles[/* activateSettingsView */11]));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var mountAt = match[/* mountAt */3];
                var element;
                element = mountAt.tag ? mountAt[0][/* element */0] : mountAt[0];
                var hidden;
                hidden = mountAt.tag ? false : !match[/* activated */4];
                return React.createElement(React.Fragment, undefined, ReasonReact.element(undefined, undefined, Panel$AgdaMode.make(editors, element, (function (mountTo) {
                                      return Curry._1(self[/* send */3], /* MountTo */Block.variant("MountTo", 5, [mountTo]));
                                    }), match[/* body */1], match[/* header */0], mountAt, match[/* mode */6], hidden, handles[/* onInquireQuery */9], (function (focused) {
                                      return Curry._1(self[/* send */3], focused ? /* Focus */Block.variant("Focus", 0, [/* Query */1]) : /* Focus */Block.variant("Focus", 0, [/* Source */0]));
                                    }), (function (ref) {
                                      return Curry._1(self[/* send */3], /* SetQueryRef */Block.variant("SetQueryRef", 1, [ref]));
                                    }), editors[/* query */2][/* placeholder */1], editors[/* query */2][/* value */0], handles[/* interceptAndInsertKey */16], handles[/* activateInputMethod */15], handles[/* activateSettingsView */11], (function (status) {
                                      return Curry._1(self[/* send */3], /* ToggleSettingsTab */Block.variant("ToggleSettingsTab", 2, [status]));
                                    }), /* array */[])));
              }),
            initialState,
            component[/* retainedProps */11],
            (function (param, param$1) {
                return reducer(editors, handles, param, param$1);
              }),
            component[/* jsElementWrapped */13]
          ]);
}

function initialize(editors) {
  var element = document.createElement("article");
  var handles = make(/* () */0);
  var component = ReasonReact.element(undefined, undefined, make$1(editors, handles, /* array */[]));
  ReactDom.render(component, element);
  return handles;
}

function update(text, style, body, handles) {
  Event$AgdaMode.resolve(/* record */Block.record([
          "text",
          "style"
        ], [
          text,
          style
        ]), handles[/* updateHeader */0]);
  Event$AgdaMode.resolve(body, handles[/* updateBody */1]);
  return Async$AgdaMode.resolve(/* () */0);
}

function inquire(text, placeholder, value, handles) {
  Event$AgdaMode.resolve(true, handles[/* activatePanel */5]);
  Event$AgdaMode.resolve(/* record */Block.record([
          "text",
          "style"
        ], [
          text,
          0
        ]), handles[/* updateHeader */0]);
  var promise = Event$AgdaMode.once(handles[/* onInquireQuery */9]);
  Event$AgdaMode.resolve(/* tuple */[
        placeholder,
        value
      ], handles[/* inquireQuery */10]);
  return promise;
}

function toggleDocking(handles) {
  Event$AgdaMode.resolve(/* () */0, handles[/* toggleDocking */3]);
  return Async$AgdaMode.resolve(/* () */0);
}

var Event = 0;

exports.Event = Event;
exports.Handles = Handles;
exports.createElement = createElement;
exports.initialState = initialState;
exports.mountPanel = mountPanel;
exports.reducer = reducer;
exports.component = component;
exports.make = make$1;
exports.initialize = initialize;
exports.update = update;
exports.inquire = inquire;
exports.toggleDocking = toggleDocking;
/* component Not a pure module */
