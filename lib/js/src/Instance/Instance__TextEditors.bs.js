// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Instance__Goals$AgdaMode = require("./Instance__Goals.bs.js");

function getPath(instance) {
  return Parser$AgdaMode.filepath(Rebase.$$Option.getOr("untitled", instance.editors.source.getPath()));
}

function pointingAt(cursor, instance) {
  var cursor_ = cursor !== undefined ? Caml_option.valFromOption(cursor) : instance.editors.source.getCursorBufferPosition();
  var pointedGoals = Rebase.$$Array.filter((function (goal) {
          return goal.range.containsPoint(cursor_);
        }), instance.goals);
  return Rebase.$$Array.get(pointedGoals, 0);
}

function getPointedGoal(instance) {
  var pointed = pointingAt(undefined, instance);
  if (pointed !== undefined) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [pointed]));
  } else {
    return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* OutOfGoal */1]));
  }
}

function restoreCursorPosition(callback, instance) {
  var originalPosition = instance.editors.source.getCursorBufferPosition();
  return $$Promise.map(Curry._1(callback, undefined), (function (result) {
                var pointed = pointingAt(Caml_option.some(originalPosition), instance);
                if (pointed !== undefined && Goal$AgdaMode.isEmpty(pointed)) {
                  Instance__Goals$AgdaMode.setCursor(pointed, instance);
                } else {
                  instance.editors.source.setCursorBufferPosition(originalPosition);
                }
                return result;
              }));
}

function startCheckpoint(command, instance) {
  var checkpoint = instance.editors.source.createCheckpoint();
  instance.history.checkpoints.push(checkpoint);
  if (Rebase.$$Array.length(instance.history.checkpoints) === 1) {
    instance.history.needsReloading = typeof command === "number" ? (
        command >= 13 ? command < 17 : command === 6
      ) : false;
    return ;
  }
  
}

function endCheckpoint(instance) {
  var checkpoint = instance.history.checkpoints.pop();
  if (Rebase.$$Array.length(instance.history.checkpoints) === 0) {
    Rebase.$$Option.forEach((function (n) {
            instance.editors.source.groupChangesSinceCheckpoint(n);
            
          }), checkpoint === undefined ? undefined : Caml_option.some(checkpoint));
  }
  
}

exports.getPath = getPath;
exports.pointingAt = pointingAt;
exports.getPointedGoal = getPointedGoal;
exports.restoreCursorPosition = restoreCursorPosition;
exports.startCheckpoint = startCheckpoint;
exports.endCheckpoint = endCheckpoint;
/* Promise Not a pure module */
