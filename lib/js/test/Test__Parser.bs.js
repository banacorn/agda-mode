// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Async$AgdaMode = require("../src/Util/Async.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Instance$AgdaMode = require("../src/Instance.bs.js");
var Response$AgdaMode = require("../src/Response.bs.js");
var Connection$AgdaMode = require("../src/Connection.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Instance__Handler$AgdaMode = require("../src/Instance/Instance__Handler.bs.js");
var Instance__Connections$AgdaMode = require("../src/Instance/Instance__Connections.bs.js");

function singleRegressionTest(fileName, param) {
  var input = Fs.readFileSync("test/TestInputs/" + (fileName + ".in"), "utf8");
  var expectedOutput = Fs.readFileSync("test/TestInputs/" + (fileName + ".out"), "utf8");
  var parsedOutput = Connection$AgdaMode.parseAgdaOutput(input);
  var output = "";
  for(var i = 0 ,i_finish = parsedOutput.length - 1 | 0; i <= i_finish; ++i){
    var match = Caml_array.caml_array_get(parsedOutput, i);
    if (typeof match !== "number") {
      if (match.tag) {
        output = output + (Response$AgdaMode.toString(match[0]) + "\n");
      } else {
        Assert$BsMocha.fail("Parsing failed");
      }
    }
    
  }
  if (output === expectedOutput) {
    Assert$BsMocha.ok(true);
  } else {
    var splitExpected = expectedOutput.split("\n");
    var splitOutput = output.split("\n");
    var errorString = "";
    if (splitExpected.length !== splitOutput.length) {
      Assert$BsMocha.fail("Output has an unexpected number of lines.");
    }
    for(var i$1 = 0 ,i_finish$1 = splitExpected.length - 1 | 0; i$1 <= i_finish$1; ++i$1){
      var a = Caml_array.caml_array_get(splitExpected, i$1);
      var b = Caml_array.caml_array_get(splitOutput, i$1);
      if (a !== b) {
        var errorMsg = "Line " + (String(i$1) + (" differs.\n  Expecting:\n" + (a + ("\n  Got:\n" + (b + "\n")))));
        errorString = errorString + errorMsg;
      }
      
    }
    Assert$BsMocha.fail("Unexpected output of parser\n" + errorString);
  }
  return Async$AgdaMode.resolve(/* () */0);
}

Mocha$BsMocha.describe("when loading files")(undefined, undefined, undefined, (function (param) {
        return Mocha$BsMocha.describe("when parsing responses from Agda")(undefined, undefined, undefined, (function (param) {
                      return Promise$BsMocha.it("should succeed")(undefined, undefined, undefined, (function (param) {
                                    var path = Test__Util$AgdaMode.asset("Algebra.agda");
                                    return Test__Util$AgdaMode.openFile(path).then((function (editor) {
                                                  var instance = Instance$AgdaMode.make(editor);
                                                  return Async$AgdaMode.thenOk((function (param) {
                                                                  return Async$AgdaMode.mapError((function (param) {
                                                                                  Assert$BsMocha.fail(editor.getPath());
                                                                                  return /* () */0;
                                                                                }))(Async$AgdaMode.thenOk((function (param) {
                                                                                      Assert$BsMocha.ok(true);
                                                                                      return Async$AgdaMode.resolve(/* () */0);
                                                                                    }))(Async$AgdaMode.thenOk((function (param) {
                                                                                          return Instance__Handler$AgdaMode.handleRemoteCommand(instance, (function (param, param$1) {
                                                                                                        return Async$AgdaMode.resolve(/* () */0);
                                                                                                      }), param);
                                                                                        }))(Instance__Handler$AgdaMode.handleLocalCommand(/* Load */0, instance))));
                                                                }))(Async$AgdaMode.mapError((function (param) {
                                                                      return Assert$BsMocha.fail(editor.getPath());
                                                                    }))(Async$AgdaMode.mapOk((function (param) {
                                                                          return Instance__Connections$AgdaMode.set(instance, param);
                                                                        }))(Async$AgdaMode.mapOk(Connection$AgdaMode.wire)(Async$AgdaMode.thenOk(Connection$AgdaMode.connect)(Async$AgdaMode.thenOk(Connection$AgdaMode.validateAndMake)(Async$AgdaMode.mapOk((function (x) {
                                                                                          return x + " --no-libraries";
                                                                                        }))(Connection$AgdaMode.autoSearch("agda"))))))));
                                                }));
                                  }));
                    }));
      }));

Mocha$BsMocha.describe("When doing regression tests")(undefined, undefined, undefined, (function (param) {
        var contentArray = Fs.readdirSync("test/TestInputs");
        var isInFile = function (name) {
          return name.endsWith(".in");
        };
        var ditchExt = function (name) {
          return name.substring(0, name.length - 3 | 0);
        };
        var testNames = $$Array.map(ditchExt, contentArray.filter(isInFile));
        for(var i = 0 ,i_finish = testNames.length - 1 | 0; i <= i_finish; ++i){
          var partial_arg = Caml_array.caml_array_get(testNames, i);
          Promise$BsMocha.it("should handle test " + Caml_array.caml_array_get(testNames, i))(undefined, undefined, undefined, (function(partial_arg){
              return function (param) {
                return singleRegressionTest(partial_arg, param);
              }
              }(partial_arg)));
        }
        return /* () */0;
      }));

exports.singleRegressionTest = singleRegressionTest;
/*  Not a pure module */
