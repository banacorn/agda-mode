// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  switch (param) {
    case /* Simplified */0 :
        return "Simplified";
    case /* Instantiated */1 :
        return "Instantiated";
    case /* Normalised */2 :
        return "Normalised";
    
  }
}

var Normalization = {
  toString: toString
};

function toString$1(param) {
  switch (param) {
    case /* DefaultCompute */0 :
        return "DefaultCompute";
    case /* IgnoreAbstract */1 :
        return "IgnoreAbstract";
    case /* UseShowInstance */2 :
        return "UseShowInstance";
    
  }
}

function ignoreAbstract(param) {
  return param !== 0;
}

var ComputeMode = {
  toString: toString$1,
  ignoreAbstract: ignoreAbstract
};

function parse(param) {
  switch (param) {
    case "abort" :
        return /* Abort */3;
    case "auto" :
        return /* Auto */15;
    case "case" :
        return /* Case */16;
    case "compile" :
        return /* Compile */4;
    case "compute-normal-form[DefaultCompute]" :
        return /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 3, [/* DefaultCompute */0]);
    case "compute-normal-form[IgnoreAbstract]" :
        return /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 3, [/* IgnoreAbstract */1]);
    case "compute-normal-form[UseShowInstance]" :
        return /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 3, [/* UseShowInstance */2]);
    case "context[Instantiated]" :
        return /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Instantiated */1]);
    case "context[Normalised]" :
        return /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Normalised */2]);
    case "context[Simplified]" :
        return /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Simplified */0]);
    case "deactivate-input-symbol" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Abort */7]);
    case "give" :
        return /* Give */13;
    case "go-to-definition" :
        return /* GotoDefinition */18;
    case "goal-type-and-context[Instantiated]" :
        return /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 6, [/* Instantiated */1]);
    case "goal-type-and-context[Normalised]" :
        return /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 6, [/* Normalised */2]);
    case "goal-type-and-context[Simplified]" :
        return /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 6, [/* Simplified */0]);
    case "goal-type-and-inferred-type[Instantiated]" :
        return /* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 7, [/* Instantiated */1]);
    case "goal-type-and-inferred-type[Normalised]" :
        return /* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 7, [/* Normalised */2]);
    case "goal-type-and-inferred-type[Simplified]" :
        return /* GoalTypeAndInferredType */Caml_chrome_debugger.variant("GoalTypeAndInferredType", 7, [/* Simplified */0]);
    case "goal-type[Instantiated]" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 4, [/* Instantiated */1]);
    case "goal-type[Normalised]" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 4, [/* Normalised */2]);
    case "goal-type[Simplified]" :
        return /* GoalType */Caml_chrome_debugger.variant("GoalType", 4, [/* Simplified */0]);
    case "infer-type[Instantiated]" :
        return /* InferType */Caml_chrome_debugger.variant("InferType", 1, [/* Instantiated */1]);
    case "infer-type[Normalised]" :
        return /* InferType */Caml_chrome_debugger.variant("InferType", 1, [/* Normalised */2]);
    case "infer-type[Simplified]" :
        return /* InferType */Caml_chrome_debugger.variant("InferType", 1, [/* Simplified */0]);
    case "input-symbol" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Ordinary */0]);
    case "input-symbol-back-quote" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* BackQuote */6]);
    case "input-symbol-bracket" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Bracket */2]);
    case "input-symbol-curly-bracket" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* CurlyBracket */1]);
    case "input-symbol-double-quote" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* DoubleQuote */4]);
    case "input-symbol-parenthesis" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* Parenthesis */3]);
    case "input-symbol-single-quote" :
        return /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 8, [/* SingleQuote */5]);
    case "load" :
        return /* Load */0;
    case "module-contents[Instantiated]" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 2, [/* Instantiated */1]);
    case "module-contents[Normalised]" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 2, [/* Normalised */2]);
    case "module-contents[Simplified]" :
        return /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 2, [/* Simplified */0]);
    case "next-goal" :
        return /* NextGoal */9;
    case "previous-goal" :
        return /* PreviousGoal */10;
    case "query-symbol" :
        return /* QuerySymbol */17;
    case "quit" :
        return /* Quit */1;
    case "refine" :
        return /* Refine */14;
    case "restart" :
        return /* Restart */2;
    case "search-about[Instantiated]" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 0, [/* Instantiated */1]);
    case "search-about[Normalised]" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 0, [/* Normalised */2]);
    case "search-about[Simplified]" :
        return /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 0, [/* Simplified */0]);
    case "show-constraints" :
        return /* ShowConstraints */7;
    case "show-goals" :
        return /* ShowGoals */8;
    case "solve-constraints" :
        return /* SolveConstraints */6;
    case "toggle-display-of-implicit-arguments" :
        return /* ToggleDisplayOfImplicitArguments */5;
    case "toggle-docking" :
        return /* ToggleDocking */11;
    case "why-in-scope" :
        return /* WhyInScope */12;
    default:
      return /* Load */0;
  }
}

function toString$2(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Load */0 :
          return "Load";
      case /* Quit */1 :
          return "Quit";
      case /* Restart */2 :
          return "Restart";
      case /* Abort */3 :
          return "Abort";
      case /* Compile */4 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */5 :
          return "ToggleDisplayOfImplicitArguments";
      case /* SolveConstraints */6 :
          return "SolveConstraints";
      case /* ShowConstraints */7 :
          return "ShowConstraints";
      case /* ShowGoals */8 :
          return "ShowGoals";
      case /* NextGoal */9 :
          return "NextGoal";
      case /* PreviousGoal */10 :
          return "PreviousGoal";
      case /* ToggleDocking */11 :
          return "ToggleDocking";
      case /* WhyInScope */12 :
          return "WhyInScope";
      case /* Give */13 :
          return "Give";
      case /* Refine */14 :
          return "Refine";
      case /* Auto */15 :
          return "Auto";
      case /* Case */16 :
          return "Case";
      case /* QuerySymbol */17 :
          return "QuerySymbol";
      case /* GotoDefinition */18 :
          return "GotoDefinition";
      
    }
  } else {
    switch (param.tag | 0) {
      case /* GoalType */4 :
          return "GoalType";
      case /* Context */5 :
          return "Context";
      case /* GoalTypeAndContext */6 :
          return "GoalTypeAndContext";
      case /* GoalTypeAndInferredType */7 :
          return "GoalTypeAndInferredType";
      case /* SearchAbout */0 :
      case /* InferType */1 :
      case /* ModuleContents */2 :
      case /* ComputeNormalForm */3 :
      case /* InputSymbol */8 :
          return "InputSymbol";
      case /* Jump */9 :
          return "Jump";
      
    }
  }
}

var names = [
  "load",
  "quit",
  "restart",
  "abort",
  "compile",
  "toggle-display-of-implicit-arguments",
  "solve-constraints",
  "show-constraints",
  "show-goals",
  "next-goal",
  "previous-goal",
  "toggle-docking",
  "why-in-scope",
  "search-about[Simplified]",
  "search-about[Instantiated]",
  "search-about[Normalised]",
  "infer-type[Simplified]",
  "infer-type[Instantiated]",
  "infer-type[Normalised]",
  "module-contents[Simplified]",
  "module-contents[Instantiated]",
  "module-contents[Normalised]",
  "compute-normal-form[DefaultCompute]",
  "compute-normal-form[IgnoreAbstract]",
  "compute-normal-form[UseShowInstance]",
  "give",
  "refine",
  "auto",
  "case",
  "goal-type[Simplified]",
  "goal-type[Instantiated]",
  "goal-type[Normalised]",
  "context[Simplified]",
  "context[Instantiated]",
  "context[Normalised]",
  "goal-type-and-context[Simplified]",
  "goal-type-and-context[Instantiated]",
  "goal-type-and-context[Normalised]",
  "goal-type-and-inferred-type[Simplified]",
  "goal-type-and-inferred-type[Instantiated]",
  "goal-type-and-inferred-type[Normalised]",
  "input-symbol",
  "input-symbol-curly-bracket",
  "input-symbol-bracket",
  "input-symbol-parenthesis",
  "input-symbol-double-quote",
  "input-symbol-single-quote",
  "input-symbol-back-quote",
  "deactivate-input-symbol",
  "query-symbol",
  "go-to-definition"
];

exports.Normalization = Normalization;
exports.ComputeMode = ComputeMode;
exports.parse = parse;
exports.toString = toString$2;
exports.names = names;
/* No side effect */
