// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Link$AgdaMode = require("./Link.bs.js");
var Util$AgdaMode = require("../Util.bs.js");

var component = ReasonReact.statelessComponent("Range");

function intervalToString(interval) {
  if (interval[/* start */0][/* line */1] === interval[/* end_ */1][/* line */1]) {
    return String(interval[/* start */0][/* line */1]) + ("," + (String(interval[/* start */0][/* col */2]) + ("-" + String(interval[/* end_ */1][/* col */2]))));
  } else {
    return String(interval[/* start */0][/* line */1]) + ("," + (String(interval[/* start */0][/* col */2]) + ("-" + (String(interval[/* end_ */1][/* line */1]) + ("," + String(interval[/* end_ */1][/* col */2]))))));
  }
}

function rangeToString(range) {
  if (range) {
    var match = range[0];
    if (match !== undefined) {
      var xs = range[1];
      var filepath = match;
      if (xs) {
        return filepath + (":" + intervalToString(/* record */Block.record([
                        "start",
                        "end_"
                      ], [
                        List.hd(xs)[/* start */0],
                        List.nth(xs, List.length(xs) - 1 | 0)[/* end_ */1]
                      ])));
      } else {
        return filepath;
      }
    } else {
      var xs$1 = range[1];
      if (xs$1) {
        return intervalToString(/* record */Block.record([
                      "start",
                      "end_"
                    ], [
                      List.hd(xs$1)[/* start */0],
                      List.nth(xs$1, List.length(xs$1) - 1 | 0)[/* end_ */1]
                    ]));
      } else {
        return "";
      }
    }
  } else {
    return "";
  }
}

function fuseIntervals(a, b) {
  var start = Caml_obj.caml_greaterthan(a[/* start */0][/* pos */0], b[/* start */0][/* pos */0]) ? b[/* start */0] : a[/* start */0];
  var end_ = Caml_obj.caml_greaterthan(a[/* end_ */1][/* pos */0], b[/* end_ */1][/* pos */0]) ? a[/* end_ */1] : b[/* end_ */1];
  return /* record */Block.record([
            "start",
            "end_"
          ], [
            start,
            end_
          ]);
}

function fuse(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return List.concat(/* :: */Block.simpleVariant("::", [
                  l,
                  /* :: */Block.simpleVariant("::", [
                      /* :: */Block.simpleVariant("::", [
                          /* record */Block.record([
                              "start",
                              "end_"
                            ], [
                              e[/* start */0],
                              s[/* end_ */1]
                            ]),
                          /* [] */0
                        ]),
                      /* :: */Block.simpleVariant("::", [
                          r,
                          /* [] */0
                        ])
                    ])
                ]));
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$prime = Util$AgdaMode.List_[/* dropWhile */4]((function (x) {
            return Caml_obj.caml_lessequal(x[/* end_ */1][/* pos */0], s2[/* end_ */1][/* pos */0]);
          }), r1);
    return helpFuse(r1$prime, /* :: */Block.simpleVariant("::", [
                  fuseIntervals(s1, s2),
                  r2
                ]));
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaMode.List_[/* span */3]((function (s) {
            return Caml_obj.caml_lessthan(s[/* end_ */1][/* pos */0], s2[/* start */0][/* pos */0]);
          }), r1);
    return List.concat(/* :: */Block.simpleVariant("::", [
                  /* :: */Block.simpleVariant("::", [
                      s1,
                      /* [] */0
                    ]),
                  /* :: */Block.simpleVariant("::", [
                      match[0],
                      /* :: */Block.simpleVariant("::", [
                          helpFuse(match[1], is2),
                          /* [] */0
                        ])
                    ])
                ]));
  };
  var helpFuse = function (a, b) {
    var match = List.rev(a);
    var match$1 = List.rev(b);
    if (a) {
      if (match) {
        if (b) {
          if (match$1) {
            var e2 = match$1[0];
            var r2 = b[1];
            var s2 = b[0];
            var e1 = match[0];
            var r1 = a[1];
            var s1 = a[0];
            if (Caml_obj.caml_lessthan(e1[/* end_ */1][/* pos */0], s2[/* start */0][/* pos */0])) {
              return List.append(a, b);
            } else if (Caml_obj.caml_lessthan(e2[/* end_ */1][/* pos */0], s1[/* start */0][/* pos */0])) {
              return List.append(b, a);
            } else if (e1[/* end_ */1][/* pos */0] === s2[/* start */0][/* pos */0]) {
              return mergeTouching(match[1], e1, s2, r2);
            } else if (e2[/* end_ */1][/* pos */0] === s1[/* start */0][/* pos */0]) {
              return mergeTouching(match$1[1], e2, s1, r1);
            } else if (Caml_obj.caml_lessthan(s1[/* end_ */1][/* pos */0], s2[/* start */0][/* pos */0])) {
              return outputLeftPrefix(s1, r1, s2, b);
            } else if (Caml_obj.caml_lessthan(s2[/* end_ */1][/* pos */0], s1[/* start */0][/* pos */0])) {
              return outputLeftPrefix(s2, r2, s1, a);
            } else if (Caml_obj.caml_lessthan(s1[/* end_ */1][/* pos */0], s2[/* end_ */1][/* pos */0])) {
              return fuseSome(s1, r1, s2, r2);
            } else {
              return fuseSome(s2, r2, s1, r1);
            }
          } else {
            return Pervasives.failwith("something wrong with Range::fuse");
          }
        } else if (b) {
          return Pervasives.failwith("something wrong with Range::fuse");
        } else {
          return b;
        }
      } else if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    } else {
      return a;
    }
  };
  if (a) {
    if (b) {
      return /* Range */Block.simpleVariant("Range", [
                a[0],
                helpFuse(a[1], b[1])
              ]);
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function make(range, $staropt$star, _children) {
  var abbr = $staropt$star !== undefined ? $staropt$star : false;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                if (abbr) {
                  return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range, true, undefined, undefined, /* array */[React.createElement("span", {
                                        className: "text-subtle range icon icon-link"
                                      })]));
                } else {
                  return ReasonReact.element(undefined, undefined, Link$AgdaMode.make(range, true, undefined, undefined, /* array */[React.createElement("span", {
                                        className: "text-subtle range icon icon-link"
                                      }, rangeToString(range))]));
                }
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

function toAtomRange(range) {
  if (range) {
    var xs = range[1];
    if (xs) {
      var start = List.hd(xs)[/* start */0];
      var end_ = List.nth(xs, List.length(xs) - 1 | 0)[/* end_ */1];
      return new Atom.Range(new Atom.Point(start[/* line */1] - 1 | 0, start[/* col */2] - 1 | 0), new Atom.Point(end_[/* line */1] - 1 | 0, end_[/* col */2] - 1 | 0));
    } else {
      return ( null );
    }
  } else {
    return ( null );
  }
}

function toAtomFilepath(range) {
  var exit = 0;
  if (range) {
    var match = range[0];
    if (match !== undefined) {
      return match;
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return ( null );
  }
  
}

var jsComponent = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.range, undefined, /* array */[]);
      }));

exports.component = component;
exports.intervalToString = intervalToString;
exports.rangeToString = rangeToString;
exports.fuseIntervals = fuseIntervals;
exports.fuse = fuse;
exports.make = make;
exports.toAtomRange = toAtomRange;
exports.toAtomFilepath = toAtomFilepath;
exports.jsComponent = jsComponent;
/* component Not a pure module */
