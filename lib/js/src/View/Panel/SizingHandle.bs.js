// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var ReasonReactCompat = require("reason-react/lib/js/src/ReasonReactCompat.js");

function calculateBodyHeight(handleRef, handleY) {
  return Rebase.$$Option[/* flatMap */5]((function (elem) {
                var top = elem.getBoundingClientRect().top + 51 | 0;
                return Rebase.$$Option[/* flatMap */5]((function (element) {
                              var bottom = element.getBoundingClientRect().top;
                              if (top > 0) {
                                return (bottom - handleY | 0) - 51 | 0;
                              }
                              
                            }), Caml_option.nullable_to_opt(document.querySelector("atom-panel-container.footer")));
              }), Caml_option.nullable_to_opt(handleRef.current));
}

function SizingHandle(Props) {
  var onResizeStart = Props.onResizeStart;
  var onResizeEnd = Props.onResizeEnd;
  var mountAtBottom = Props.mountAtBottom;
  var handleRef = React.useRef(null);
  if (mountAtBottom) {
    return React.createElement("div", {
                className: "sizing-handle-anchor"
              }, React.createElement("div", {
                    ref: handleRef,
                    className: "sizing-handle native-key-bindings",
                    draggable: true,
                    tabIndex: -1,
                    onDragEnd: (function (ev) {
                        return Rebase.$$Option[/* forEach */8](onResizeEnd, calculateBodyHeight(handleRef, ev.clientY));
                      }),
                    onDragStart: (function (ev) {
                        return Rebase.$$Option[/* forEach */8](onResizeStart, calculateBodyHeight(handleRef, ev.clientY));
                      })
                  }));
  } else {
    return null;
  }
}

var component = ReasonReact.statelessComponent("SizingHandle");

function make(onResizeStart, onResizeEnd, mountAtBottom, children) {
  return ReasonReactCompat.wrapReactForReasonReact(SizingHandle, {
              onResizeStart: onResizeStart,
              onResizeEnd: onResizeEnd,
              mountAtBottom: mountAtBottom
            }, children);
}

var Jsx2 = /* module */Block.localModule([
    "component",
    "make"
  ], [
    component,
    make
  ]);

var make$1 = SizingHandle;

exports.calculateBodyHeight = calculateBodyHeight;
exports.make = make$1;
exports.Jsx2 = Jsx2;
/* component Not a pure module */
