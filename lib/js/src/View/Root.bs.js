// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var ReactDom = require("react-dom");
var Tab$AgdaMode = require("./Tab.bs.js");
var Hook$AgdaMode = require("./Hook.bs.js");
var View$AgdaMode = require("../View.bs.js");
var Async$AgdaMode = require("../Util/Async.bs.js");
var Event$AgdaMode = require("../Util/Event.bs.js");
var Panel$AgdaMode = require("./Panel/Panel.bs.js");
var Events$AgdaMode = require("./Events.bs.js");
var Channel$AgdaMode = require("../Util/Channel.bs.js");
var Channels$AgdaMode = require("./Channels.bs.js");
var Resource$AgdaMode = require("../Util/Resource.bs.js");
var Settings$AgdaMode = require("./Settings/Settings.bs.js");
var Type__View$AgdaMode = require("../Type/Type__View.bs.js");

function Root(Props) {
  var editors = Props.editors;
  var events = Props.events;
  var channels = Props.channels;
  var match = Hook$AgdaMode.useState(/* Root */0);
  var setSettingsURI = match[1];
  var settingsViewRef = React.useRef(undefined);
  var match$1 = Hook$AgdaMode.useState(undefined);
  var setSettingsElement = match$1[1];
  var update = function (param) {
    if (param !== undefined) {
      var match = param;
      settingsViewRef.current = match[1];
      Curry._1(setSettingsElement, Rebase.$$Option.map(Tab$AgdaMode.getElement, settingsViewRef.current));
      return Curry._1(setSettingsURI, match[0]);
    } else {
      settingsViewRef.current = undefined;
      return Curry._1(setSettingsURI, /* Root */0);
    }
  };
  Hook$AgdaMode.useChannel((function (param) {
          if (param !== undefined) {
            var match = settingsViewRef.current;
            if (match !== undefined) {
              return Async$AgdaMode.resolve(/* () */0);
            } else {
              var resource = Resource$AgdaMode.make(/* () */0);
              var tab = Tab$AgdaMode.make(editors[/* source */1], (function (param) {
                      return "[Settings] " + editors[/* source */1].getTitle();
                    }), "settings", (function (param, param$1, param$2) {
                      return Resource$AgdaMode.supply(/* () */0, resource);
                    }), undefined, (function (param) {
                      return update(undefined);
                    }), undefined, /* () */0);
              update(/* tuple */[
                    param,
                    tab
                  ]);
              return Resource$AgdaMode.acquire(resource);
            }
          } else {
            var match$1 = settingsViewRef.current;
            if (match$1 !== undefined) {
              Tab$AgdaMode.kill(match$1);
              update(undefined);
              return Async$AgdaMode.resolve(/* () */0);
            } else {
              return Async$AgdaMode.resolve(/* () */0);
            }
          }
        }), channels[/* navigateSettings */9]);
  var match$2 = React.useReducer(Type__View$AgdaMode.Debug.reducer, Type__View$AgdaMode.Debug.initialState);
  var match$3 = settingsViewRef.current;
  var settingsActivated = match$3 !== undefined;
  var onSettingsViewToggle = function (shouldOpen) {
    Channel$AgdaMode.send(shouldOpen ? /* Root */0 : undefined, channels[/* navigateSettings */9]);
    return /* () */0;
  };
  return React.createElement(React.Fragment, undefined, React.createElement(Channels$AgdaMode.Provider.make, {
                  value: channels,
                  children: React.createElement(Type__View$AgdaMode.Mouse.Provider.make, {
                        value: (function ($$event) {
                            return Event$AgdaMode.emitOk($$event, events[/* onMouseEvent */2]);
                          }),
                        children: React.createElement(Type__View$AgdaMode.Debug.Provider.make, {
                              value: match$2[1],
                              children: null
                            }, React.createElement(Panel$AgdaMode.make, {
                                  editors: editors,
                                  settingsActivated: settingsActivated,
                                  onInputMethodChange: events[/* onInputMethodChange */1],
                                  onSettingsViewToggle: onSettingsViewToggle,
                                  onInquireQuery: events[/* onInquire */0]
                                }), React.createElement(Settings$AgdaMode.make, {
                                  targetURI: match[0],
                                  debug: match$2[0],
                                  element: match$1[0]
                                }))
                      })
                }));
}

function initialize(editors) {
  var element = document.createElement("article");
  var events = Events$AgdaMode.make(/* () */0);
  var channels = Channels$AgdaMode.make(/* () */0);
  var view = View$AgdaMode.make(events, channels);
  var component = React.createElement(Root, {
        editors: editors,
        events: events,
        channels: channels
      });
  ReactDom.render(component, element);
  return view;
}

var $$Event = 0;

var make = Root;

exports.$$Event = $$Event;
exports.make = make;
exports.initialize = initialize;
/* react Not a pure module */
