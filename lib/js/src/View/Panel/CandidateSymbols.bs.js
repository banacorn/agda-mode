// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

var component = ReasonReact.reducerComponentWithRetainedProps("CandidateSymbols");

function startListening(self) {
  var disposables = new Atom.CompositeDisposable();
  disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-up", (function ($$event) {
              Curry._1(self[/* send */3], /* MoveUp */2);
              $$event.stopImmediatePropagation();
              return /* () */0;
            })));
  disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-right", (function ($$event) {
              Curry._1(self[/* send */3], /* MoveRight */4);
              $$event.stopImmediatePropagation();
              return /* () */0;
            })));
  disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-down", (function ($$event) {
              Curry._1(self[/* send */3], /* MoveDown */3);
              $$event.stopImmediatePropagation();
              return /* () */0;
            })));
  disposables.add(atom.commands.add("atom-text-editor.agda-mode-input-method-activated", "core:move-left", (function ($$event) {
              Curry._1(self[/* send */3], /* MoveLeft */5);
              $$event.stopImmediatePropagation();
              return /* () */0;
            })));
  return disposables;
}

function stopListening(prim) {
  prim.dispose();
  return /* () */0;
}

function make(isActive, candidateSymbols, updateTranslation, chooseSymbol, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            (function (param) {
                var newSelf = param[/* newSelf */1];
                var oldSelf = param[/* oldSelf */0];
                if (!oldSelf[/* retainedProps */2] && newSelf[/* retainedProps */2]) {
                  return Curry._1(newSelf[/* send */3], /* Activate */0);
                } else if (oldSelf[/* retainedProps */2] && !newSelf[/* retainedProps */2]) {
                  return Curry._1(newSelf[/* send */3], /* Deactivate */1);
                } else {
                  return 0;
                }
              }),
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var rowStart = Caml_int32.imul(self[/* state */1][/* index */0] / 10 | 0, 10);
                var row = Rebase.$$Array[/* slice */25](rowStart, rowStart + 10 | 0, candidateSymbols);
                var match = Rebase.$$Array[/* get */17](candidateSymbols, self[/* state */1][/* index */0]);
                if (match !== undefined) {
                  var keys = Rebase.$$Array[/* mapi */27]((function (key, i) {
                          var isSelected = (rowStart + i | 0) === self[/* state */1][/* index */0];
                          var className = Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("selected", isSelected, /* :: */Block.simpleVariant("::", [
                                      "btn",
                                      /* [] */0
                                    ])));
                          return React.createElement("button", {
                                      key: key,
                                      className: className,
                                      onClick: (function (param) {
                                          return Curry._1(chooseSymbol, key);
                                        })
                                    }, key);
                        }), row);
                  return ReactDOMRe.createElementVariadic("div", {
                              className: "candidates btn-group btn-group-sm"
                            }, keys);
                } else {
                  return null;
                }
              }),
            (function (param) {
                return /* record */Block.record([
                          "index",
                          "listener"
                        ], [
                          0,
                          undefined
                        ]);
              }),
            isActive,
            (function (action, state) {
                if (typeof action === "number") {
                  switch (action) {
                    case 0 : 
                        return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                                      var listener = startListening(self);
                                      return Curry._1(self[/* send */3], /* UpdateListener */Block.simpleVariant("UpdateListener", [Caml_option.some(listener)]));
                                    })]);
                    case 1 : 
                        return /* SideEffects */Block.variant("SideEffects", 1, [(function (self) {
                                      var match = self[/* state */1][/* listener */1];
                                      if (match !== undefined) {
                                        Caml_option.valFromOption(match).dispose();
                                      }
                                      return Curry._1(self[/* send */3], /* UpdateListener */Block.simpleVariant("UpdateListener", [undefined]));
                                    })]);
                    case 2 : 
                        var newIndex = Caml_primitive.caml_int_max(0, state[/* index */0] - 10 | 0);
                        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                  /* record */Block.record([
                                      "index",
                                      "listener"
                                    ], [
                                      newIndex,
                                      state[/* listener */1]
                                    ]),
                                  (function (param) {
                                      return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex));
                                    })
                                ]);
                    case 3 : 
                        var newIndex$1 = Caml_primitive.caml_int_min(Rebase.$$Array[/* length */16](candidateSymbols) - 1 | 0, state[/* index */0] + 10 | 0);
                        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                  /* record */Block.record([
                                      "index",
                                      "listener"
                                    ], [
                                      newIndex$1,
                                      state[/* listener */1]
                                    ]),
                                  (function (param) {
                                      return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex$1));
                                    })
                                ]);
                    case 4 : 
                        var newIndex$2 = Caml_primitive.caml_int_min(Rebase.$$Array[/* length */16](candidateSymbols) - 1 | 0, state[/* index */0] + 1 | 0);
                        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                  /* record */Block.record([
                                      "index",
                                      "listener"
                                    ], [
                                      newIndex$2,
                                      state[/* listener */1]
                                    ]),
                                  (function (param) {
                                      return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex$2));
                                    })
                                ]);
                    case 5 : 
                        var newIndex$3 = Caml_primitive.caml_int_max(0, state[/* index */0] - 1 | 0);
                        return /* UpdateWithSideEffects */Block.variant("UpdateWithSideEffects", 2, [
                                  /* record */Block.record([
                                      "index",
                                      "listener"
                                    ], [
                                      newIndex$3,
                                      state[/* listener */1]
                                    ]),
                                  (function (param) {
                                      return Curry._1(updateTranslation, Rebase.$$Array[/* get */17](candidateSymbols, newIndex$3));
                                    })
                                ]);
                    
                  }
                } else {
                  return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                "index",
                                "listener"
                              ], [
                                state[/* index */0],
                                action[0]
                              ])]);
                }
              }),
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.startListening = startListening;
exports.stopListening = stopListening;
exports.make = make;
/* component Not a pure module */
