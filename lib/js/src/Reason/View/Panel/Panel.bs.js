// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Body$AgdaMode = require("./Body.bs.js");
var Dashboard$AgdaMode = require("./Dashboard.bs.js");
var SizingHandle$AgdaMode = require("./SizingHandle.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "maxHeight",
            "mode",
            "isPending",
            "settingsViewOn"
          ], [
            170,
            0,
            false,
            false
          ]);
}

function reducer(action, state) {
  if (action.tag) {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "maxHeight",
                  "mode",
                  "isPending",
                  "settingsViewOn"
                ], [
                  state[/* maxHeight */0],
                  state[/* mode */1],
                  action[0],
                  state[/* settingsViewOn */3]
                ])]);
  } else {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "maxHeight",
                  "mode",
                  "isPending",
                  "settingsViewOn"
                ], [
                  action[0],
                  state[/* mode */1],
                  state[/* isPending */2],
                  state[/* settingsViewOn */3]
                ])]);
  }
}

var component = ReasonReact.reducerComponent("Panel");

function make(onMountAtChange, body, header, mountAt, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                var onSettingsViewToggle = function (param) {
                  return /* () */0;
                };
                var mountAtBottom;
                mountAtBottom = typeof mountAt === "number" || mountAt.tag ? false : true;
                return React.createElement("section", undefined, React.createElement("section", {
                                className: "panel-heading agda-header-container"
                              }, ReasonReact.element(undefined, undefined, SizingHandle$AgdaMode.make((function (height) {
                                          return Curry._1(self[/* send */3], /* UpdateMaxHeight */Block.variant("UpdateMaxHeight", 0, [height]));
                                        }), (function (height) {
                                          setTimeout((function (param) {
                                                  Curry._1(self[/* send */3], /* UpdateMaxHeight */Block.variant("UpdateMaxHeight", 0, [height]));
                                                  atom.config.set("agda-mode.maxBodyHeight", String(height));
                                                  return /* () */0;
                                                }), 0);
                                          return /* () */0;
                                        }), mountAtBottom, /* array */[])), ReasonReact.element(undefined, undefined, Dashboard$AgdaMode.make(header, false, match[/* isPending */2], mountAt, onMountAtChange, match[/* settingsViewOn */3], onSettingsViewToggle, /* array */[]))), React.createElement("section", {
                                className: "agda-body-container"
                              }, ReasonReact.element(undefined, undefined, Body$AgdaMode.make(body, false, mountAtBottom, /* array */[]))));
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
/* component Not a pure module */
