// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Event$AgdaMode = require("../src/Util/Event.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var AgdaMode$AgdaMode = require("../src/AgdaMode.bs.js");
var Test__Util$AgdaMode = require("./Test__Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Webapi__Dom__Element = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__Element.js");
var Webapi__Dom__Document = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__Document.js");

function queryMochaContent(param) {
  return Caml_option.nullable_to_opt(document.documentElement.querySelector("#mocha-content"));
}

function createMochaContent(param) {
  var mochaElement = document.createElement("div");
  mochaElement.id = "mocha-content";
  Rebase.$$Option[/* forEach */8]((function (body) {
          return Rebase.$$Option[/* forEach */8]((function (el) {
                        body.appendChild(el);
                        return /* () */0;
                      }), Webapi__Dom__Element.asHtmlElement(mochaElement));
        }), Rebase.$$Option[/* flatMap */5]((function (prim) {
              return Caml_option.nullable_to_opt(prim.body);
            }), Webapi__Dom__Document.asHtmlDocument(document)));
  return Promise.resolve(/* () */0);
}

function attachToDOM(htmlElement) {
  var mochaElement = queryMochaContent(/* () */0);
  var alreadyAttached = Rebase.$$Option[/* getOr */16](true, Rebase.$$Option[/* map */0]((function (param) {
              return param.contains(htmlElement);
            }), mochaElement));
  if (!alreadyAttached) {
    Rebase.$$Option[/* forEach */8]((function (element) {
            element.appendChild(htmlElement);
            return /* () */0;
          }), mochaElement);
  }
  return Promise.resolve(/* () */0);
}

Mocha$BsMocha.describe_skip("View")(undefined, undefined, undefined, (function (param) {
        Promise$BsMocha.before(undefined)(undefined, undefined, undefined, createMochaContent);
        var activationPromise = /* record */Caml_chrome_debugger.record(["contents"], [undefined]);
        Promise$BsMocha.before_each(undefined)(undefined, undefined, undefined, (function (param) {
                return attachToDOM(atom.views.getView(atom.workspace)).then((function (param) {
                              activationPromise[0] = Caml_option.some(atom.packages.activatePackage("agda-mode"));
                              return Promise.resolve(/* () */0);
                            }));
              }));
        Promise$BsMocha.after_each(undefined)(undefined, undefined, undefined, (function (param) {
                activationPromise[0] = undefined;
                return atom.packages.deactivatePackage("agda-mode", false);
              }));
        return Promise$BsMocha.it("should activate the panel")(undefined, undefined, undefined, (function (param) {
                      return Test__Util$AgdaMode.openFile(Test__Util$AgdaMode.asset("Blank1.agda")).then((function (editor) {
                                    return Test__Util$AgdaMode.dispatch(editor, "agda-mode:load").then((function (param) {
                                                      return Rebase.$$Option[/* getOr */16](Promise.resolve(/* () */0), activationPromise[0]);
                                                    })).then((function (param) {
                                                    return Rebase.$$Option[/* getOr */16](Promise.resolve(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* () */0])), Rebase.$$Option[/* map */0]((function (instance) {
                                                                      var handles = instance[/* view */2][/* handles */18];
                                                                      return Event$AgdaMode.once(handles[/* onActivatePanel */4]);
                                                                    }), AgdaMode$AgdaMode.Instances[/* get */0](editor)));
                                                  })).then((function (element) {
                                                  Rebase.$$Option[/* map */0]((function (instance) {
                                                          return Assert$BsMocha.equal(undefined, instance[/* isLoaded */0], true);
                                                        }), AgdaMode$AgdaMode.Instances[/* get */0](editor));
                                                  if (element.tag) {
                                                    Assert$BsMocha.fail("failed to activate the panel");
                                                    return Promise.resolve(/* () */0);
                                                  } else {
                                                    Assert$BsMocha.ok(true);
                                                    return Promise.resolve(/* () */0);
                                                  }
                                                }));
                                  }));
                    }));
      }));

exports.queryMochaContent = queryMochaContent;
exports.createMochaContent = createMochaContent;
exports.attachToDOM = attachToDOM;
/*  Not a pure module */
