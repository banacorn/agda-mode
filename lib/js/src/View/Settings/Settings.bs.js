// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Event$AgdaMode = require("../../Util/Event.bs.js");
var Settings__Breadcrumb$AgdaMode = require("./Settings__Breadcrumb.bs.js");
var Settings__Connection$AgdaMode = require("./Settings__Connection.bs.js");

function initialState(param) {
  return /* record */Block.record([
            "uri",
            "connection"
          ], [
            0,
            undefined
          ]);
}

function reducer(action, state) {
  if (action.tag) {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "uri",
                  "connection"
                ], [
                  action[0],
                  state[/* connection */1]
                ])]);
  } else {
    return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                  "uri",
                  "connection"
                ], [
                  state[/* uri */0],
                  action[0]
                ])]);
  }
}

var component = ReasonReact.reducerComponent("Settings");

function at(x, y, classNames) {
  return Curry._1(Util$AgdaMode.ClassName[/* serialize */2], Util$AgdaMode.ClassName[/* addWhen */1]("hidden", Caml_obj.caml_notequal(x, y), classNames));
}

function make(inquireConnection, onInquireConnection, connection, connectionError, navigate, element, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            (function (self) {
                return Event$AgdaMode.destroyWhen(self[/* onUnmount */4], Event$AgdaMode.onOk((function (uri) {
                                    return Curry._1(self[/* send */3], /* Navigate */Block.variant("Navigate", 1, [uri]));
                                  }))(navigate));
              }),
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var match = self[/* state */1];
                if (element !== undefined) {
                  var uri = match[/* uri */0];
                  return ReactDom.createPortal(React.createElement("section", {
                                  className: "agda-settings",
                                  tabIndex: -1
                                }, ReasonReact.element(undefined, undefined, Settings__Breadcrumb$AgdaMode.make(uri, (function (uri) {
                                            return Curry._1(self[/* send */3], /* Navigate */Block.variant("Navigate", 1, [uri]));
                                          }), /* array */[])), React.createElement("div", {
                                      className: "agda-settings-pages"
                                    }, React.createElement("ul", {
                                          className: at(/* Root */0, uri, /* :: */Block.simpleVariant("::", [
                                                  "agda-settings-menu",
                                                  /* [] */0
                                                ]))
                                        }, React.createElement("li", {
                                              onClick: (function (param) {
                                                  return Curry._1(self[/* send */3], /* Navigate */Block.variant("Navigate", 1, [/* Connection */1]));
                                                })
                                            }, React.createElement("span", {
                                                  className: "icon icon-plug"
                                                }, "Connection")), React.createElement("li", {
                                              onClick: (function (param) {
                                                  return Curry._1(self[/* send */3], /* Navigate */Block.variant("Navigate", 1, [/* Protocol */2]));
                                                })
                                            }, React.createElement("span", {
                                                  className: "icon icon-comment-discussion"
                                                }, "Protocol"))), ReasonReact.element(undefined, undefined, Settings__Connection$AgdaMode.make(inquireConnection, onInquireConnection, connection, connectionError, uri !== /* Connection */1, /* array */[])))), Caml_option.valFromOption(element));
                } else {
                  return null;
                }
              }),
            initialState,
            component[/* retainedProps */11],
            reducer,
            component[/* jsElementWrapped */13]
          ]);
}

var URI = 0;

exports.URI = URI;
exports.initialState = initialState;
exports.reducer = reducer;
exports.component = component;
exports.at = at;
exports.make = make;
/* component Not a pure module */
