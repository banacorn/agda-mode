// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Util$AgdaMode = require("../../Util.bs.js");
var Emacs__Parser$AgdaMode = require("./Emacs__Parser.bs.js");
var Emacs__Component$AgdaMode = require("./Emacs__Component.bs.js");

function parse(raw) {
  var lines = raw.split("\n");
  var __x = Emacs__Parser$AgdaMode.partiteWarningsOrErrors("errors")(Util$AgdaMode.Dict[/* partite */0]((function (param) {
              var match = param[1] === 0;
              if (match) {
                return "errors";
              }
              
            }), lines));
  return Rebase.$$Option[/* mapOr */18]((function (metas) {
                return Rebase.$$Array[/* filterMap */23]((function (x) {
                              return x;
                            }), Rebase.$$Array[/* map */0](Emacs__Component$AgdaMode.WarningError[/* parseError */2], metas));
              }), /* array */[], Js_dict.get(__x, "errors"));
}

var component = ReasonReact.statelessComponent("EmacsError");

function make(body, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                var parsed = parse(body);
                return ReactDOMRe.createElementVariadic("ul", undefined, Rebase.$$Array[/* map */0]((function (value) {
                                  return ReasonReact.element(undefined, undefined, Emacs__Component$AgdaMode.WarningError[/* make */4](value, /* array */[]));
                                }), parsed));
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.parse = parse;
exports.component = component;
exports.make = make;
/* component Not a pure module */
