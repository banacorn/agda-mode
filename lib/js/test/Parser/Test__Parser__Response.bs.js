// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Response$AgdaMode = require("../../src/Response.bs.js");
var Test__Util$AgdaMode = require("../Test__Util.bs.js");
var Test__Parser__SExpression$AgdaMode = require("./Test__Parser__SExpression.bs.js");

function toResponses(exprs) {
  var result = Rebase.$$Array.map(Response$AgdaMode.parse, exprs);
  var extractError = function (param) {
    if (param.tag) {
      return Caml_option.some(param[0]);
    }
    
  };
  var extractOk = Rebase.$$Option.fromResult;
  var failures = Rebase.$$Array.filterMap(extractError, result);
  Rebase.$$Array.forEach(Test__Util$AgdaMode.Assert.fail, failures);
  return Rebase.$$Array.filterMap(extractOk, result);
}

Mocha$BsMocha.describe("when parsing responses")(undefined, undefined, undefined, (function (param) {
        return Rebase.$$Array.forEach((function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    var partial_arg = [];
                                    var partial_arg$1 = Curry._2(Rebase.Fn.$great$great, Curry._2(Rebase.Fn.$great$great, (function (param) {
                                                return Test__Parser__SExpression$AgdaMode.parseSExpression(partial_arg, param);
                                              }), toResponses), Test__Util$AgdaMode.serializeWith(Response$AgdaMode.toString));
                                    var partial_arg$2 = Curry._2(Rebase.Fn.$great$great, (function (param) {
                                            return Test__Util$AgdaMode.Golden.map(partial_arg$1, param);
                                          }), Test__Util$AgdaMode.Golden.compare);
                                    return Test__Util$AgdaMode.Golden.readFile(filepath).then(Curry.__1(partial_arg$2));
                                  }));
                    }), Test__Util$AgdaMode.Golden.getGoldenFilepathsSync("test/Parser/Response"));
      }));

exports.toResponses = toResponses;
/*  Not a pure module */
