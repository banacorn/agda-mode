// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Block = require("bs-platform/lib/js/block.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Async$AgdaMode = require("./Util/Async.bs.js");

function make(param) {
  return /* record */Block.record([
            "editor",
            "isOpeningEditor",
            "buffer",
            "subscriptions"
          ], [
            undefined,
            false,
            0,
            new Atom.CompositeDisposable()
          ]);
}

var itemOptions = {
  initialLine: 0,
  initialColumn: 0,
  split: "right",
  activatePane: false,
  activateItem: false,
  pending: false,
  searchAllPanes: true,
  location: undefined
};

function destroy(self) {
  self[/* editor */0] = undefined;
  self[/* isOpeningEditor */1] = false;
  self[/* buffer */2] = /* [] */0;
  self[/* subscriptions */3].dispose();
  return /* () */0;
}

function add(info, self) {
  var match = self[/* editor */0];
  if (match !== undefined) {
    Caml_option.valFromOption(match).insertText(info);
    return Async$AgdaMode.resolve(/* () */0);
  } else if (self[/* isOpeningEditor */1]) {
    self[/* buffer */2] = /* :: */Block.simpleVariant("::", [
        info,
        self[/* buffer */2]
      ]);
    return Async$AgdaMode.resolve(/* () */0);
  } else {
    self[/* isOpeningEditor */1] = true;
    return Async$AgdaMode.thenOk((function (newItem) {
                    self[/* isOpeningEditor */1] = false;
                    self[/* editor */0] = Caml_option.some(newItem);
                    newItem.insertText(Rebase.$$String[/* join */10](self[/* buffer */2]));
                    self[/* buffer */2] = /* [] */0;
                    self[/* subscriptions */3].add(newItem.onDidDestroy((function (param) {
                                return destroy(self);
                              })));
                    return Async$AgdaMode.resolve(/* () */0);
                  }))(Async$AgdaMode.fromPromise(atom.workspace.open("agda-mode://log", itemOptions)));
  }
}

exports.make = make;
exports.itemOptions = itemOptions;
exports.destroy = destroy;
exports.add = add;
/* atom Not a pure module */
