// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");

function sepBy(sep, item) {
  if (item) {
    var xs = item[1];
    var x = item[0];
    if (xs) {
      return ReactDOMRe.createElementVariadic("span", undefined, $$Array.of_list(/* :: */Block.simpleVariant("::", [
                        x,
                        List.map((function (i) {
                                return React.createElement(React.Fragment, undefined, sep, i);
                              }), xs)
                      ])));
    } else {
      return x;
    }
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

var contains = (function (haystack, needle) { return (haystack.indexOf(needle) !== -1)});

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

function sepBy$1(sep, item) {
  if (item) {
    return /* :: */Block.simpleVariant("::", [
              item[0],
              List.concat(List.map((function (i) {
                          return /* :: */Block.simpleVariant("::", [
                                    sep,
                                    /* :: */Block.simpleVariant("::", [
                                        i,
                                        /* [] */0
                                      ])
                                  ]);
                        }), item[1]))
            ]);
  } else {
    return /* [] */0;
  }
}

function init(xs) {
  if (xs) {
    var xs$1 = xs[1];
    if (xs$1) {
      return /* :: */Block.simpleVariant("::", [
                xs[0],
                init(xs$1)
              ]);
    } else {
      return /* [] */0;
    }
  } else {
    return Pervasives.failwith("init on empty list");
  }
}

function last(_xs) {
  while(true) {
    var xs = _xs;
    if (xs) {
      var xs$1 = xs[1];
      if (xs$1) {
        _xs = xs$1;
        continue ;
      } else {
        return xs[0];
      }
    } else {
      return Pervasives.failwith("last on empty list");
    }
  };
}

function span(p, xs) {
  if (xs) {
    var xs$1 = xs[1];
    var x = xs[0];
    if (Curry._1(p, x)) {
      var match = span(p, xs$1);
      return /* tuple */[
              /* :: */Block.simpleVariant("::", [
                  x,
                  match[0]
                ]),
              match[1]
            ];
    } else {
      return /* tuple */[
              /* [] */0,
              xs$1
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            /* [] */0
          ];
  }
}

function dropWhile(p, _xs) {
  while(true) {
    var xs = _xs;
    if (xs) {
      var xs$1 = xs[1];
      var x = xs[0];
      if (Curry._1(p, x)) {
        _xs = xs$1;
        continue ;
      } else {
        return /* :: */Block.simpleVariant("::", [
                  x,
                  xs$1
                ]);
      }
    } else {
      return /* [] */0;
    }
  };
}

var List_ = /* module */Block.localModule([
    "sepBy",
    "init",
    "last",
    "span",
    "dropWhile"
  ], [
    sepBy$1,
    init,
    last,
    span,
    dropWhile
  ]);

exports.sepBy = sepBy;
exports.contains = contains;
exports.enclosedBy = enclosedBy;
exports.List_ = List_;
/* contains Not a pure module */
