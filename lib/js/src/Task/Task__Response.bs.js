// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Goal$AgdaMode = require("../Goal.bs.js");
var Task$AgdaMode = require("./Task.bs.js");
var Parser$AgdaMode = require("../Parser.bs.js");
var RunningInfo$AgdaMode = require("../RunningInfo.bs.js");
var Instance__Goals$AgdaMode = require("../Instance/Instance__Goals.bs.js");
var Task__DisplayInfo$AgdaMode = require("./Task__DisplayInfo.bs.js");
var Instance__TextEditors$AgdaMode = require("../Instance/Instance__TextEditors.bs.js");
var Instance__Highlightings$AgdaMode = require("../Instance/Instance__Highlightings.bs.js");

function handle(response) {
  if (typeof response === "number") {
    switch (response) {
      case /* NoStatus */0 :
      case /* ClearRunningInfo */1 :
          return /* [] */0;
      case /* ClearHighlighting */2 :
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        Instance__Highlightings$AgdaMode.destroyAll(instance);
                        return Task$AgdaMode.$$return(/* [] */0);
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* DoneAborting */3 :
          return {
                  hd: {
                    TAG: 2,
                    _0: "Status",
                    _1: /* Warning */4,
                    _2: {
                      _0: {
                        TAG: 8,
                        _0: "Done aborting",
                        [Symbol.for("name")]: "PlainText"
                      },
                      [Symbol.for("name")]: "Emacs"
                    },
                    [Symbol.for("name")]: "Display"
                  },
                  tl: /* [] */0
                };
      
    }
  } else {
    switch (response.TAG | 0) {
      case /* HighlightingInfoDirect */0 :
          return {
                  hd: {
                    TAG: 6,
                    _0: {
                      TAG: 0,
                      _0: response._1,
                      [Symbol.for("name")]: "AddDirectly"
                    },
                    [Symbol.for("name")]: "Highlightings"
                  },
                  tl: /* [] */0
                };
      case /* HighlightingInfoIndirect */1 :
          return {
                  hd: {
                    TAG: 6,
                    _0: {
                      TAG: 1,
                      _0: response._0,
                      [Symbol.for("name")]: "AddIndirectly"
                    },
                    [Symbol.for("name")]: "Highlightings"
                  },
                  tl: /* [] */0
                };
      case /* Status */2 :
          var checked = response._1;
          var displayImplicit = response._0;
          if (displayImplicit || checked) {
            return {
                    hd: {
                      TAG: 2,
                      _0: "Status",
                      _1: /* PlainText */0,
                      _2: {
                        _0: {
                          TAG: 8,
                          _0: "Typechecked: " + (Pervasives.string_of_bool(checked) + ("\nDisplay implicit arguments: " + Pervasives.string_of_bool(displayImplicit))),
                          [Symbol.for("name")]: "PlainText"
                        },
                        [Symbol.for("name")]: "Emacs"
                      },
                      [Symbol.for("name")]: "Display"
                    },
                    tl: /* [] */0
                  };
          } else {
            return /* [] */0;
          }
      case /* JumpToError */3 :
          var index = response._1;
          var targetFilePath = response._0;
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        if (targetFilePath !== Instance__TextEditors$AgdaMode.getPath(instance)) {
                          return Task$AgdaMode.$$return(/* [] */0);
                        }
                        var point = instance.editors.source.getBuffer().positionForCharacterIndex(index - 1 | 0);
                        return $$Promise.map($$Promise.exec(function (resolve) {
                                        setTimeout((function (param) {
                                                instance.editors.source.setCursorBufferPosition(point);
                                                Curry._1(resolve, undefined);
                                                
                                              }), 0);
                                        
                                      }), (function (param) {
                                      return {
                                              TAG: 0,
                                              _0: /* [] */0,
                                              [Symbol.for("name")]: "Ok"
                                            };
                                    }));
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* InteractionPoints */4 :
          var indices = response._0;
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        Instance__Goals$AgdaMode.instantiateAll(indices, instance);
                        return Task$AgdaMode.$$return(/* [] */0);
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* GiveAction */5 :
          var give = response._1;
          var index$1 = response._0;
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        var goal = Instance__Goals$AgdaMode.find(index$1, instance);
                        if (goal !== undefined) {
                          if (typeof give === "number") {
                            if (give === 0) {
                              var content = Goal$AgdaMode.getContent(goal);
                              Goal$AgdaMode.setContent("(" + (content + ")"), goal);
                            }
                            
                          } else {
                            Goal$AgdaMode.setContent(give._0.replace(/\\n/g, "\n"), goal);
                          }
                          Goal$AgdaMode.removeBoundary(goal);
                          Goal$AgdaMode.destroy(goal);
                          return Task$AgdaMode.$$return(/* [] */0);
                        }
                        console.log("error: cannot find goal #" + String(index$1));
                        return Task$AgdaMode.$$return(/* [] */0);
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* MakeCase */6 :
          var lines = response._1;
          var makeCaseType = response._0;
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        var pointed = Instance__TextEditors$AgdaMode.pointingAt(undefined, instance);
                        if (pointed !== undefined) {
                          if (makeCaseType) {
                            Goal$AgdaMode.writeLambda(lines, pointed);
                          } else {
                            Goal$AgdaMode.writeLines(lines, pointed);
                          }
                          return Task$AgdaMode.$$return({
                                      hd: {
                                        TAG: 7,
                                        _0: /* Load */0,
                                        [Symbol.for("name")]: "DispatchCommand"
                                      },
                                      tl: /* [] */0
                                    });
                        } else {
                          return $$Promise.resolved({
                                      TAG: 1,
                                      _0: /* OutOfGoal */1,
                                      [Symbol.for("name")]: "Error"
                                    });
                        }
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* SolveAll */7 :
          var solutions = response._0;
          return {
                  hd: {
                    TAG: 0,
                    _0: (function (instance) {
                        var solve = function (param) {
                          var goal = Instance__Goals$AgdaMode.find(param[0], instance);
                          if (goal !== undefined) {
                            Goal$AgdaMode.setContent(param[1], goal);
                            Instance__Goals$AgdaMode.setCursor(goal, instance);
                            return {
                                    hd: {
                                      TAG: 7,
                                      _0: /* Give */13,
                                      [Symbol.for("name")]: "DispatchCommand"
                                    },
                                    tl: /* [] */0
                                  };
                          } else {
                            return /* [] */0;
                          }
                        };
                        var tasks = Rebase.List.flatMap(solve, Rebase.List.fromArray(solutions));
                        var size = Rebase.$$Array.length(solutions);
                        var after = size === 0 ? ({
                              hd: {
                                TAG: 2,
                                _0: "No solutions found",
                                _1: /* PlainText */0,
                                _2: {
                                  _0: {
                                    TAG: 8,
                                    _0: "",
                                    [Symbol.for("name")]: "PlainText"
                                  },
                                  [Symbol.for("name")]: "Emacs"
                                },
                                [Symbol.for("name")]: "Display"
                              },
                              tl: /* [] */0
                            }) : ({
                              hd: {
                                TAG: 2,
                                _0: String(size) + " goals solved",
                                _1: /* Success */3,
                                _2: {
                                  _0: {
                                    TAG: 8,
                                    _0: "",
                                    [Symbol.for("name")]: "PlainText"
                                  },
                                  [Symbol.for("name")]: "Emacs"
                                },
                                [Symbol.for("name")]: "Display"
                              },
                              tl: /* [] */0
                            });
                        return Task$AgdaMode.$$return(Rebase.List.concat(tasks, after));
                      }),
                    [Symbol.for("name")]: "WithInstance"
                  },
                  tl: /* [] */0
                };
      case /* DisplayInfo */8 :
          return Task__DisplayInfo$AgdaMode.handle(response._0);
      case /* RunningInfo */9 :
          var message = response._1;
          if (response._0 >= 2) {
            return {
                    hd: {
                      TAG: 0,
                      _0: (function (instance) {
                          RunningInfo$AgdaMode.add(Parser$AgdaMode.agdaOutput(message), instance.runningInfo);
                          return Task$AgdaMode.$$return(/* [] */0);
                        }),
                      [Symbol.for("name")]: "WithInstance"
                    },
                    tl: /* [] */0
                  };
          } else {
            return {
                    hd: {
                      TAG: 2,
                      _0: "Type-checking",
                      _1: /* PlainText */0,
                      _2: {
                        _0: {
                          TAG: 8,
                          _0: message,
                          [Symbol.for("name")]: "PlainText"
                        },
                        [Symbol.for("name")]: "Emacs"
                      },
                      [Symbol.for("name")]: "Display"
                    },
                    tl: /* [] */0
                  };
          }
      
    }
  }
}

var Goals;

var Highlightings;

var Connections;

var TextEditors;

exports.Goals = Goals;
exports.Highlightings = Highlightings;
exports.Connections = Connections;
exports.TextEditors = TextEditors;
exports.handle = handle;
/* Promise Not a pure module */
